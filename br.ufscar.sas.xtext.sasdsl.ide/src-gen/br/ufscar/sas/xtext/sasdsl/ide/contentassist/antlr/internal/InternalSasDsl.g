/*
 * generated by Xtext 2.10.0
 */
grammar InternalSasDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package br.ufscar.sas.xtext.sasdsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package br.ufscar.sas.xtext.sasdsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import br.ufscar.sas.xtext.sasdsl.services.SasDslGrammarAccess;

}
@parser::members {
	private SasDslGrammarAccess grammarAccess;

	public void setGrammarAccess(SasDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleArchitectureDefinition
entryRuleArchitectureDefinition
:
{ before(grammarAccess.getArchitectureDefinitionRule()); }
	 ruleArchitectureDefinition
{ after(grammarAccess.getArchitectureDefinitionRule()); } 
	 EOF 
;

// Rule ArchitectureDefinition
ruleArchitectureDefinition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getArchitectureDefinitionAccess().getSectionAssignment()); }
		(rule__ArchitectureDefinition__SectionAssignment)*
		{ after(grammarAccess.getArchitectureDefinitionAccess().getSectionAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSections
entryRuleSections
:
{ before(grammarAccess.getSectionsRule()); }
	 ruleSections
{ after(grammarAccess.getSectionsRule()); } 
	 EOF 
;

// Rule Sections
ruleSections 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSectionsAccess().getGroup()); }
		(rule__Sections__Group__0)
		{ after(grammarAccess.getSectionsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAbstractions
entryRuleAbstractions
:
{ before(grammarAccess.getAbstractionsRule()); }
	 ruleAbstractions
{ after(grammarAccess.getAbstractionsRule()); } 
	 EOF 
;

// Rule Abstractions
ruleAbstractions 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAbstractionsAccess().getGroup()); }
		(rule__Abstractions__Group__0)
		{ after(grammarAccess.getAbstractionsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCompositions
entryRuleCompositions
:
{ before(grammarAccess.getCompositionsRule()); }
	 ruleCompositions
{ after(grammarAccess.getCompositionsRule()); } 
	 EOF 
;

// Rule Compositions
ruleCompositions 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCompositionsAccess().getGroup()); }
		(rule__Compositions__Group__0)
		{ after(grammarAccess.getCompositionsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRestrictions
entryRuleRestrictions
:
{ before(grammarAccess.getRestrictionsRule()); }
	 ruleRestrictions
{ after(grammarAccess.getRestrictionsRule()); } 
	 EOF 
;

// Rule Restrictions
ruleRestrictions 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRestrictionsAccess().getGroup()); }
		(rule__Restrictions__Group__0)
		{ after(grammarAccess.getRestrictionsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAbstraction
entryRuleAbstraction
:
{ before(grammarAccess.getAbstractionRule()); }
	 ruleAbstraction
{ after(grammarAccess.getAbstractionRule()); } 
	 EOF 
;

// Rule Abstraction
ruleAbstraction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAbstractionAccess().getAlternatives()); }
		(rule__Abstraction__Alternatives)
		{ after(grammarAccess.getAbstractionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Abstraction__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAbstractionAccess().getMonitorKeyword_0()); }
		'Monitor'
		{ after(grammarAccess.getAbstractionAccess().getMonitorKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getAbstractionAccess().getManagingKeyword_1()); }
		'Managing'
		{ after(grammarAccess.getAbstractionAccess().getManagingKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getAbstractionAccess().getManagedKeyword_2()); }
		'Managed'
		{ after(grammarAccess.getAbstractionAccess().getManagedKeyword_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sections__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sections__Group__0__Impl
	rule__Sections__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Sections__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSectionsAccess().getAbstractionsAssignment_0()); }
	(rule__Sections__AbstractionsAssignment_0)
	{ after(grammarAccess.getSectionsAccess().getAbstractionsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sections__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sections__Group__1__Impl
	rule__Sections__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Sections__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSectionsAccess().getCompositionsAssignment_1()); }
	(rule__Sections__CompositionsAssignment_1)
	{ after(grammarAccess.getSectionsAccess().getCompositionsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sections__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sections__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Sections__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSectionsAccess().getRestrictionsAssignment_2()); }
	(rule__Sections__RestrictionsAssignment_2)
	{ after(grammarAccess.getSectionsAccess().getRestrictionsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Abstractions__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Abstractions__Group__0__Impl
	rule__Abstractions__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Abstractions__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAbstractionsAccess().getAbstractionsKeyword_0()); }
	'Abstractions'
	{ after(grammarAccess.getAbstractionsAccess().getAbstractionsKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Abstractions__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Abstractions__Group__1__Impl
	rule__Abstractions__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Abstractions__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAbstractionsAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getAbstractionsAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Abstractions__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Abstractions__Group__2__Impl
	rule__Abstractions__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Abstractions__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAbstractionsAccess().getAbstractionParserRuleCall_2()); }
	ruleAbstraction
	{ after(grammarAccess.getAbstractionsAccess().getAbstractionParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Abstractions__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Abstractions__Group__3__Impl
	rule__Abstractions__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Abstractions__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getAbstractionsAccess().getGroup_3()); }
		(rule__Abstractions__Group_3__0)
		{ after(grammarAccess.getAbstractionsAccess().getGroup_3()); }
	)
	(
		{ before(grammarAccess.getAbstractionsAccess().getGroup_3()); }
		(rule__Abstractions__Group_3__0)*
		{ after(grammarAccess.getAbstractionsAccess().getGroup_3()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Abstractions__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Abstractions__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Abstractions__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAbstractionsAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getAbstractionsAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Abstractions__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Abstractions__Group_3__0__Impl
	rule__Abstractions__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Abstractions__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAbstractionsAccess().getNameAssignment_3_0()); }
	(rule__Abstractions__NameAssignment_3_0)
	{ after(grammarAccess.getAbstractionsAccess().getNameAssignment_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Abstractions__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Abstractions__Group_3__1__Impl
	rule__Abstractions__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Abstractions__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAbstractionsAccess().getGroup_3_1()); }
	(rule__Abstractions__Group_3_1__0)*
	{ after(grammarAccess.getAbstractionsAccess().getGroup_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Abstractions__Group_3__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Abstractions__Group_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Abstractions__Group_3__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAbstractionsAccess().getSemicolonKeyword_3_2()); }
	';'
	{ after(grammarAccess.getAbstractionsAccess().getSemicolonKeyword_3_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Abstractions__Group_3_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Abstractions__Group_3_1__0__Impl
	rule__Abstractions__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Abstractions__Group_3_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAbstractionsAccess().getCommaKeyword_3_1_0()); }
	','
	{ after(grammarAccess.getAbstractionsAccess().getCommaKeyword_3_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Abstractions__Group_3_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Abstractions__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Abstractions__Group_3_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAbstractionsAccess().getNameAssignment_3_1_1()); }
	(rule__Abstractions__NameAssignment_3_1_1)
	{ after(grammarAccess.getAbstractionsAccess().getNameAssignment_3_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Compositions__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Compositions__Group__0__Impl
	rule__Compositions__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Compositions__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompositionsAccess().getCompositionsKeyword_0()); }
	'Compositions'
	{ after(grammarAccess.getCompositionsAccess().getCompositionsKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Compositions__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Compositions__Group__1__Impl
	rule__Compositions__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Compositions__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompositionsAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getCompositionsAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Compositions__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Compositions__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Compositions__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompositionsAccess().getRightCurlyBracketKeyword_2()); }
	'}'
	{ after(grammarAccess.getCompositionsAccess().getRightCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Restrictions__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Restrictions__Group__0__Impl
	rule__Restrictions__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Restrictions__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRestrictionsAccess().getRestrictionsKeyword_0()); }
	'Restrictions'
	{ after(grammarAccess.getRestrictionsAccess().getRestrictionsKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Restrictions__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Restrictions__Group__1__Impl
	rule__Restrictions__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Restrictions__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRestrictionsAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getRestrictionsAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Restrictions__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Restrictions__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Restrictions__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRestrictionsAccess().getRightCurlyBracketKeyword_2()); }
	'}'
	{ after(grammarAccess.getRestrictionsAccess().getRightCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ArchitectureDefinition__SectionAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArchitectureDefinitionAccess().getSectionSectionsParserRuleCall_0()); }
		ruleSections
		{ after(grammarAccess.getArchitectureDefinitionAccess().getSectionSectionsParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sections__AbstractionsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSectionsAccess().getAbstractionsAbstractionsParserRuleCall_0_0()); }
		ruleAbstractions
		{ after(grammarAccess.getSectionsAccess().getAbstractionsAbstractionsParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sections__CompositionsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSectionsAccess().getCompositionsCompositionsParserRuleCall_1_0()); }
		ruleCompositions
		{ after(grammarAccess.getSectionsAccess().getCompositionsCompositionsParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sections__RestrictionsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSectionsAccess().getRestrictionsRestrictionsParserRuleCall_2_0()); }
		ruleRestrictions
		{ after(grammarAccess.getSectionsAccess().getRestrictionsRestrictionsParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Abstractions__NameAssignment_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAbstractionsAccess().getNameIDTerminalRuleCall_3_0_0()); }
		RULE_ID
		{ after(grammarAccess.getAbstractionsAccess().getNameIDTerminalRuleCall_3_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Abstractions__NameAssignment_3_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAbstractionsAccess().getNameIDTerminalRuleCall_3_1_1_0()); }
		RULE_ID
		{ after(grammarAccess.getAbstractionsAccess().getNameIDTerminalRuleCall_3_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
