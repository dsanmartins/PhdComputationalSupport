/*
 * generated by Xtext 2.10.0
 */
package br.ufscar.sas.xtext.sasdsl.ide.contentassist.antlr;

import br.ufscar.sas.xtext.sasdsl.ide.contentassist.antlr.internal.InternalSasDslParser;
import br.ufscar.sas.xtext.sasdsl.services.SasDslGrammarAccess;
import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

public class SasDslParser extends AbstractContentAssistParser {

	@Inject
	private SasDslGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalSasDslParser createParser() {
		InternalSasDslParser result = new InternalSasDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getDSLAbstractionsAccess().getAlternatives(), "rule__DSLAbstractions__Alternatives");
					put(grammarAccess.getDSLTypeCLMAccess().getAlternatives(), "rule__DSLTypeCLM__Alternatives");
					put(grammarAccess.getDSLContainrerForCLAccess().getAlternatives(), "rule__DSLContainrerForCL__Alternatives");
					put(grammarAccess.getDSLContainerForMAPEAccess().getAlternatives(), "rule__DSLContainerForMAPE__Alternatives");
					put(grammarAccess.getDSLRestrictionsAccess().getAlternatives(), "rule__DSLRestrictions__Alternatives");
					put(grammarAccess.getElementTypeAccess().getAlternatives(), "rule__ElementType__Alternatives");
					put(grammarAccess.getBasicTypeAccess().getTypeNameAlternatives_0(), "rule__BasicType__TypeNameAlternatives_0");
					put(grammarAccess.getEntityTypeAccess().getEntityAlternatives_0(), "rule__EntityType__EntityAlternatives_0");
					put(grammarAccess.getArchitectureDefinitionAccess().getGroup(), "rule__ArchitectureDefinition__Group__0");
					put(grammarAccess.getDSLManagingAccess().getGroup(), "rule__DSLManaging__Group__0");
					put(grammarAccess.getDSLManagingAccess().getGroup_2(), "rule__DSLManaging__Group_2__0");
					put(grammarAccess.getDSLManagedAccess().getGroup(), "rule__DSLManaged__Group__0");
					put(grammarAccess.getDSLManagedAccess().getGroup_2(), "rule__DSLManaged__Group_2__0");
					put(grammarAccess.getDSLControlLoopManagerAccess().getGroup(), "rule__DSLControlLoopManager__Group__0");
					put(grammarAccess.getDSLControlLoopManagerAccess().getGroup_4(), "rule__DSLControlLoopManager__Group_4__0");
					put(grammarAccess.getDSLControlLoopAccess().getGroup(), "rule__DSLControlLoop__Group__0");
					put(grammarAccess.getDSLControlLoopAccess().getGroup_2(), "rule__DSLControlLoop__Group_2__0");
					put(grammarAccess.getDSLMonitorAccess().getGroup(), "rule__DSLMonitor__Group__0");
					put(grammarAccess.getDSLMonitorAccess().getGroup_2(), "rule__DSLMonitor__Group_2__0");
					put(grammarAccess.getDSLAnalyzerAccess().getGroup(), "rule__DSLAnalyzer__Group__0");
					put(grammarAccess.getDSLAnalyzerAccess().getGroup_2(), "rule__DSLAnalyzer__Group_2__0");
					put(grammarAccess.getDSLPlannerAccess().getGroup(), "rule__DSLPlanner__Group__0");
					put(grammarAccess.getDSLPlannerAccess().getGroup_2(), "rule__DSLPlanner__Group_2__0");
					put(grammarAccess.getDSLExecutorAccess().getGroup(), "rule__DSLExecutor__Group__0");
					put(grammarAccess.getDSLExecutorAccess().getGroup_2(), "rule__DSLExecutor__Group_2__0");
					put(grammarAccess.getDSLKnowledgeAccess().getGroup(), "rule__DSLKnowledge__Group__0");
					put(grammarAccess.getDSLKnowledgeAccess().getGroup_2(), "rule__DSLKnowledge__Group_2__0");
					put(grammarAccess.getDSLSensorAccess().getGroup(), "rule__DSLSensor__Group__0");
					put(grammarAccess.getDSLSensorAccess().getGroup_2(), "rule__DSLSensor__Group_2__0");
					put(grammarAccess.getDSLEffectorAccess().getGroup(), "rule__DSLEffector__Group__0");
					put(grammarAccess.getDSLEffectorAccess().getGroup_2(), "rule__DSLEffector__Group_2__0");
					put(grammarAccess.getDSLProbeAccess().getGroup(), "rule__DSLProbe__Group__0");
					put(grammarAccess.getDSLProbeAccess().getGroup_2(), "rule__DSLProbe__Group_2__0");
					put(grammarAccess.getDSLGaugeAccess().getGroup(), "rule__DSLGauge__Group__0");
					put(grammarAccess.getDSLGaugeAccess().getGroup_2(), "rule__DSLGauge__Group_2__0");
					put(grammarAccess.getDSLReferenceInputAccess().getGroup(), "rule__DSLReferenceInput__Group__0");
					put(grammarAccess.getDSLReferenceInputAccess().getGroup_2(), "rule__DSLReferenceInput__Group_2__0");
					put(grammarAccess.getDSLMeasuredOutputAccess().getGroup(), "rule__DSLMeasuredOutput__Group__0");
					put(grammarAccess.getDSLMeasuredOutputAccess().getGroup_2(), "rule__DSLMeasuredOutput__Group_2__0");
					put(grammarAccess.getDSLRestrictionsAccess().getGroup_0(), "rule__DSLRestrictions__Group_0__0");
					put(grammarAccess.getDSLRestrictionsAccess().getGroup_1(), "rule__DSLRestrictions__Group_1__0");
					put(grammarAccess.getDSLRestrictionsAccess().getGroup_2(), "rule__DSLRestrictions__Group_2__0");
					put(grammarAccess.getDSLRestrictionsAccess().getGroup_3(), "rule__DSLRestrictions__Group_3__0");
					put(grammarAccess.getDSLRestrictionsAccess().getGroup_4(), "rule__DSLRestrictions__Group_4__0");
					put(grammarAccess.getArchitectureDefinitionAccess().getAbstractionsAssignment_2(), "rule__ArchitectureDefinition__AbstractionsAssignment_2");
					put(grammarAccess.getArchitectureDefinitionAccess().getDslRestrictionsAssignment_5(), "rule__ArchitectureDefinition__DslRestrictionsAssignment_5");
					put(grammarAccess.getDSLManagingAccess().getNameAssignment_1(), "rule__DSLManaging__NameAssignment_1");
					put(grammarAccess.getDSLManagingAccess().getSubSystemAssignment_2_1(), "rule__DSLManaging__SubSystemAssignment_2_1");
					put(grammarAccess.getDSLManagedAccess().getNameAssignment_1(), "rule__DSLManaged__NameAssignment_1");
					put(grammarAccess.getDSLManagedAccess().getSubSystemAssignment_2_1(), "rule__DSLManaged__SubSystemAssignment_2_1");
					put(grammarAccess.getDSLControlLoopManagerAccess().getNameAssignment_1(), "rule__DSLControlLoopManager__NameAssignment_1");
					put(grammarAccess.getDSLControlLoopManagerAccess().getManagingAssignment_4_1(), "rule__DSLControlLoopManager__ManagingAssignment_4_1");
					put(grammarAccess.getDSLControlLoopAccess().getNameAssignment_1(), "rule__DSLControlLoop__NameAssignment_1");
					put(grammarAccess.getDSLControlLoopAccess().getSubSystemAssignment_2_1(), "rule__DSLControlLoop__SubSystemAssignment_2_1");
					put(grammarAccess.getDSLMonitorAccess().getNameAssignment_1(), "rule__DSLMonitor__NameAssignment_1");
					put(grammarAccess.getDSLMonitorAccess().getSubSystemAssignment_2_1(), "rule__DSLMonitor__SubSystemAssignment_2_1");
					put(grammarAccess.getDSLAnalyzerAccess().getNameAssignment_1(), "rule__DSLAnalyzer__NameAssignment_1");
					put(grammarAccess.getDSLAnalyzerAccess().getSubSystemAssignment_2_1(), "rule__DSLAnalyzer__SubSystemAssignment_2_1");
					put(grammarAccess.getDSLPlannerAccess().getNameAssignment_1(), "rule__DSLPlanner__NameAssignment_1");
					put(grammarAccess.getDSLPlannerAccess().getSubSystemAssignment_2_1(), "rule__DSLPlanner__SubSystemAssignment_2_1");
					put(grammarAccess.getDSLExecutorAccess().getNameAssignment_1(), "rule__DSLExecutor__NameAssignment_1");
					put(grammarAccess.getDSLExecutorAccess().getSubSystemAssignment_2_1(), "rule__DSLExecutor__SubSystemAssignment_2_1");
					put(grammarAccess.getDSLKnowledgeAccess().getNameAssignment_1(), "rule__DSLKnowledge__NameAssignment_1");
					put(grammarAccess.getDSLKnowledgeAccess().getSubSystemAssignment_2_1(), "rule__DSLKnowledge__SubSystemAssignment_2_1");
					put(grammarAccess.getDSLSensorAccess().getNameAssignment_1(), "rule__DSLSensor__NameAssignment_1");
					put(grammarAccess.getDSLSensorAccess().getMonitorAssignment_2_1(), "rule__DSLSensor__MonitorAssignment_2_1");
					put(grammarAccess.getDSLEffectorAccess().getNameAssignment_1(), "rule__DSLEffector__NameAssignment_1");
					put(grammarAccess.getDSLEffectorAccess().getExecutorAssignment_2_1(), "rule__DSLEffector__ExecutorAssignment_2_1");
					put(grammarAccess.getDSLProbeAccess().getNameAssignment_1(), "rule__DSLProbe__NameAssignment_1");
					put(grammarAccess.getDSLProbeAccess().getManagedAssignment_2_1(), "rule__DSLProbe__ManagedAssignment_2_1");
					put(grammarAccess.getDSLGaugeAccess().getNameAssignment_1(), "rule__DSLGauge__NameAssignment_1");
					put(grammarAccess.getDSLGaugeAccess().getManagedAssignment_2_1(), "rule__DSLGauge__ManagedAssignment_2_1");
					put(grammarAccess.getDSLReferenceInputAccess().getNameAssignment_1(), "rule__DSLReferenceInput__NameAssignment_1");
					put(grammarAccess.getDSLReferenceInputAccess().getKwnoledgeAssignment_2_1(), "rule__DSLReferenceInput__KwnoledgeAssignment_2_1");
					put(grammarAccess.getDSLMeasuredOutputAccess().getNameAssignment_1(), "rule__DSLMeasuredOutput__NameAssignment_1");
					put(grammarAccess.getDSLMeasuredOutputAccess().getManagedAssignment_2_1(), "rule__DSLMeasuredOutput__ManagedAssignment_2_1");
					put(grammarAccess.getDSLRestrictionsAccess().getOnlyAssignment_0_0(), "rule__DSLRestrictions__OnlyAssignment_0_0");
					put(grammarAccess.getDSLRestrictionsAccess().getTAssignment_0_1(), "rule__DSLRestrictions__TAssignment_0_1");
					put(grammarAccess.getDSLRestrictionsAccess().getCanAssignment_0_2(), "rule__DSLRestrictions__CanAssignment_0_2");
					put(grammarAccess.getDSLRestrictionsAccess().getElementTypeAssignment_0_3(), "rule__DSLRestrictions__ElementTypeAssignment_0_3");
					put(grammarAccess.getDSLRestrictionsAccess().getTypeAssignment_0_4(), "rule__DSLRestrictions__TypeAssignment_0_4");
					put(grammarAccess.getDSLRestrictionsAccess().getTAssignment_1_0(), "rule__DSLRestrictions__TAssignment_1_0");
					put(grammarAccess.getDSLRestrictionsAccess().getCannotAssignment_1_1(), "rule__DSLRestrictions__CannotAssignment_1_1");
					put(grammarAccess.getDSLRestrictionsAccess().getElementTypeAssignment_1_2(), "rule__DSLRestrictions__ElementTypeAssignment_1_2");
					put(grammarAccess.getDSLRestrictionsAccess().getTypeAssignment_1_3(), "rule__DSLRestrictions__TypeAssignment_1_3");
					put(grammarAccess.getDSLRestrictionsAccess().getTAssignment_2_0(), "rule__DSLRestrictions__TAssignment_2_0");
					put(grammarAccess.getDSLRestrictionsAccess().getCanAssignment_2_1(), "rule__DSLRestrictions__CanAssignment_2_1");
					put(grammarAccess.getDSLRestrictionsAccess().getElementTypeAssignment_2_2(), "rule__DSLRestrictions__ElementTypeAssignment_2_2");
					put(grammarAccess.getDSLRestrictionsAccess().getTypeAssignment_2_3(), "rule__DSLRestrictions__TypeAssignment_2_3");
					put(grammarAccess.getDSLRestrictionsAccess().getTAssignment_3_0(), "rule__DSLRestrictions__TAssignment_3_0");
					put(grammarAccess.getDSLRestrictionsAccess().getCanAssignment_3_1(), "rule__DSLRestrictions__CanAssignment_3_1");
					put(grammarAccess.getDSLRestrictionsAccess().getElementTypeAssignment_3_2(), "rule__DSLRestrictions__ElementTypeAssignment_3_2");
					put(grammarAccess.getDSLRestrictionsAccess().getOnly2Assignment_3_3(), "rule__DSLRestrictions__Only2Assignment_3_3");
					put(grammarAccess.getDSLRestrictionsAccess().getTypeAssignment_3_4(), "rule__DSLRestrictions__TypeAssignment_3_4");
					put(grammarAccess.getDSLRestrictionsAccess().getTAssignment_4_0(), "rule__DSLRestrictions__TAssignment_4_0");
					put(grammarAccess.getDSLRestrictionsAccess().getMustAssignment_4_1(), "rule__DSLRestrictions__MustAssignment_4_1");
					put(grammarAccess.getDSLRestrictionsAccess().getEntityTypeAssignment_4_2(), "rule__DSLRestrictions__EntityTypeAssignment_4_2");
					put(grammarAccess.getDSLRestrictionsAccess().getTypeAssignment_4_3(), "rule__DSLRestrictions__TypeAssignment_4_3");
					put(grammarAccess.getOnlyAccess().getOnlyAssignment(), "rule__Only__OnlyAssignment");
					put(grammarAccess.getCanAccess().getCanAssignment(), "rule__Can__CanAssignment");
					put(grammarAccess.getCannotAccess().getCannotAssignment(), "rule__Cannot__CannotAssignment");
					put(grammarAccess.getOnly2Access().getOnly2Assignment(), "rule__Only2__Only2Assignment");
					put(grammarAccess.getMustAccess().getMustAssignment(), "rule__Must__MustAssignment");
					put(grammarAccess.getBasicTypeAccess().getTypeNameAssignment(), "rule__BasicType__TypeNameAssignment");
					put(grammarAccess.getEntityTypeAccess().getEntityAssignment(), "rule__EntityType__EntityAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalSasDslParser typedParser = (InternalSasDslParser) parser;
			typedParser.entryRuleArchitectureDefinition();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public SasDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(SasDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
