/*
 * generated by Xtext 2.10.0
 */
package br.ufscar.sas.xtext.sasdsl.ide.contentassist.antlr;

import br.ufscar.sas.xtext.sasdsl.ide.contentassist.antlr.internal.InternalSasDslParser;
import br.ufscar.sas.xtext.sasdsl.services.SasDslGrammarAccess;
import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

public class SasDslParser extends AbstractContentAssistParser {

	@Inject
	private SasDslGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalSasDslParser createParser() {
		InternalSasDslParser result = new InternalSasDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getAbstractionAccess().getAlternatives(), "rule__Abstraction__Alternatives");
					put(grammarAccess.getSectionsAccess().getGroup(), "rule__Sections__Group__0");
					put(grammarAccess.getAbstractionsAccess().getGroup(), "rule__Abstractions__Group__0");
					put(grammarAccess.getAbstractionsAccess().getGroup_3(), "rule__Abstractions__Group_3__0");
					put(grammarAccess.getAbstractionsAccess().getGroup_3_1(), "rule__Abstractions__Group_3_1__0");
					put(grammarAccess.getCompositionsAccess().getGroup(), "rule__Compositions__Group__0");
					put(grammarAccess.getRestrictionsAccess().getGroup(), "rule__Restrictions__Group__0");
					put(grammarAccess.getArchitectureDefinitionAccess().getSectionAssignment(), "rule__ArchitectureDefinition__SectionAssignment");
					put(grammarAccess.getSectionsAccess().getAbstractionsAssignment_0(), "rule__Sections__AbstractionsAssignment_0");
					put(grammarAccess.getSectionsAccess().getCompositionsAssignment_1(), "rule__Sections__CompositionsAssignment_1");
					put(grammarAccess.getSectionsAccess().getRestrictionsAssignment_2(), "rule__Sections__RestrictionsAssignment_2");
					put(grammarAccess.getAbstractionsAccess().getNameAssignment_3_0(), "rule__Abstractions__NameAssignment_3_0");
					put(grammarAccess.getAbstractionsAccess().getNameAssignment_3_1_1(), "rule__Abstractions__NameAssignment_3_1_1");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalSasDslParser typedParser = (InternalSasDslParser) parser;
			typedParser.entryRuleArchitectureDefinition();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public SasDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(SasDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
