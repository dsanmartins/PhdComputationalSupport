/*
 * generated by Xtext 2.10.0
 */
package br.ufscar.sas.xtext.sasdsl.ide.contentassist.antlr;

import br.ufscar.sas.xtext.sasdsl.ide.contentassist.antlr.internal.InternalSasDslParser;
import br.ufscar.sas.xtext.sasdsl.services.SasDslGrammarAccess;
import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

public class SasDslParser extends AbstractContentAssistParser {

	@Inject
	private SasDslGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalSasDslParser createParser() {
		InternalSasDslParser result = new InternalSasDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getDCLAbstractionsAccess().getAlternatives(), "rule__DCLAbstractions__Alternatives");
					put(grammarAccess.getArchitectureDefinitionAccess().getGroup(), "rule__ArchitectureDefinition__Group__0");
					put(grammarAccess.getDCLManagingAccess().getGroup(), "rule__DCLManaging__Group__0");
					put(grammarAccess.getDCLManagingAccess().getGroup_1(), "rule__DCLManaging__Group_1__0");
					put(grammarAccess.getDCLManagingAccess().getGroup_1_1(), "rule__DCLManaging__Group_1_1__0");
					put(grammarAccess.getDCLManagedAccess().getGroup(), "rule__DCLManaged__Group__0");
					put(grammarAccess.getDCLManagedAccess().getGroup_1(), "rule__DCLManaged__Group_1__0");
					put(grammarAccess.getDCLManagedAccess().getGroup_1_1(), "rule__DCLManaged__Group_1_1__0");
					put(grammarAccess.getDCLControlLoopManagerAccess().getGroup(), "rule__DCLControlLoopManager__Group__0");
					put(grammarAccess.getDCLControlLoopManagerAccess().getGroup_1(), "rule__DCLControlLoopManager__Group_1__0");
					put(grammarAccess.getDCLControlLoopManagerAccess().getGroup_1_1(), "rule__DCLControlLoopManager__Group_1_1__0");
					put(grammarAccess.getDCLControlLoopAccess().getGroup(), "rule__DCLControlLoop__Group__0");
					put(grammarAccess.getDCLControlLoopAccess().getGroup_1(), "rule__DCLControlLoop__Group_1__0");
					put(grammarAccess.getDCLControlLoopAccess().getGroup_1_1(), "rule__DCLControlLoop__Group_1_1__0");
					put(grammarAccess.getDCLMonitorAccess().getGroup(), "rule__DCLMonitor__Group__0");
					put(grammarAccess.getDCLMonitorAccess().getGroup_1(), "rule__DCLMonitor__Group_1__0");
					put(grammarAccess.getDCLMonitorAccess().getGroup_1_1(), "rule__DCLMonitor__Group_1_1__0");
					put(grammarAccess.getDCLAnalyzerAccess().getGroup(), "rule__DCLAnalyzer__Group__0");
					put(grammarAccess.getDCLAnalyzerAccess().getGroup_1(), "rule__DCLAnalyzer__Group_1__0");
					put(grammarAccess.getDCLAnalyzerAccess().getGroup_1_1(), "rule__DCLAnalyzer__Group_1_1__0");
					put(grammarAccess.getDCLPlannerAccess().getGroup(), "rule__DCLPlanner__Group__0");
					put(grammarAccess.getDCLPlannerAccess().getGroup_1(), "rule__DCLPlanner__Group_1__0");
					put(grammarAccess.getDCLPlannerAccess().getGroup_1_1(), "rule__DCLPlanner__Group_1_1__0");
					put(grammarAccess.getDCLExecutorAccess().getGroup(), "rule__DCLExecutor__Group__0");
					put(grammarAccess.getDCLExecutorAccess().getGroup_1(), "rule__DCLExecutor__Group_1__0");
					put(grammarAccess.getDCLExecutorAccess().getGroup_1_1(), "rule__DCLExecutor__Group_1_1__0");
					put(grammarAccess.getDCLKnowledgeAccess().getGroup(), "rule__DCLKnowledge__Group__0");
					put(grammarAccess.getDCLKnowledgeAccess().getGroup_1(), "rule__DCLKnowledge__Group_1__0");
					put(grammarAccess.getDCLKnowledgeAccess().getGroup_1_1(), "rule__DCLKnowledge__Group_1_1__0");
					put(grammarAccess.getDCLSensorAccess().getGroup(), "rule__DCLSensor__Group__0");
					put(grammarAccess.getDCLSensorAccess().getGroup_1(), "rule__DCLSensor__Group_1__0");
					put(grammarAccess.getDCLSensorAccess().getGroup_1_1(), "rule__DCLSensor__Group_1_1__0");
					put(grammarAccess.getDCLEffectorAccess().getGroup(), "rule__DCLEffector__Group__0");
					put(grammarAccess.getDCLEffectorAccess().getGroup_1(), "rule__DCLEffector__Group_1__0");
					put(grammarAccess.getDCLEffectorAccess().getGroup_1_1(), "rule__DCLEffector__Group_1_1__0");
					put(grammarAccess.getDCLProbeAccess().getGroup(), "rule__DCLProbe__Group__0");
					put(grammarAccess.getDCLProbeAccess().getGroup_1(), "rule__DCLProbe__Group_1__0");
					put(grammarAccess.getDCLProbeAccess().getGroup_1_1(), "rule__DCLProbe__Group_1_1__0");
					put(grammarAccess.getDCLGaugeAccess().getGroup(), "rule__DCLGauge__Group__0");
					put(grammarAccess.getDCLGaugeAccess().getGroup_1(), "rule__DCLGauge__Group_1__0");
					put(grammarAccess.getDCLGaugeAccess().getGroup_1_1(), "rule__DCLGauge__Group_1_1__0");
					put(grammarAccess.getDCLReferenceInputAccess().getGroup(), "rule__DCLReferenceInput__Group__0");
					put(grammarAccess.getDCLReferenceInputAccess().getGroup_1(), "rule__DCLReferenceInput__Group_1__0");
					put(grammarAccess.getDCLReferenceInputAccess().getGroup_1_1(), "rule__DCLReferenceInput__Group_1_1__0");
					put(grammarAccess.getDCLMeasuredOutputAccess().getGroup(), "rule__DCLMeasuredOutput__Group__0");
					put(grammarAccess.getDCLMeasuredOutputAccess().getGroup_1(), "rule__DCLMeasuredOutput__Group_1__0");
					put(grammarAccess.getDCLMeasuredOutputAccess().getGroup_1_1(), "rule__DCLMeasuredOutput__Group_1_1__0");
					put(grammarAccess.getArchitectureDefinitionAccess().getAbstractionsAssignment_2(), "rule__ArchitectureDefinition__AbstractionsAssignment_2");
					put(grammarAccess.getDCLAbstractionsAccess().getManagingAssignment_0(), "rule__DCLAbstractions__ManagingAssignment_0");
					put(grammarAccess.getDCLManagingAccess().getNameAssignment_1_0(), "rule__DCLManaging__NameAssignment_1_0");
					put(grammarAccess.getDCLManagingAccess().getNameAssignment_1_1_1(), "rule__DCLManaging__NameAssignment_1_1_1");
					put(grammarAccess.getDCLManagedAccess().getNameAssignment_1_0(), "rule__DCLManaged__NameAssignment_1_0");
					put(grammarAccess.getDCLManagedAccess().getNameAssignment_1_1_1(), "rule__DCLManaged__NameAssignment_1_1_1");
					put(grammarAccess.getDCLControlLoopManagerAccess().getNameAssignment_1_0(), "rule__DCLControlLoopManager__NameAssignment_1_0");
					put(grammarAccess.getDCLControlLoopManagerAccess().getNameAssignment_1_1_1(), "rule__DCLControlLoopManager__NameAssignment_1_1_1");
					put(grammarAccess.getDCLControlLoopAccess().getNameAssignment_1_0(), "rule__DCLControlLoop__NameAssignment_1_0");
					put(grammarAccess.getDCLControlLoopAccess().getNameAssignment_1_1_1(), "rule__DCLControlLoop__NameAssignment_1_1_1");
					put(grammarAccess.getDCLMonitorAccess().getNameAssignment_1_0(), "rule__DCLMonitor__NameAssignment_1_0");
					put(grammarAccess.getDCLMonitorAccess().getNameAssignment_1_1_1(), "rule__DCLMonitor__NameAssignment_1_1_1");
					put(grammarAccess.getDCLAnalyzerAccess().getNameAssignment_1_0(), "rule__DCLAnalyzer__NameAssignment_1_0");
					put(grammarAccess.getDCLAnalyzerAccess().getNameAssignment_1_1_1(), "rule__DCLAnalyzer__NameAssignment_1_1_1");
					put(grammarAccess.getDCLPlannerAccess().getNameAssignment_1_0(), "rule__DCLPlanner__NameAssignment_1_0");
					put(grammarAccess.getDCLPlannerAccess().getNameAssignment_1_1_1(), "rule__DCLPlanner__NameAssignment_1_1_1");
					put(grammarAccess.getDCLExecutorAccess().getNameAssignment_1_0(), "rule__DCLExecutor__NameAssignment_1_0");
					put(grammarAccess.getDCLExecutorAccess().getNameAssignment_1_1_1(), "rule__DCLExecutor__NameAssignment_1_1_1");
					put(grammarAccess.getDCLKnowledgeAccess().getNameAssignment_1_0(), "rule__DCLKnowledge__NameAssignment_1_0");
					put(grammarAccess.getDCLKnowledgeAccess().getNameAssignment_1_1_1(), "rule__DCLKnowledge__NameAssignment_1_1_1");
					put(grammarAccess.getDCLSensorAccess().getNameAssignment_1_0(), "rule__DCLSensor__NameAssignment_1_0");
					put(grammarAccess.getDCLSensorAccess().getNameAssignment_1_1_1(), "rule__DCLSensor__NameAssignment_1_1_1");
					put(grammarAccess.getDCLEffectorAccess().getNameAssignment_1_0(), "rule__DCLEffector__NameAssignment_1_0");
					put(grammarAccess.getDCLEffectorAccess().getNameAssignment_1_1_1(), "rule__DCLEffector__NameAssignment_1_1_1");
					put(grammarAccess.getDCLProbeAccess().getNameAssignment_1_0(), "rule__DCLProbe__NameAssignment_1_0");
					put(grammarAccess.getDCLProbeAccess().getNameAssignment_1_1_1(), "rule__DCLProbe__NameAssignment_1_1_1");
					put(grammarAccess.getDCLGaugeAccess().getNameAssignment_1_0(), "rule__DCLGauge__NameAssignment_1_0");
					put(grammarAccess.getDCLGaugeAccess().getNameAssignment_1_1_1(), "rule__DCLGauge__NameAssignment_1_1_1");
					put(grammarAccess.getDCLReferenceInputAccess().getNameAssignment_1_0(), "rule__DCLReferenceInput__NameAssignment_1_0");
					put(grammarAccess.getDCLReferenceInputAccess().getNameAssignment_1_1_1(), "rule__DCLReferenceInput__NameAssignment_1_1_1");
					put(grammarAccess.getDCLMeasuredOutputAccess().getNameAssignment_1_0(), "rule__DCLMeasuredOutput__NameAssignment_1_0");
					put(grammarAccess.getDCLMeasuredOutputAccess().getNameAssignment_1_1_1(), "rule__DCLMeasuredOutput__NameAssignment_1_1_1");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalSasDslParser typedParser = (InternalSasDslParser) parser;
			typedParser.entryRuleArchitectureDefinition();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public SasDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(SasDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
