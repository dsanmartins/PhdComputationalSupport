/*
 * generated by Xtext 2.10.0
 */
package br.ufscar.sas.xtext.sasdsl.serializer;

import br.ufscar.sas.xtext.sasdsl.sasDsl.Abstractions;
import br.ufscar.sas.xtext.sasdsl.sasDsl.ArchitectureDefinition;
import br.ufscar.sas.xtext.sasdsl.sasDsl.SasDslPackage;
import br.ufscar.sas.xtext.sasdsl.sasDsl.Sections;
import br.ufscar.sas.xtext.sasdsl.services.SasDslGrammarAccess;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class SasDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SasDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SasDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SasDslPackage.ABSTRACTIONS:
				sequence_Abstractions(context, (Abstractions) semanticObject); 
				return; 
			case SasDslPackage.ARCHITECTURE_DEFINITION:
				sequence_ArchitectureDefinition(context, (ArchitectureDefinition) semanticObject); 
				return; 
			case SasDslPackage.SECTIONS:
				sequence_Sections(context, (Sections) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Abstractions returns Abstractions
	 *
	 * Constraint:
	 *     (name+=ID name+=ID*)+
	 */
	protected void sequence_Abstractions(ISerializationContext context, Abstractions semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ArchitectureDefinition returns ArchitectureDefinition
	 *
	 * Constraint:
	 *     section+=Sections+
	 */
	protected void sequence_ArchitectureDefinition(ISerializationContext context, ArchitectureDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Sections returns Sections
	 *
	 * Constraint:
	 *     (abstractions=Abstractions compositions=Compositions restrictions=Restrictions)
	 */
	protected void sequence_Sections(ISerializationContext context, Sections semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SasDslPackage.Literals.SECTIONS__ABSTRACTIONS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SasDslPackage.Literals.SECTIONS__ABSTRACTIONS));
			if (transientValues.isValueTransient(semanticObject, SasDslPackage.Literals.SECTIONS__COMPOSITIONS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SasDslPackage.Literals.SECTIONS__COMPOSITIONS));
			if (transientValues.isValueTransient(semanticObject, SasDslPackage.Literals.SECTIONS__RESTRICTIONS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SasDslPackage.Literals.SECTIONS__RESTRICTIONS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSectionsAccess().getAbstractionsAbstractionsParserRuleCall_0_0(), semanticObject.getAbstractions());
		feeder.accept(grammarAccess.getSectionsAccess().getCompositionsCompositionsParserRuleCall_1_0(), semanticObject.getCompositions());
		feeder.accept(grammarAccess.getSectionsAccess().getRestrictionsRestrictionsParserRuleCall_2_0(), semanticObject.getRestrictions());
		feeder.finish();
	}
	
	
}
