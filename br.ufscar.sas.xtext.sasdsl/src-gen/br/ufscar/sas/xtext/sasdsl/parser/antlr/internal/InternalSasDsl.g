/*
 * generated by Xtext 2.10.0
 */
grammar InternalSasDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package br.ufscar.sas.xtext.sasdsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package br.ufscar.sas.xtext.sasdsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import br.ufscar.sas.xtext.sasdsl.services.SasDslGrammarAccess;

}

@parser::members {

 	private SasDslGrammarAccess grammarAccess;

    public InternalSasDslParser(TokenStream input, SasDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "ArchitectureDefinition";
   	}

   	@Override
   	protected SasDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleArchitectureDefinition
entryRuleArchitectureDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArchitectureDefinitionRule()); }
	iv_ruleArchitectureDefinition=ruleArchitectureDefinition
	{ $current=$iv_ruleArchitectureDefinition.current; }
	EOF;

// Rule ArchitectureDefinition
ruleArchitectureDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Abstractions'
		{
			newLeafNode(otherlv_0, grammarAccess.getArchitectureDefinitionAccess().getAbstractionsKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getArchitectureDefinitionAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getArchitectureDefinitionAccess().getAbstractionsDSLAbstractionParserRuleCall_2_0());
				}
				lv_abstractions_2_0=ruleDSLAbstraction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArchitectureDefinitionRule());
					}
					add(
						$current,
						"abstractions",
						lv_abstractions_2_0,
						"br.ufscar.sas.xtext.sasdsl.SasDsl.DSLAbstraction");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getArchitectureDefinitionAccess().getRightCurlyBracketKeyword_3());
		}
		otherlv_4='Compositions'
		{
			newLeafNode(otherlv_4, grammarAccess.getArchitectureDefinitionAccess().getCompositionsKeyword_4());
		}
		otherlv_5='{'
		{
			newLeafNode(otherlv_5, grammarAccess.getArchitectureDefinitionAccess().getLeftCurlyBracketKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getArchitectureDefinitionAccess().getCompositionsDSLCompositionParserRuleCall_6_0());
				}
				lv_compositions_6_0=ruleDSLComposition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArchitectureDefinitionRule());
					}
					add(
						$current,
						"compositions",
						lv_compositions_6_0,
						"br.ufscar.sas.xtext.sasdsl.SasDsl.DSLComposition");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getArchitectureDefinitionAccess().getRightCurlyBracketKeyword_7());
		}
		otherlv_8='Restrictions'
		{
			newLeafNode(otherlv_8, grammarAccess.getArchitectureDefinitionAccess().getRestrictionsKeyword_8());
		}
		otherlv_9='{'
		{
			newLeafNode(otherlv_9, grammarAccess.getArchitectureDefinitionAccess().getLeftCurlyBracketKeyword_9());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getArchitectureDefinitionAccess().getRestrictionsDSLRestrictionParserRuleCall_10_0());
				}
				lv_restrictions_10_0=ruleDSLRestriction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArchitectureDefinitionRule());
					}
					add(
						$current,
						"restrictions",
						lv_restrictions_10_0,
						"br.ufscar.sas.xtext.sasdsl.SasDsl.DSLRestriction");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_11='}'
		{
			newLeafNode(otherlv_11, grammarAccess.getArchitectureDefinitionAccess().getRightCurlyBracketKeyword_11());
		}
	)
;

// Entry rule entryRuleDSLAbstraction
entryRuleDSLAbstraction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDSLAbstractionRule()); }
	iv_ruleDSLAbstraction=ruleDSLAbstraction
	{ $current=$iv_ruleDSLAbstraction.current; }
	EOF;

// Rule DSLAbstraction
ruleDSLAbstraction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getDSLAbstractionAccess().getDSLManagingParserRuleCall_0());
		}
		this_DSLManaging_0=ruleDSLManaging
		{
			$current = $this_DSLManaging_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDSLAbstractionAccess().getDSLManagedParserRuleCall_1());
		}
		this_DSLManaged_1=ruleDSLManaged
		{
			$current = $this_DSLManaged_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDSLAbstractionAccess().getDSLControlLoopManagerParserRuleCall_2());
		}
		this_DSLControlLoopManager_2=ruleDSLControlLoopManager
		{
			$current = $this_DSLControlLoopManager_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDSLAbstractionAccess().getDSLControlLoopParserRuleCall_3());
		}
		this_DSLControlLoop_3=ruleDSLControlLoop
		{
			$current = $this_DSLControlLoop_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDSLAbstractionAccess().getDSLMonitorParserRuleCall_4());
		}
		this_DSLMonitor_4=ruleDSLMonitor
		{
			$current = $this_DSLMonitor_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDSLAbstractionAccess().getDSLAnalyzerParserRuleCall_5());
		}
		this_DSLAnalyzer_5=ruleDSLAnalyzer
		{
			$current = $this_DSLAnalyzer_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDSLAbstractionAccess().getDSLPlannerParserRuleCall_6());
		}
		this_DSLPlanner_6=ruleDSLPlanner
		{
			$current = $this_DSLPlanner_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDSLAbstractionAccess().getDSLExecutorParserRuleCall_7());
		}
		this_DSLExecutor_7=ruleDSLExecutor
		{
			$current = $this_DSLExecutor_7.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDSLAbstractionAccess().getDSLKnowledgeParserRuleCall_8());
		}
		this_DSLKnowledge_8=ruleDSLKnowledge
		{
			$current = $this_DSLKnowledge_8.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDSLAbstractionAccess().getDSLSensorParserRuleCall_9());
		}
		this_DSLSensor_9=ruleDSLSensor
		{
			$current = $this_DSLSensor_9.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDSLAbstractionAccess().getDSLEffectorParserRuleCall_10());
		}
		this_DSLEffector_10=ruleDSLEffector
		{
			$current = $this_DSLEffector_10.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDSLAbstractionAccess().getDSLReferenceInputParserRuleCall_11());
		}
		this_DSLReferenceInput_11=ruleDSLReferenceInput
		{
			$current = $this_DSLReferenceInput_11.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDSLAbstractionAccess().getDSLMeasuredOutputParserRuleCall_12());
		}
		this_DSLMeasuredOutput_12=ruleDSLMeasuredOutput
		{
			$current = $this_DSLMeasuredOutput_12.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleDSLComposition
entryRuleDSLComposition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDSLCompositionRule()); }
	iv_ruleDSLComposition=ruleDSLComposition
	{ $current=$iv_ruleDSLComposition.current; }
	EOF;

// Rule DSLComposition
ruleDSLComposition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getDSLCompositionAccess().getDSLSensorBelongsToParserRuleCall_0());
		}
		this_DSLSensorBelongsTo_0=ruleDSLSensorBelongsTo
		{
			$current = $this_DSLSensorBelongsTo_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDSLCompositionAccess().getDSLReferenceInputBelongsToParserRuleCall_1());
		}
		this_DSLReferenceInputBelongsTo_1=ruleDSLReferenceInputBelongsTo
		{
			$current = $this_DSLReferenceInputBelongsTo_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDSLCompositionAccess().getDSLEffectorBelongsToParserRuleCall_2());
		}
		this_DSLEffectorBelongsTo_2=ruleDSLEffectorBelongsTo
		{
			$current = $this_DSLEffectorBelongsTo_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDSLCompositionAccess().getDSLMonitorBelongsTo1ParserRuleCall_3());
		}
		this_DSLMonitorBelongsTo1_3=ruleDSLMonitorBelongsTo1
		{
			$current = $this_DSLMonitorBelongsTo1_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDSLCompositionAccess().getDSLMonitorBelongsTo2ParserRuleCall_4());
		}
		this_DSLMonitorBelongsTo2_4=ruleDSLMonitorBelongsTo2
		{
			$current = $this_DSLMonitorBelongsTo2_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDSLCompositionAccess().getDSLAnalyzerBelongsTo1ParserRuleCall_5());
		}
		this_DSLAnalyzerBelongsTo1_5=ruleDSLAnalyzerBelongsTo1
		{
			$current = $this_DSLAnalyzerBelongsTo1_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDSLCompositionAccess().getDSLAnalyzerBelongsTo2ParserRuleCall_6());
		}
		this_DSLAnalyzerBelongsTo2_6=ruleDSLAnalyzerBelongsTo2
		{
			$current = $this_DSLAnalyzerBelongsTo2_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDSLCompositionAccess().getDSLPlannerBelongsTo1ParserRuleCall_7());
		}
		this_DSLPlannerBelongsTo1_7=ruleDSLPlannerBelongsTo1
		{
			$current = $this_DSLPlannerBelongsTo1_7.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDSLCompositionAccess().getDSLPlannerBelongsTo2ParserRuleCall_8());
		}
		this_DSLPlannerBelongsTo2_8=ruleDSLPlannerBelongsTo2
		{
			$current = $this_DSLPlannerBelongsTo2_8.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDSLCompositionAccess().getDSLExecutorBelongsTo1ParserRuleCall_9());
		}
		this_DSLExecutorBelongsTo1_9=ruleDSLExecutorBelongsTo1
		{
			$current = $this_DSLExecutorBelongsTo1_9.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDSLCompositionAccess().getDSLExecutorBelongsTo2ParserRuleCall_10());
		}
		this_DSLExecutorBelongsTo2_10=ruleDSLExecutorBelongsTo2
		{
			$current = $this_DSLExecutorBelongsTo2_10.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDSLCompositionAccess().getDSLClBelongsTo1ParserRuleCall_11());
		}
		this_DSLClBelongsTo1_11=ruleDSLClBelongsTo1
		{
			$current = $this_DSLClBelongsTo1_11.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDSLCompositionAccess().getDSLClBelongsTo2ParserRuleCall_12());
		}
		this_DSLClBelongsTo2_12=ruleDSLClBelongsTo2
		{
			$current = $this_DSLClBelongsTo2_12.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDSLCompositionAccess().getDSLClmBelongsToParserRuleCall_13());
		}
		this_DSLClmBelongsTo_13=ruleDSLClmBelongsTo
		{
			$current = $this_DSLClmBelongsTo_13.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDSLCompositionAccess().getDSLMeasuredOuputBelongsToParserRuleCall_14());
		}
		this_DSLMeasuredOuputBelongsTo_14=ruleDSLMeasuredOuputBelongsTo
		{
			$current = $this_DSLMeasuredOuputBelongsTo_14.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDSLCompositionAccess().getDSLKnowledgeBelongsToParserRuleCall_15());
		}
		this_DSLKnowledgeBelongsTo_15=ruleDSLKnowledgeBelongsTo
		{
			$current = $this_DSLKnowledgeBelongsTo_15.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleDSLRestriction
entryRuleDSLRestriction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDSLRestrictionRule()); }
	iv_ruleDSLRestriction=ruleDSLRestriction
	{ $current=$iv_ruleDSLRestriction.current; }
	EOF;

// Rule DSLRestriction
ruleDSLRestriction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getDSLRestrictionAccess().getDSLRestrictionMonitorParserRuleCall_0());
		}
		this_DSLRestrictionMonitor_0=ruleDSLRestrictionMonitor
		{
			$current = $this_DSLRestrictionMonitor_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDSLRestrictionAccess().getDSLRestrictionPlannerParserRuleCall_1());
		}
		this_DSLRestrictionPlanner_1=ruleDSLRestrictionPlanner
		{
			$current = $this_DSLRestrictionPlanner_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDSLRestrictionAccess().getDSLRestrictionExecutorParserRuleCall_2());
		}
		this_DSLRestrictionExecutor_2=ruleDSLRestrictionExecutor
		{
			$current = $this_DSLRestrictionExecutor_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDSLRestrictionAccess().getDSLRestrictionKnowledgeParserRuleCall_3());
		}
		this_DSLRestrictionKnowledge_3=ruleDSLRestrictionKnowledge
		{
			$current = $this_DSLRestrictionKnowledge_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDSLRestrictionAccess().getDSLRestrictionManagedParserRuleCall_4());
		}
		this_DSLRestrictionManaged_4=ruleDSLRestrictionManaged
		{
			$current = $this_DSLRestrictionManaged_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDSLRestrictionAccess().getDSLRestrictionSensorParserRuleCall_5());
		}
		this_DSLRestrictionSensor_5=ruleDSLRestrictionSensor
		{
			$current = $this_DSLRestrictionSensor_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDSLRestrictionAccess().getDSLRestrictionEffectorParserRuleCall_6());
		}
		this_DSLRestrictionEffector_6=ruleDSLRestrictionEffector
		{
			$current = $this_DSLRestrictionEffector_6.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleDSLRestrictionEffector
entryRuleDSLRestrictionEffector returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDSLRestrictionEffectorRule()); }
	iv_ruleDSLRestrictionEffector=ruleDSLRestrictionEffector
	{ $current=$iv_ruleDSLRestrictionEffector.current; }
	EOF;

// Rule DSLRestrictionEffector
ruleDSLRestrictionEffector returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='executor'
			{
				newLeafNode(otherlv_0, grammarAccess.getDSLRestrictionEffectorAccess().getExecutorKeyword_0_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDSLRestrictionEffectorRule());
						}
					}
					otherlv_1=RULE_ID
					{
						newLeafNode(otherlv_1, grammarAccess.getDSLRestrictionEffectorAccess().getTDSLExecutorCrossReference_0_1_0());
					}
				)
			)
			otherlv_2='must-not-access-effector'
			{
				newLeafNode(otherlv_2, grammarAccess.getDSLRestrictionEffectorAccess().getMustNotAccessEffectorKeyword_0_2());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDSLRestrictionEffectorRule());
						}
					}
					otherlv_3=RULE_ID
					{
						newLeafNode(otherlv_3, grammarAccess.getDSLRestrictionEffectorAccess().getEffectorDSLEffectorCrossReference_0_3_0());
					}
				)
			)
			otherlv_4=';'
			{
				newLeafNode(otherlv_4, grammarAccess.getDSLRestrictionEffectorAccess().getSemicolonKeyword_0_4());
			}
		)
		    |
		(
			otherlv_5='executor'
			{
				newLeafNode(otherlv_5, grammarAccess.getDSLRestrictionEffectorAccess().getExecutorKeyword_1_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDSLRestrictionEffectorRule());
						}
					}
					otherlv_6=RULE_ID
					{
						newLeafNode(otherlv_6, grammarAccess.getDSLRestrictionEffectorAccess().getTDSLExecutorCrossReference_1_1_0());
					}
				)
			)
			otherlv_7='must-access-effector'
			{
				newLeafNode(otherlv_7, grammarAccess.getDSLRestrictionEffectorAccess().getMustAccessEffectorKeyword_1_2());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDSLRestrictionEffectorRule());
						}
					}
					otherlv_8=RULE_ID
					{
						newLeafNode(otherlv_8, grammarAccess.getDSLRestrictionEffectorAccess().getEffectorDSLEffectorCrossReference_1_3_0());
					}
				)
			)
			otherlv_9='through-interface'
			{
				newLeafNode(otherlv_9, grammarAccess.getDSLRestrictionEffectorAccess().getThroughInterfaceKeyword_1_4());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDSLRestrictionEffectorRule());
						}
					}
					otherlv_10=RULE_ID
					{
						newLeafNode(otherlv_10, grammarAccess.getDSLRestrictionEffectorAccess().getEffectorinterfaceEffectorInterfaceCrossReference_1_5_0());
					}
				)
			)
			otherlv_11=';'
			{
				newLeafNode(otherlv_11, grammarAccess.getDSLRestrictionEffectorAccess().getSemicolonKeyword_1_6());
			}
		)
	)
;

// Entry rule entryRuleDSLRestrictionSensor
entryRuleDSLRestrictionSensor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDSLRestrictionSensorRule()); }
	iv_ruleDSLRestrictionSensor=ruleDSLRestrictionSensor
	{ $current=$iv_ruleDSLRestrictionSensor.current; }
	EOF;

// Rule DSLRestrictionSensor
ruleDSLRestrictionSensor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='monitor'
			{
				newLeafNode(otherlv_0, grammarAccess.getDSLRestrictionSensorAccess().getMonitorKeyword_0_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDSLRestrictionSensorRule());
						}
					}
					otherlv_1=RULE_ID
					{
						newLeafNode(otherlv_1, grammarAccess.getDSLRestrictionSensorAccess().getTDSLMonitorCrossReference_0_1_0());
					}
				)
			)
			otherlv_2='must-not-access-sensor'
			{
				newLeafNode(otherlv_2, grammarAccess.getDSLRestrictionSensorAccess().getMustNotAccessSensorKeyword_0_2());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDSLRestrictionSensorRule());
						}
					}
					otherlv_3=RULE_ID
					{
						newLeafNode(otherlv_3, grammarAccess.getDSLRestrictionSensorAccess().getSensorDSLSensorCrossReference_0_3_0());
					}
				)
			)
			otherlv_4=';'
			{
				newLeafNode(otherlv_4, grammarAccess.getDSLRestrictionSensorAccess().getSemicolonKeyword_0_4());
			}
		)
		    |
		(
			otherlv_5='monitor'
			{
				newLeafNode(otherlv_5, grammarAccess.getDSLRestrictionSensorAccess().getMonitorKeyword_1_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDSLRestrictionSensorRule());
						}
					}
					otherlv_6=RULE_ID
					{
						newLeafNode(otherlv_6, grammarAccess.getDSLRestrictionSensorAccess().getTDSLMonitorCrossReference_1_1_0());
					}
				)
			)
			otherlv_7='must-access-sensor'
			{
				newLeafNode(otherlv_7, grammarAccess.getDSLRestrictionSensorAccess().getMustAccessSensorKeyword_1_2());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDSLRestrictionSensorRule());
						}
					}
					otherlv_8=RULE_ID
					{
						newLeafNode(otherlv_8, grammarAccess.getDSLRestrictionSensorAccess().getSensorDSLSensorCrossReference_1_3_0());
					}
				)
			)
			otherlv_9='through-interface'
			{
				newLeafNode(otherlv_9, grammarAccess.getDSLRestrictionSensorAccess().getThroughInterfaceKeyword_1_4());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDSLRestrictionSensorRule());
						}
					}
					otherlv_10=RULE_ID
					{
						newLeafNode(otherlv_10, grammarAccess.getDSLRestrictionSensorAccess().getSensorinterfaceSensorInterfaceCrossReference_1_5_0());
					}
				)
			)
			otherlv_11=';'
			{
				newLeafNode(otherlv_11, grammarAccess.getDSLRestrictionSensorAccess().getSemicolonKeyword_1_6());
			}
		)
	)
;

// Entry rule entryRuleDSLRestrictionMonitor
entryRuleDSLRestrictionMonitor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDSLRestrictionMonitorRule()); }
	iv_ruleDSLRestrictionMonitor=ruleDSLRestrictionMonitor
	{ $current=$iv_ruleDSLRestrictionMonitor.current; }
	EOF;

// Rule DSLRestrictionMonitor
ruleDSLRestrictionMonitor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='analyzer'
			{
				newLeafNode(otherlv_0, grammarAccess.getDSLRestrictionMonitorAccess().getAnalyzerKeyword_0_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDSLRestrictionMonitorRule());
						}
					}
					otherlv_1=RULE_ID
					{
						newLeafNode(otherlv_1, grammarAccess.getDSLRestrictionMonitorAccess().getTDSLAnalyzerCrossReference_0_1_0());
					}
				)
			)
			otherlv_2='must-not-access-monitor'
			{
				newLeafNode(otherlv_2, grammarAccess.getDSLRestrictionMonitorAccess().getMustNotAccessMonitorKeyword_0_2());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDSLRestrictionMonitorRule());
						}
					}
					otherlv_3=RULE_ID
					{
						newLeafNode(otherlv_3, grammarAccess.getDSLRestrictionMonitorAccess().getMonitorDSLMonitorCrossReference_0_3_0());
					}
				)
			)
			otherlv_4=';'
			{
				newLeafNode(otherlv_4, grammarAccess.getDSLRestrictionMonitorAccess().getSemicolonKeyword_0_4());
			}
		)
		    |
		(
			otherlv_5='analyzer'
			{
				newLeafNode(otherlv_5, grammarAccess.getDSLRestrictionMonitorAccess().getAnalyzerKeyword_1_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDSLRestrictionMonitorRule());
						}
					}
					otherlv_6=RULE_ID
					{
						newLeafNode(otherlv_6, grammarAccess.getDSLRestrictionMonitorAccess().getTDSLAnalyzerCrossReference_1_1_0());
					}
				)
			)
			otherlv_7='must-access-monitor'
			{
				newLeafNode(otherlv_7, grammarAccess.getDSLRestrictionMonitorAccess().getMustAccessMonitorKeyword_1_2());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDSLRestrictionMonitorRule());
						}
					}
					otherlv_8=RULE_ID
					{
						newLeafNode(otherlv_8, grammarAccess.getDSLRestrictionMonitorAccess().getMonitorDSLMonitorCrossReference_1_3_0());
					}
				)
			)
			otherlv_9='through-interface'
			{
				newLeafNode(otherlv_9, grammarAccess.getDSLRestrictionMonitorAccess().getThroughInterfaceKeyword_1_4());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDSLRestrictionMonitorRule());
						}
					}
					otherlv_10=RULE_ID
					{
						newLeafNode(otherlv_10, grammarAccess.getDSLRestrictionMonitorAccess().getMonitorinterfaceMonitorInterfaceCrossReference_1_5_0());
					}
				)
			)
			otherlv_11=';'
			{
				newLeafNode(otherlv_11, grammarAccess.getDSLRestrictionMonitorAccess().getSemicolonKeyword_1_6());
			}
		)
	)
;

// Entry rule entryRuleDSLRestrictionPlanner
entryRuleDSLRestrictionPlanner returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDSLRestrictionPlannerRule()); }
	iv_ruleDSLRestrictionPlanner=ruleDSLRestrictionPlanner
	{ $current=$iv_ruleDSLRestrictionPlanner.current; }
	EOF;

// Rule DSLRestrictionPlanner
ruleDSLRestrictionPlanner returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='analyzer'
			{
				newLeafNode(otherlv_0, grammarAccess.getDSLRestrictionPlannerAccess().getAnalyzerKeyword_0_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDSLRestrictionPlannerRule());
						}
					}
					otherlv_1=RULE_ID
					{
						newLeafNode(otherlv_1, grammarAccess.getDSLRestrictionPlannerAccess().getTDSLAnalyzerCrossReference_0_1_0());
					}
				)
			)
			otherlv_2='must-not-access-planner'
			{
				newLeafNode(otherlv_2, grammarAccess.getDSLRestrictionPlannerAccess().getMustNotAccessPlannerKeyword_0_2());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDSLRestrictionPlannerRule());
						}
					}
					otherlv_3=RULE_ID
					{
						newLeafNode(otherlv_3, grammarAccess.getDSLRestrictionPlannerAccess().getPlannerDSLPlannerCrossReference_0_3_0());
					}
				)
			)
			otherlv_4=';'
			{
				newLeafNode(otherlv_4, grammarAccess.getDSLRestrictionPlannerAccess().getSemicolonKeyword_0_4());
			}
		)
		    |
		(
			otherlv_5='analyzer'
			{
				newLeafNode(otherlv_5, grammarAccess.getDSLRestrictionPlannerAccess().getAnalyzerKeyword_1_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDSLRestrictionPlannerRule());
						}
					}
					otherlv_6=RULE_ID
					{
						newLeafNode(otherlv_6, grammarAccess.getDSLRestrictionPlannerAccess().getTDSLAnalyzerCrossReference_1_1_0());
					}
				)
			)
			otherlv_7='must-access-planner'
			{
				newLeafNode(otherlv_7, grammarAccess.getDSLRestrictionPlannerAccess().getMustAccessPlannerKeyword_1_2());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDSLRestrictionPlannerRule());
						}
					}
					otherlv_8=RULE_ID
					{
						newLeafNode(otherlv_8, grammarAccess.getDSLRestrictionPlannerAccess().getPlannerDSLPlannerCrossReference_1_3_0());
					}
				)
			)
			otherlv_9='through-interface'
			{
				newLeafNode(otherlv_9, grammarAccess.getDSLRestrictionPlannerAccess().getThroughInterfaceKeyword_1_4());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDSLRestrictionPlannerRule());
						}
					}
					otherlv_10=RULE_ID
					{
						newLeafNode(otherlv_10, grammarAccess.getDSLRestrictionPlannerAccess().getPlannerinterfacePlannerInterfaceCrossReference_1_5_0());
					}
				)
			)
			otherlv_11=';'
			{
				newLeafNode(otherlv_11, grammarAccess.getDSLRestrictionPlannerAccess().getSemicolonKeyword_1_6());
			}
		)
	)
;

// Entry rule entryRuleDSLRestrictionExecutor
entryRuleDSLRestrictionExecutor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDSLRestrictionExecutorRule()); }
	iv_ruleDSLRestrictionExecutor=ruleDSLRestrictionExecutor
	{ $current=$iv_ruleDSLRestrictionExecutor.current; }
	EOF;

// Rule DSLRestrictionExecutor
ruleDSLRestrictionExecutor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='analyzer'
			{
				newLeafNode(otherlv_0, grammarAccess.getDSLRestrictionExecutorAccess().getAnalyzerKeyword_0_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDSLRestrictionExecutorRule());
						}
					}
					otherlv_1=RULE_ID
					{
						newLeafNode(otherlv_1, grammarAccess.getDSLRestrictionExecutorAccess().getTDSLAnalyzerCrossReference_0_1_0());
					}
				)
			)
			otherlv_2='must-not-access-executor'
			{
				newLeafNode(otherlv_2, grammarAccess.getDSLRestrictionExecutorAccess().getMustNotAccessExecutorKeyword_0_2());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDSLRestrictionExecutorRule());
						}
					}
					otherlv_3=RULE_ID
					{
						newLeafNode(otherlv_3, grammarAccess.getDSLRestrictionExecutorAccess().getExecutorDSLExecutorCrossReference_0_3_0());
					}
				)
			)
			otherlv_4=';'
			{
				newLeafNode(otherlv_4, grammarAccess.getDSLRestrictionExecutorAccess().getSemicolonKeyword_0_4());
			}
		)
		    |
		(
			otherlv_5='analyzer'
			{
				newLeafNode(otherlv_5, grammarAccess.getDSLRestrictionExecutorAccess().getAnalyzerKeyword_1_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDSLRestrictionExecutorRule());
						}
					}
					otherlv_6=RULE_ID
					{
						newLeafNode(otherlv_6, grammarAccess.getDSLRestrictionExecutorAccess().getTDSLAnalyzerCrossReference_1_1_0());
					}
				)
			)
			otherlv_7='must-access-executor'
			{
				newLeafNode(otherlv_7, grammarAccess.getDSLRestrictionExecutorAccess().getMustAccessExecutorKeyword_1_2());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDSLRestrictionExecutorRule());
						}
					}
					otherlv_8=RULE_ID
					{
						newLeafNode(otherlv_8, grammarAccess.getDSLRestrictionExecutorAccess().getExecutorDSLExecutorCrossReference_1_3_0());
					}
				)
			)
			otherlv_9='through-interface'
			{
				newLeafNode(otherlv_9, grammarAccess.getDSLRestrictionExecutorAccess().getThroughInterfaceKeyword_1_4());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDSLRestrictionExecutorRule());
						}
					}
					otherlv_10=RULE_ID
					{
						newLeafNode(otherlv_10, grammarAccess.getDSLRestrictionExecutorAccess().getExecutorinterfaceExecutorInterfaceCrossReference_1_5_0());
					}
				)
			)
			otherlv_11=';'
			{
				newLeafNode(otherlv_11, grammarAccess.getDSLRestrictionExecutorAccess().getSemicolonKeyword_1_6());
			}
		)
	)
;

// Entry rule entryRuleDSLRestrictionKnowledge
entryRuleDSLRestrictionKnowledge returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDSLRestrictionKnowledgeRule()); }
	iv_ruleDSLRestrictionKnowledge=ruleDSLRestrictionKnowledge
	{ $current=$iv_ruleDSLRestrictionKnowledge.current; }
	EOF;

// Rule DSLRestrictionKnowledge
ruleDSLRestrictionKnowledge returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='analyzer'
			{
				newLeafNode(otherlv_0, grammarAccess.getDSLRestrictionKnowledgeAccess().getAnalyzerKeyword_0_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDSLRestrictionKnowledgeRule());
						}
					}
					otherlv_1=RULE_ID
					{
						newLeafNode(otherlv_1, grammarAccess.getDSLRestrictionKnowledgeAccess().getTDSLAnalyzerCrossReference_0_1_0());
					}
				)
			)
			otherlv_2='must-not-access-knowledge'
			{
				newLeafNode(otherlv_2, grammarAccess.getDSLRestrictionKnowledgeAccess().getMustNotAccessKnowledgeKeyword_0_2());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDSLRestrictionKnowledgeRule());
						}
					}
					otherlv_3=RULE_ID
					{
						newLeafNode(otherlv_3, grammarAccess.getDSLRestrictionKnowledgeAccess().getKnowledgeDSLKnowledgeCrossReference_0_3_0());
					}
				)
			)
			otherlv_4=';'
			{
				newLeafNode(otherlv_4, grammarAccess.getDSLRestrictionKnowledgeAccess().getSemicolonKeyword_0_4());
			}
		)
		    |
		(
			otherlv_5='analyzer'
			{
				newLeafNode(otherlv_5, grammarAccess.getDSLRestrictionKnowledgeAccess().getAnalyzerKeyword_1_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDSLRestrictionKnowledgeRule());
						}
					}
					otherlv_6=RULE_ID
					{
						newLeafNode(otherlv_6, grammarAccess.getDSLRestrictionKnowledgeAccess().getTDSLAnalyzerCrossReference_1_1_0());
					}
				)
			)
			otherlv_7='must-access-knowledge'
			{
				newLeafNode(otherlv_7, grammarAccess.getDSLRestrictionKnowledgeAccess().getMustAccessKnowledgeKeyword_1_2());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDSLRestrictionKnowledgeRule());
						}
					}
					otherlv_8=RULE_ID
					{
						newLeafNode(otherlv_8, grammarAccess.getDSLRestrictionKnowledgeAccess().getKnowledgeDSLKnowledgeCrossReference_1_3_0());
					}
				)
			)
			otherlv_9='through-interface'
			{
				newLeafNode(otherlv_9, grammarAccess.getDSLRestrictionKnowledgeAccess().getThroughInterfaceKeyword_1_4());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDSLRestrictionKnowledgeRule());
						}
					}
					otherlv_10=RULE_ID
					{
						newLeafNode(otherlv_10, grammarAccess.getDSLRestrictionKnowledgeAccess().getKnowledgeinterfaceKnowledgeInterfaceCrossReference_1_5_0());
					}
				)
			)
			otherlv_11=';'
			{
				newLeafNode(otherlv_11, grammarAccess.getDSLRestrictionKnowledgeAccess().getSemicolonKeyword_1_6());
			}
		)
		    |
		(
			otherlv_12='planner'
			{
				newLeafNode(otherlv_12, grammarAccess.getDSLRestrictionKnowledgeAccess().getPlannerKeyword_2_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDSLRestrictionKnowledgeRule());
						}
					}
					otherlv_13=RULE_ID
					{
						newLeafNode(otherlv_13, grammarAccess.getDSLRestrictionKnowledgeAccess().getTDSLPlannerCrossReference_2_1_0());
					}
				)
			)
			otherlv_14='must-not-access-knowledge'
			{
				newLeafNode(otherlv_14, grammarAccess.getDSLRestrictionKnowledgeAccess().getMustNotAccessKnowledgeKeyword_2_2());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDSLRestrictionKnowledgeRule());
						}
					}
					otherlv_15=RULE_ID
					{
						newLeafNode(otherlv_15, grammarAccess.getDSLRestrictionKnowledgeAccess().getKnowledgeDSLKnowledgeCrossReference_2_3_0());
					}
				)
			)
			otherlv_16=';'
			{
				newLeafNode(otherlv_16, grammarAccess.getDSLRestrictionKnowledgeAccess().getSemicolonKeyword_2_4());
			}
		)
		    |
		(
			otherlv_17='planner'
			{
				newLeafNode(otherlv_17, grammarAccess.getDSLRestrictionKnowledgeAccess().getPlannerKeyword_3_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDSLRestrictionKnowledgeRule());
						}
					}
					otherlv_18=RULE_ID
					{
						newLeafNode(otherlv_18, grammarAccess.getDSLRestrictionKnowledgeAccess().getTDSLPlannerCrossReference_3_1_0());
					}
				)
			)
			otherlv_19='must-access-knowledge'
			{
				newLeafNode(otherlv_19, grammarAccess.getDSLRestrictionKnowledgeAccess().getMustAccessKnowledgeKeyword_3_2());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDSLRestrictionKnowledgeRule());
						}
					}
					otherlv_20=RULE_ID
					{
						newLeafNode(otherlv_20, grammarAccess.getDSLRestrictionKnowledgeAccess().getKnowledgeDSLKnowledgeCrossReference_3_3_0());
					}
				)
			)
			otherlv_21='through-interface'
			{
				newLeafNode(otherlv_21, grammarAccess.getDSLRestrictionKnowledgeAccess().getThroughInterfaceKeyword_3_4());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDSLRestrictionKnowledgeRule());
						}
					}
					otherlv_22=RULE_ID
					{
						newLeafNode(otherlv_22, grammarAccess.getDSLRestrictionKnowledgeAccess().getKnowledgeinterfaceKnowledgeInterfaceCrossReference_3_5_0());
					}
				)
			)
			otherlv_23=';'
			{
				newLeafNode(otherlv_23, grammarAccess.getDSLRestrictionKnowledgeAccess().getSemicolonKeyword_3_6());
			}
		)
	)
;

// Entry rule entryRuleDSLRestrictionManaged
entryRuleDSLRestrictionManaged returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDSLRestrictionManagedRule()); }
	iv_ruleDSLRestrictionManaged=ruleDSLRestrictionManaged
	{ $current=$iv_ruleDSLRestrictionManaged.current; }
	EOF;

// Rule DSLRestrictionManaged
ruleDSLRestrictionManaged returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='managing'
			{
				newLeafNode(otherlv_0, grammarAccess.getDSLRestrictionManagedAccess().getManagingKeyword_0_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDSLRestrictionManagedRule());
						}
					}
					otherlv_1=RULE_ID
					{
						newLeafNode(otherlv_1, grammarAccess.getDSLRestrictionManagedAccess().getTDSLManagingCrossReference_0_1_0());
					}
				)
			)
			otherlv_2='must-not-access-managed'
			{
				newLeafNode(otherlv_2, grammarAccess.getDSLRestrictionManagedAccess().getMustNotAccessManagedKeyword_0_2());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDSLRestrictionManagedRule());
						}
					}
					otherlv_3=RULE_ID
					{
						newLeafNode(otherlv_3, grammarAccess.getDSLRestrictionManagedAccess().getManagedDSLManagedCrossReference_0_3_0());
					}
				)
			)
			otherlv_4=';'
			{
				newLeafNode(otherlv_4, grammarAccess.getDSLRestrictionManagedAccess().getSemicolonKeyword_0_4());
			}
		)
		    |
		(
			otherlv_5='managing'
			{
				newLeafNode(otherlv_5, grammarAccess.getDSLRestrictionManagedAccess().getManagingKeyword_1_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDSLRestrictionManagedRule());
						}
					}
					otherlv_6=RULE_ID
					{
						newLeafNode(otherlv_6, grammarAccess.getDSLRestrictionManagedAccess().getTDSLManagingCrossReference_1_1_0());
					}
				)
			)
			otherlv_7='must-access-managed'
			{
				newLeafNode(otherlv_7, grammarAccess.getDSLRestrictionManagedAccess().getMustAccessManagedKeyword_1_2());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDSLRestrictionManagedRule());
						}
					}
					otherlv_8=RULE_ID
					{
						newLeafNode(otherlv_8, grammarAccess.getDSLRestrictionManagedAccess().getManagedDSLManagedCrossReference_1_3_0());
					}
				)
			)
			otherlv_9='through-interface'
			{
				newLeafNode(otherlv_9, grammarAccess.getDSLRestrictionManagedAccess().getThroughInterfaceKeyword_1_4());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDSLRestrictionManagedRule());
						}
					}
					otherlv_10=RULE_ID
					{
						newLeafNode(otherlv_10, grammarAccess.getDSLRestrictionManagedAccess().getManagedinterfaceManagedInterfaceCrossReference_1_5_0());
					}
				)
			)
			otherlv_11=';'
			{
				newLeafNode(otherlv_11, grammarAccess.getDSLRestrictionManagedAccess().getSemicolonKeyword_1_6());
			}
		)
	)
;

// Entry rule entryRuleDSLSensorBelongsTo
entryRuleDSLSensorBelongsTo returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDSLSensorBelongsToRule()); }
	iv_ruleDSLSensorBelongsTo=ruleDSLSensorBelongsTo
	{ $current=$iv_ruleDSLSensorBelongsTo.current; }
	EOF;

// Rule DSLSensorBelongsTo
ruleDSLSensorBelongsTo returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='sensor'
		{
			newLeafNode(otherlv_0, grammarAccess.getDSLSensorBelongsToAccess().getSensorKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDSLSensorBelongsToRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getDSLSensorBelongsToAccess().getSensorDSLSensorCrossReference_1_0());
				}
			)
		)
		otherlv_2='must-be-in-managed'
		{
			newLeafNode(otherlv_2, grammarAccess.getDSLSensorBelongsToAccess().getMustBeInManagedKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDSLSensorBelongsToRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getDSLSensorBelongsToAccess().getManagedDSLManagedCrossReference_3_0());
				}
			)
		)
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getDSLSensorBelongsToAccess().getSemicolonKeyword_4());
		}
	)
;

// Entry rule entryRuleDSLReferenceInputBelongsTo
entryRuleDSLReferenceInputBelongsTo returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDSLReferenceInputBelongsToRule()); }
	iv_ruleDSLReferenceInputBelongsTo=ruleDSLReferenceInputBelongsTo
	{ $current=$iv_ruleDSLReferenceInputBelongsTo.current; }
	EOF;

// Rule DSLReferenceInputBelongsTo
ruleDSLReferenceInputBelongsTo returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='reference-input'
		{
			newLeafNode(otherlv_0, grammarAccess.getDSLReferenceInputBelongsToAccess().getReferenceInputKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDSLReferenceInputBelongsToRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getDSLReferenceInputBelongsToAccess().getReferenceDSLReferenceInputCrossReference_1_0());
				}
			)
		)
		otherlv_2='must-be-in-knowledge'
		{
			newLeafNode(otherlv_2, grammarAccess.getDSLReferenceInputBelongsToAccess().getMustBeInKnowledgeKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDSLReferenceInputBelongsToRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getDSLReferenceInputBelongsToAccess().getKnowledgeDSLKnowledgeCrossReference_3_0());
				}
			)
		)
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getDSLReferenceInputBelongsToAccess().getSemicolonKeyword_4());
		}
	)
;

// Entry rule entryRuleDSLEffectorBelongsTo
entryRuleDSLEffectorBelongsTo returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDSLEffectorBelongsToRule()); }
	iv_ruleDSLEffectorBelongsTo=ruleDSLEffectorBelongsTo
	{ $current=$iv_ruleDSLEffectorBelongsTo.current; }
	EOF;

// Rule DSLEffectorBelongsTo
ruleDSLEffectorBelongsTo returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='effector'
		{
			newLeafNode(otherlv_0, grammarAccess.getDSLEffectorBelongsToAccess().getEffectorKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDSLEffectorBelongsToRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getDSLEffectorBelongsToAccess().getEffectorDSLEffectorCrossReference_1_0());
				}
			)
		)
		otherlv_2='must-be-in-managed'
		{
			newLeafNode(otherlv_2, grammarAccess.getDSLEffectorBelongsToAccess().getMustBeInManagedKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDSLEffectorBelongsToRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getDSLEffectorBelongsToAccess().getManagedDSLManagedCrossReference_3_0());
				}
			)
		)
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getDSLEffectorBelongsToAccess().getSemicolonKeyword_4());
		}
	)
;

// Entry rule entryRuleDSLMonitorBelongsTo1
entryRuleDSLMonitorBelongsTo1 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDSLMonitorBelongsTo1Rule()); }
	iv_ruleDSLMonitorBelongsTo1=ruleDSLMonitorBelongsTo1
	{ $current=$iv_ruleDSLMonitorBelongsTo1.current; }
	EOF;

// Rule DSLMonitorBelongsTo1
ruleDSLMonitorBelongsTo1 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='monitor'
		{
			newLeafNode(otherlv_0, grammarAccess.getDSLMonitorBelongsTo1Access().getMonitorKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDSLMonitorBelongsTo1Rule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getDSLMonitorBelongsTo1Access().getMonitorDSLMonitorCrossReference_1_0());
				}
			)
		)
		otherlv_2='must-be-in-control-loop'
		{
			newLeafNode(otherlv_2, grammarAccess.getDSLMonitorBelongsTo1Access().getMustBeInControlLoopKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDSLMonitorBelongsTo1Rule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getDSLMonitorBelongsTo1Access().getClDSLControlLoopCrossReference_3_0());
				}
			)
		)
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getDSLMonitorBelongsTo1Access().getSemicolonKeyword_4());
		}
	)
;

// Entry rule entryRuleDSLMonitorBelongsTo2
entryRuleDSLMonitorBelongsTo2 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDSLMonitorBelongsTo2Rule()); }
	iv_ruleDSLMonitorBelongsTo2=ruleDSLMonitorBelongsTo2
	{ $current=$iv_ruleDSLMonitorBelongsTo2.current; }
	EOF;

// Rule DSLMonitorBelongsTo2
ruleDSLMonitorBelongsTo2 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='monitor'
		{
			newLeafNode(otherlv_0, grammarAccess.getDSLMonitorBelongsTo2Access().getMonitorKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDSLMonitorBelongsTo2Rule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getDSLMonitorBelongsTo2Access().getMonitorDSLMonitorCrossReference_1_0());
				}
			)
		)
		otherlv_2='must-be-in-managing'
		{
			newLeafNode(otherlv_2, grammarAccess.getDSLMonitorBelongsTo2Access().getMustBeInManagingKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDSLMonitorBelongsTo2Rule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getDSLMonitorBelongsTo2Access().getManagingDSLManagingCrossReference_3_0());
				}
			)
		)
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getDSLMonitorBelongsTo2Access().getSemicolonKeyword_4());
		}
	)
;

// Entry rule entryRuleDSLAnalyzerBelongsTo1
entryRuleDSLAnalyzerBelongsTo1 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDSLAnalyzerBelongsTo1Rule()); }
	iv_ruleDSLAnalyzerBelongsTo1=ruleDSLAnalyzerBelongsTo1
	{ $current=$iv_ruleDSLAnalyzerBelongsTo1.current; }
	EOF;

// Rule DSLAnalyzerBelongsTo1
ruleDSLAnalyzerBelongsTo1 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='analyzer'
		{
			newLeafNode(otherlv_0, grammarAccess.getDSLAnalyzerBelongsTo1Access().getAnalyzerKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDSLAnalyzerBelongsTo1Rule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getDSLAnalyzerBelongsTo1Access().getAnalyzerDSLAnalyzerCrossReference_1_0());
				}
			)
		)
		otherlv_2='must-be-in-control-loop'
		{
			newLeafNode(otherlv_2, grammarAccess.getDSLAnalyzerBelongsTo1Access().getMustBeInControlLoopKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDSLAnalyzerBelongsTo1Rule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getDSLAnalyzerBelongsTo1Access().getClDSLControlLoopCrossReference_3_0());
				}
			)
		)
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getDSLAnalyzerBelongsTo1Access().getSemicolonKeyword_4());
		}
	)
;

// Entry rule entryRuleDSLAnalyzerBelongsTo2
entryRuleDSLAnalyzerBelongsTo2 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDSLAnalyzerBelongsTo2Rule()); }
	iv_ruleDSLAnalyzerBelongsTo2=ruleDSLAnalyzerBelongsTo2
	{ $current=$iv_ruleDSLAnalyzerBelongsTo2.current; }
	EOF;

// Rule DSLAnalyzerBelongsTo2
ruleDSLAnalyzerBelongsTo2 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='analyzer'
		{
			newLeafNode(otherlv_0, grammarAccess.getDSLAnalyzerBelongsTo2Access().getAnalyzerKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDSLAnalyzerBelongsTo2Rule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getDSLAnalyzerBelongsTo2Access().getAnalyzerDSLAnalyzerCrossReference_1_0());
				}
			)
		)
		otherlv_2='must-be-in-managing'
		{
			newLeafNode(otherlv_2, grammarAccess.getDSLAnalyzerBelongsTo2Access().getMustBeInManagingKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDSLAnalyzerBelongsTo2Rule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getDSLAnalyzerBelongsTo2Access().getManagingDSLManagingCrossReference_3_0());
				}
			)
		)
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getDSLAnalyzerBelongsTo2Access().getSemicolonKeyword_4());
		}
	)
;

// Entry rule entryRuleDSLPlannerBelongsTo1
entryRuleDSLPlannerBelongsTo1 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDSLPlannerBelongsTo1Rule()); }
	iv_ruleDSLPlannerBelongsTo1=ruleDSLPlannerBelongsTo1
	{ $current=$iv_ruleDSLPlannerBelongsTo1.current; }
	EOF;

// Rule DSLPlannerBelongsTo1
ruleDSLPlannerBelongsTo1 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='planner'
		{
			newLeafNode(otherlv_0, grammarAccess.getDSLPlannerBelongsTo1Access().getPlannerKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDSLPlannerBelongsTo1Rule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getDSLPlannerBelongsTo1Access().getPlannerDSLPlannerCrossReference_1_0());
				}
			)
		)
		otherlv_2='must-be-in-control-loop'
		{
			newLeafNode(otherlv_2, grammarAccess.getDSLPlannerBelongsTo1Access().getMustBeInControlLoopKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDSLPlannerBelongsTo1Rule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getDSLPlannerBelongsTo1Access().getClDSLControlLoopCrossReference_3_0());
				}
			)
		)
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getDSLPlannerBelongsTo1Access().getSemicolonKeyword_4());
		}
	)
;

// Entry rule entryRuleDSLPlannerBelongsTo2
entryRuleDSLPlannerBelongsTo2 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDSLPlannerBelongsTo2Rule()); }
	iv_ruleDSLPlannerBelongsTo2=ruleDSLPlannerBelongsTo2
	{ $current=$iv_ruleDSLPlannerBelongsTo2.current; }
	EOF;

// Rule DSLPlannerBelongsTo2
ruleDSLPlannerBelongsTo2 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='planner'
		{
			newLeafNode(otherlv_0, grammarAccess.getDSLPlannerBelongsTo2Access().getPlannerKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDSLPlannerBelongsTo2Rule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getDSLPlannerBelongsTo2Access().getPlannerDSLPlannerCrossReference_1_0());
				}
			)
		)
		otherlv_2='must-be-in-managing'
		{
			newLeafNode(otherlv_2, grammarAccess.getDSLPlannerBelongsTo2Access().getMustBeInManagingKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDSLPlannerBelongsTo2Rule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getDSLPlannerBelongsTo2Access().getManagingDSLManagingCrossReference_3_0());
				}
			)
		)
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getDSLPlannerBelongsTo2Access().getSemicolonKeyword_4());
		}
	)
;

// Entry rule entryRuleDSLExecutorBelongsTo1
entryRuleDSLExecutorBelongsTo1 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDSLExecutorBelongsTo1Rule()); }
	iv_ruleDSLExecutorBelongsTo1=ruleDSLExecutorBelongsTo1
	{ $current=$iv_ruleDSLExecutorBelongsTo1.current; }
	EOF;

// Rule DSLExecutorBelongsTo1
ruleDSLExecutorBelongsTo1 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='executor'
		{
			newLeafNode(otherlv_0, grammarAccess.getDSLExecutorBelongsTo1Access().getExecutorKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDSLExecutorBelongsTo1Rule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getDSLExecutorBelongsTo1Access().getExecutorDSLExecutorCrossReference_1_0());
				}
			)
		)
		otherlv_2='must-be-in-control-loop'
		{
			newLeafNode(otherlv_2, grammarAccess.getDSLExecutorBelongsTo1Access().getMustBeInControlLoopKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDSLExecutorBelongsTo1Rule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getDSLExecutorBelongsTo1Access().getClDSLControlLoopCrossReference_3_0());
				}
			)
		)
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getDSLExecutorBelongsTo1Access().getSemicolonKeyword_4());
		}
	)
;

// Entry rule entryRuleDSLExecutorBelongsTo2
entryRuleDSLExecutorBelongsTo2 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDSLExecutorBelongsTo2Rule()); }
	iv_ruleDSLExecutorBelongsTo2=ruleDSLExecutorBelongsTo2
	{ $current=$iv_ruleDSLExecutorBelongsTo2.current; }
	EOF;

// Rule DSLExecutorBelongsTo2
ruleDSLExecutorBelongsTo2 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='executor'
		{
			newLeafNode(otherlv_0, grammarAccess.getDSLExecutorBelongsTo2Access().getExecutorKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDSLExecutorBelongsTo2Rule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getDSLExecutorBelongsTo2Access().getExecutorDSLExecutorCrossReference_1_0());
				}
			)
		)
		otherlv_2='must-be-in-managing'
		{
			newLeafNode(otherlv_2, grammarAccess.getDSLExecutorBelongsTo2Access().getMustBeInManagingKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDSLExecutorBelongsTo2Rule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getDSLExecutorBelongsTo2Access().getManagingDSLManagingCrossReference_3_0());
				}
			)
		)
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getDSLExecutorBelongsTo2Access().getSemicolonKeyword_4());
		}
	)
;

// Entry rule entryRuleDSLClBelongsTo1
entryRuleDSLClBelongsTo1 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDSLClBelongsTo1Rule()); }
	iv_ruleDSLClBelongsTo1=ruleDSLClBelongsTo1
	{ $current=$iv_ruleDSLClBelongsTo1.current; }
	EOF;

// Rule DSLClBelongsTo1
ruleDSLClBelongsTo1 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='control-loop'
		{
			newLeafNode(otherlv_0, grammarAccess.getDSLClBelongsTo1Access().getControlLoopKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDSLClBelongsTo1Rule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getDSLClBelongsTo1Access().getClDSLControlLoopCrossReference_1_0());
				}
			)
		)
		otherlv_2='must-be-in-control-loop-manager'
		{
			newLeafNode(otherlv_2, grammarAccess.getDSLClBelongsTo1Access().getMustBeInControlLoopManagerKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDSLClBelongsTo1Rule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getDSLClBelongsTo1Access().getClmDSLControlLoopManagerCrossReference_3_0());
				}
			)
		)
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getDSLClBelongsTo1Access().getSemicolonKeyword_4());
		}
	)
;

// Entry rule entryRuleDSLClBelongsTo2
entryRuleDSLClBelongsTo2 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDSLClBelongsTo2Rule()); }
	iv_ruleDSLClBelongsTo2=ruleDSLClBelongsTo2
	{ $current=$iv_ruleDSLClBelongsTo2.current; }
	EOF;

// Rule DSLClBelongsTo2
ruleDSLClBelongsTo2 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='control-loop'
		{
			newLeafNode(otherlv_0, grammarAccess.getDSLClBelongsTo2Access().getControlLoopKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDSLClBelongsTo2Rule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getDSLClBelongsTo2Access().getClDSLControlLoopCrossReference_1_0());
				}
			)
		)
		otherlv_2='must-be-in-managing'
		{
			newLeafNode(otherlv_2, grammarAccess.getDSLClBelongsTo2Access().getMustBeInManagingKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDSLClBelongsTo2Rule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getDSLClBelongsTo2Access().getManagingDSLManagingCrossReference_3_0());
				}
			)
		)
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getDSLClBelongsTo2Access().getSemicolonKeyword_4());
		}
	)
;

// Entry rule entryRuleDSLClmBelongsTo
entryRuleDSLClmBelongsTo returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDSLClmBelongsToRule()); }
	iv_ruleDSLClmBelongsTo=ruleDSLClmBelongsTo
	{ $current=$iv_ruleDSLClmBelongsTo.current; }
	EOF;

// Rule DSLClmBelongsTo
ruleDSLClmBelongsTo returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='control-loop-manager'
		{
			newLeafNode(otherlv_0, grammarAccess.getDSLClmBelongsToAccess().getControlLoopManagerKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDSLClmBelongsToRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getDSLClmBelongsToAccess().getClDSLControlLoopManagerCrossReference_1_0());
				}
			)
		)
		otherlv_2='must-be-in-managing'
		{
			newLeafNode(otherlv_2, grammarAccess.getDSLClmBelongsToAccess().getMustBeInManagingKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDSLClmBelongsToRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getDSLClmBelongsToAccess().getManagingDSLManagingCrossReference_3_0());
				}
			)
		)
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getDSLClmBelongsToAccess().getSemicolonKeyword_4());
		}
	)
;

// Entry rule entryRuleDSLMeasuredOuputBelongsTo
entryRuleDSLMeasuredOuputBelongsTo returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDSLMeasuredOuputBelongsToRule()); }
	iv_ruleDSLMeasuredOuputBelongsTo=ruleDSLMeasuredOuputBelongsTo
	{ $current=$iv_ruleDSLMeasuredOuputBelongsTo.current; }
	EOF;

// Rule DSLMeasuredOuputBelongsTo
ruleDSLMeasuredOuputBelongsTo returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='measured-output'
		{
			newLeafNode(otherlv_0, grammarAccess.getDSLMeasuredOuputBelongsToAccess().getMeasuredOutputKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDSLMeasuredOuputBelongsToRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getDSLMeasuredOuputBelongsToAccess().getMeasuredDSLMeasuredOutputCrossReference_1_0());
				}
			)
		)
		otherlv_2='must-be-in-managed'
		{
			newLeafNode(otherlv_2, grammarAccess.getDSLMeasuredOuputBelongsToAccess().getMustBeInManagedKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDSLMeasuredOuputBelongsToRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getDSLMeasuredOuputBelongsToAccess().getManagedDSLManagedCrossReference_3_0());
				}
			)
		)
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getDSLMeasuredOuputBelongsToAccess().getSemicolonKeyword_4());
		}
	)
;

// Entry rule entryRuleDSLKnowledgeBelongsTo
entryRuleDSLKnowledgeBelongsTo returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDSLKnowledgeBelongsToRule()); }
	iv_ruleDSLKnowledgeBelongsTo=ruleDSLKnowledgeBelongsTo
	{ $current=$iv_ruleDSLKnowledgeBelongsTo.current; }
	EOF;

// Rule DSLKnowledgeBelongsTo
ruleDSLKnowledgeBelongsTo returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='knowledge'
		{
			newLeafNode(otherlv_0, grammarAccess.getDSLKnowledgeBelongsToAccess().getKnowledgeKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDSLKnowledgeBelongsToRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getDSLKnowledgeBelongsToAccess().getKnowledgeDSLKnowledgeCrossReference_1_0());
				}
			)
		)
		otherlv_2='must-be-in-managing'
		{
			newLeafNode(otherlv_2, grammarAccess.getDSLKnowledgeBelongsToAccess().getMustBeInManagingKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDSLKnowledgeBelongsToRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getDSLKnowledgeBelongsToAccess().getManagingDSLManagingCrossReference_3_0());
				}
			)
		)
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getDSLKnowledgeBelongsToAccess().getSemicolonKeyword_4());
		}
	)
;

// Entry rule entryRuleDSLManaging
entryRuleDSLManaging returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDSLManagingRule()); }
	iv_ruleDSLManaging=ruleDSLManaging
	{ $current=$iv_ruleDSLManaging.current; }
	EOF;

// Rule DSLManaging
ruleDSLManaging returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Managing'
		{
			newLeafNode(otherlv_0, grammarAccess.getDSLManagingAccess().getManagingKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getDSLManagingAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDSLManagingRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getDSLManagingAccess().getSemicolonKeyword_2());
		}
	)
;

// Entry rule entryRuleDSLManaged
entryRuleDSLManaged returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDSLManagedRule()); }
	iv_ruleDSLManaged=ruleDSLManaged
	{ $current=$iv_ruleDSLManaged.current; }
	EOF;

// Rule DSLManaged
ruleDSLManaged returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Managed'
		{
			newLeafNode(otherlv_0, grammarAccess.getDSLManagedAccess().getManagedKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getDSLManagedAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDSLManagedRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_2='with-interface'
			{
				newLeafNode(otherlv_2, grammarAccess.getDSLManagedAccess().getWithInterfaceKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDSLManagedAccess().getManagedinterfacesManagedInterfaceParserRuleCall_2_1_0());
					}
					lv_managedinterfaces_3_0=ruleManagedInterface
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDSLManagedRule());
						}
						add(
							$current,
							"managedinterfaces",
							lv_managedinterfaces_3_0,
							"br.ufscar.sas.xtext.sasdsl.SasDsl.ManagedInterface");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getDSLManagedAccess().getCommaKeyword_2_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getDSLManagedAccess().getManagedinterfacesManagedInterfaceParserRuleCall_2_2_1_0());
						}
						lv_managedinterfaces_5_0=ruleManagedInterface
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getDSLManagedRule());
							}
							add(
								$current,
								"managedinterfaces",
								lv_managedinterfaces_5_0,
								"br.ufscar.sas.xtext.sasdsl.SasDsl.ManagedInterface");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_6=';'
		{
			newLeafNode(otherlv_6, grammarAccess.getDSLManagedAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleDSLControlLoopManager
entryRuleDSLControlLoopManager returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDSLControlLoopManagerRule()); }
	iv_ruleDSLControlLoopManager=ruleDSLControlLoopManager
	{ $current=$iv_ruleDSLControlLoopManager.current; }
	EOF;

// Rule DSLControlLoopManager
ruleDSLControlLoopManager returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='ControlLoopManager'
		{
			newLeafNode(otherlv_0, grammarAccess.getDSLControlLoopManagerAccess().getControlLoopManagerKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getDSLControlLoopManagerAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDSLControlLoopManagerRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='typeOf'
		{
			newLeafNode(otherlv_2, grammarAccess.getDSLControlLoopManagerAccess().getTypeOfKeyword_2());
		}
		{
			newCompositeNode(grammarAccess.getDSLControlLoopManagerAccess().getDSLTypeCLMParserRuleCall_3());
		}
		ruleDSLTypeCLM
		{
			afterParserOrEnumRuleCall();
		}
		(
			otherlv_4='with-interface'
			{
				newLeafNode(otherlv_4, grammarAccess.getDSLControlLoopManagerAccess().getWithInterfaceKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDSLControlLoopManagerAccess().getClminterfacesControlLoopManagerInterfaceParserRuleCall_4_1_0());
					}
					lv_clminterfaces_5_0=ruleControlLoopManagerInterface
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDSLControlLoopManagerRule());
						}
						add(
							$current,
							"clminterfaces",
							lv_clminterfaces_5_0,
							"br.ufscar.sas.xtext.sasdsl.SasDsl.ControlLoopManagerInterface");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_6=','
				{
					newLeafNode(otherlv_6, grammarAccess.getDSLControlLoopManagerAccess().getCommaKeyword_4_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getDSLControlLoopManagerAccess().getClminterfacesControlLoopManagerInterfaceParserRuleCall_4_2_1_0());
						}
						lv_clminterfaces_7_0=ruleControlLoopManagerInterface
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getDSLControlLoopManagerRule());
							}
							add(
								$current,
								"clminterfaces",
								lv_clminterfaces_7_0,
								"br.ufscar.sas.xtext.sasdsl.SasDsl.ControlLoopManagerInterface");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_8=';'
		{
			newLeafNode(otherlv_8, grammarAccess.getDSLControlLoopManagerAccess().getSemicolonKeyword_5());
		}
	)
;

// Entry rule entryRuleDSLTypeCLM
entryRuleDSLTypeCLM returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDSLTypeCLMRule()); }
	iv_ruleDSLTypeCLM=ruleDSLTypeCLM
	{ $current=$iv_ruleDSLTypeCLM.current.getText(); }
	EOF;

// Rule DSLTypeCLM
ruleDSLTypeCLM returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='Synchronized'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDSLTypeCLMAccess().getSynchronizedKeyword_0());
		}
		    |
		kw='Coordinated'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDSLTypeCLMAccess().getCoordinatedKeyword_1());
		}
		    |
		kw='Independent'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDSLTypeCLMAccess().getIndependentKeyword_2());
		}
	)
;

// Entry rule entryRuleDSLControlLoop
entryRuleDSLControlLoop returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDSLControlLoopRule()); }
	iv_ruleDSLControlLoop=ruleDSLControlLoop
	{ $current=$iv_ruleDSLControlLoop.current; }
	EOF;

// Rule DSLControlLoop
ruleDSLControlLoop returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='ControlLoop'
		{
			newLeafNode(otherlv_0, grammarAccess.getDSLControlLoopAccess().getControlLoopKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getDSLControlLoopAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDSLControlLoopRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_2='with-interface'
			{
				newLeafNode(otherlv_2, grammarAccess.getDSLControlLoopAccess().getWithInterfaceKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDSLControlLoopAccess().getClinterfacesControlLoopInterfaceParserRuleCall_2_1_0());
					}
					lv_clinterfaces_3_0=ruleControlLoopInterface
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDSLControlLoopRule());
						}
						add(
							$current,
							"clinterfaces",
							lv_clinterfaces_3_0,
							"br.ufscar.sas.xtext.sasdsl.SasDsl.ControlLoopInterface");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getDSLControlLoopAccess().getCommaKeyword_2_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getDSLControlLoopAccess().getClinterfacesControlLoopInterfaceParserRuleCall_2_2_1_0());
						}
						lv_clinterfaces_5_0=ruleControlLoopInterface
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getDSLControlLoopRule());
							}
							add(
								$current,
								"clinterfaces",
								lv_clinterfaces_5_0,
								"br.ufscar.sas.xtext.sasdsl.SasDsl.ControlLoopInterface");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_6=';'
		{
			newLeafNode(otherlv_6, grammarAccess.getDSLControlLoopAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleDSLMonitor
entryRuleDSLMonitor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDSLMonitorRule()); }
	iv_ruleDSLMonitor=ruleDSLMonitor
	{ $current=$iv_ruleDSLMonitor.current; }
	EOF;

// Rule DSLMonitor
ruleDSLMonitor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Monitor'
		{
			newLeafNode(otherlv_0, grammarAccess.getDSLMonitorAccess().getMonitorKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getDSLMonitorAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDSLMonitorRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_2='with-interface'
			{
				newLeafNode(otherlv_2, grammarAccess.getDSLMonitorAccess().getWithInterfaceKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDSLMonitorAccess().getMonitorinterfacesMonitorInterfaceParserRuleCall_2_1_0());
					}
					lv_monitorinterfaces_3_0=ruleMonitorInterface
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDSLMonitorRule());
						}
						add(
							$current,
							"monitorinterfaces",
							lv_monitorinterfaces_3_0,
							"br.ufscar.sas.xtext.sasdsl.SasDsl.MonitorInterface");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getDSLMonitorAccess().getCommaKeyword_2_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getDSLMonitorAccess().getMonitorinterfacesMonitorInterfaceParserRuleCall_2_2_1_0());
						}
						lv_monitorinterfaces_5_0=ruleMonitorInterface
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getDSLMonitorRule());
							}
							add(
								$current,
								"monitorinterfaces",
								lv_monitorinterfaces_5_0,
								"br.ufscar.sas.xtext.sasdsl.SasDsl.MonitorInterface");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_6=';'
		{
			newLeafNode(otherlv_6, grammarAccess.getDSLMonitorAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleDSLAnalyzer
entryRuleDSLAnalyzer returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDSLAnalyzerRule()); }
	iv_ruleDSLAnalyzer=ruleDSLAnalyzer
	{ $current=$iv_ruleDSLAnalyzer.current; }
	EOF;

// Rule DSLAnalyzer
ruleDSLAnalyzer returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Analyzer'
		{
			newLeafNode(otherlv_0, grammarAccess.getDSLAnalyzerAccess().getAnalyzerKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getDSLAnalyzerAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDSLAnalyzerRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_2='with-interface'
			{
				newLeafNode(otherlv_2, grammarAccess.getDSLAnalyzerAccess().getWithInterfaceKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDSLAnalyzerAccess().getAnlyzerinterfacesAnalyzerInterfaceParserRuleCall_2_1_0());
					}
					lv_anlyzerinterfaces_3_0=ruleAnalyzerInterface
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDSLAnalyzerRule());
						}
						add(
							$current,
							"anlyzerinterfaces",
							lv_anlyzerinterfaces_3_0,
							"br.ufscar.sas.xtext.sasdsl.SasDsl.AnalyzerInterface");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getDSLAnalyzerAccess().getCommaKeyword_2_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getDSLAnalyzerAccess().getAnlyzerinterfacesAnalyzerInterfaceParserRuleCall_2_2_1_0());
						}
						lv_anlyzerinterfaces_5_0=ruleAnalyzerInterface
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getDSLAnalyzerRule());
							}
							add(
								$current,
								"anlyzerinterfaces",
								lv_anlyzerinterfaces_5_0,
								"br.ufscar.sas.xtext.sasdsl.SasDsl.AnalyzerInterface");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_6=';'
		{
			newLeafNode(otherlv_6, grammarAccess.getDSLAnalyzerAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleDSLPlanner
entryRuleDSLPlanner returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDSLPlannerRule()); }
	iv_ruleDSLPlanner=ruleDSLPlanner
	{ $current=$iv_ruleDSLPlanner.current; }
	EOF;

// Rule DSLPlanner
ruleDSLPlanner returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Planner'
		{
			newLeafNode(otherlv_0, grammarAccess.getDSLPlannerAccess().getPlannerKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getDSLPlannerAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDSLPlannerRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_2='with-interface'
			{
				newLeafNode(otherlv_2, grammarAccess.getDSLPlannerAccess().getWithInterfaceKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDSLPlannerAccess().getPlannerinterfacesPlannerInterfaceParserRuleCall_2_1_0());
					}
					lv_plannerinterfaces_3_0=rulePlannerInterface
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDSLPlannerRule());
						}
						add(
							$current,
							"plannerinterfaces",
							lv_plannerinterfaces_3_0,
							"br.ufscar.sas.xtext.sasdsl.SasDsl.PlannerInterface");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getDSLPlannerAccess().getCommaKeyword_2_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getDSLPlannerAccess().getPlannerinterfacesPlannerInterfaceParserRuleCall_2_2_1_0());
						}
						lv_plannerinterfaces_5_0=rulePlannerInterface
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getDSLPlannerRule());
							}
							add(
								$current,
								"plannerinterfaces",
								lv_plannerinterfaces_5_0,
								"br.ufscar.sas.xtext.sasdsl.SasDsl.PlannerInterface");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_6=';'
		{
			newLeafNode(otherlv_6, grammarAccess.getDSLPlannerAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleDSLExecutor
entryRuleDSLExecutor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDSLExecutorRule()); }
	iv_ruleDSLExecutor=ruleDSLExecutor
	{ $current=$iv_ruleDSLExecutor.current; }
	EOF;

// Rule DSLExecutor
ruleDSLExecutor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Executor'
		{
			newLeafNode(otherlv_0, grammarAccess.getDSLExecutorAccess().getExecutorKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getDSLExecutorAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDSLExecutorRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_2='with-interface'
			{
				newLeafNode(otherlv_2, grammarAccess.getDSLExecutorAccess().getWithInterfaceKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDSLExecutorAccess().getExecutorinterfacesExecutorInterfaceParserRuleCall_2_1_0());
					}
					lv_executorinterfaces_3_0=ruleExecutorInterface
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDSLExecutorRule());
						}
						add(
							$current,
							"executorinterfaces",
							lv_executorinterfaces_3_0,
							"br.ufscar.sas.xtext.sasdsl.SasDsl.ExecutorInterface");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getDSLExecutorAccess().getCommaKeyword_2_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getDSLExecutorAccess().getExecutorinterfacesExecutorInterfaceParserRuleCall_2_2_1_0());
						}
						lv_executorinterfaces_5_0=ruleExecutorInterface
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getDSLExecutorRule());
							}
							add(
								$current,
								"executorinterfaces",
								lv_executorinterfaces_5_0,
								"br.ufscar.sas.xtext.sasdsl.SasDsl.ExecutorInterface");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_6=';'
		{
			newLeafNode(otherlv_6, grammarAccess.getDSLExecutorAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleDSLKnowledge
entryRuleDSLKnowledge returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDSLKnowledgeRule()); }
	iv_ruleDSLKnowledge=ruleDSLKnowledge
	{ $current=$iv_ruleDSLKnowledge.current; }
	EOF;

// Rule DSLKnowledge
ruleDSLKnowledge returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Knowledge'
		{
			newLeafNode(otherlv_0, grammarAccess.getDSLKnowledgeAccess().getKnowledgeKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getDSLKnowledgeAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDSLKnowledgeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_2='with-interface'
			{
				newLeafNode(otherlv_2, grammarAccess.getDSLKnowledgeAccess().getWithInterfaceKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDSLKnowledgeAccess().getKnowledgeinterfacesKnowledgeInterfaceParserRuleCall_2_1_0());
					}
					lv_knowledgeinterfaces_3_0=ruleKnowledgeInterface
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDSLKnowledgeRule());
						}
						add(
							$current,
							"knowledgeinterfaces",
							lv_knowledgeinterfaces_3_0,
							"br.ufscar.sas.xtext.sasdsl.SasDsl.KnowledgeInterface");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getDSLKnowledgeAccess().getCommaKeyword_2_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getDSLKnowledgeAccess().getKnowledgeinterfacesKnowledgeInterfaceParserRuleCall_2_2_1_0());
						}
						lv_knowledgeinterfaces_5_0=ruleKnowledgeInterface
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getDSLKnowledgeRule());
							}
							add(
								$current,
								"knowledgeinterfaces",
								lv_knowledgeinterfaces_5_0,
								"br.ufscar.sas.xtext.sasdsl.SasDsl.KnowledgeInterface");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_6=';'
		{
			newLeafNode(otherlv_6, grammarAccess.getDSLKnowledgeAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleDSLSensor
entryRuleDSLSensor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDSLSensorRule()); }
	iv_ruleDSLSensor=ruleDSLSensor
	{ $current=$iv_ruleDSLSensor.current; }
	EOF;

// Rule DSLSensor
ruleDSLSensor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Sensor'
		{
			newLeafNode(otherlv_0, grammarAccess.getDSLSensorAccess().getSensorKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getDSLSensorAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDSLSensorRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_2='with-interface'
			{
				newLeafNode(otherlv_2, grammarAccess.getDSLSensorAccess().getWithInterfaceKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDSLSensorAccess().getSensorinterfacesSensorInterfaceParserRuleCall_2_1_0());
					}
					lv_sensorinterfaces_3_0=ruleSensorInterface
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDSLSensorRule());
						}
						add(
							$current,
							"sensorinterfaces",
							lv_sensorinterfaces_3_0,
							"br.ufscar.sas.xtext.sasdsl.SasDsl.SensorInterface");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getDSLSensorAccess().getCommaKeyword_2_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getDSLSensorAccess().getSensorinterfacesSensorInterfaceParserRuleCall_2_2_1_0());
						}
						lv_sensorinterfaces_5_0=ruleSensorInterface
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getDSLSensorRule());
							}
							add(
								$current,
								"sensorinterfaces",
								lv_sensorinterfaces_5_0,
								"br.ufscar.sas.xtext.sasdsl.SasDsl.SensorInterface");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_6=';'
		{
			newLeafNode(otherlv_6, grammarAccess.getDSLSensorAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleDSLEffector
entryRuleDSLEffector returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDSLEffectorRule()); }
	iv_ruleDSLEffector=ruleDSLEffector
	{ $current=$iv_ruleDSLEffector.current; }
	EOF;

// Rule DSLEffector
ruleDSLEffector returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Effector'
		{
			newLeafNode(otherlv_0, grammarAccess.getDSLEffectorAccess().getEffectorKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getDSLEffectorAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDSLEffectorRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_2='with-interface'
			{
				newLeafNode(otherlv_2, grammarAccess.getDSLEffectorAccess().getWithInterfaceKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDSLEffectorAccess().getEffectorinterfacesEffectorInterfaceParserRuleCall_2_1_0());
					}
					lv_effectorinterfaces_3_0=ruleEffectorInterface
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDSLEffectorRule());
						}
						add(
							$current,
							"effectorinterfaces",
							lv_effectorinterfaces_3_0,
							"br.ufscar.sas.xtext.sasdsl.SasDsl.EffectorInterface");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getDSLEffectorAccess().getCommaKeyword_2_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getDSLEffectorAccess().getEffectorinterfacesEffectorInterfaceParserRuleCall_2_2_1_0());
						}
						lv_effectorinterfaces_5_0=ruleEffectorInterface
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getDSLEffectorRule());
							}
							add(
								$current,
								"effectorinterfaces",
								lv_effectorinterfaces_5_0,
								"br.ufscar.sas.xtext.sasdsl.SasDsl.EffectorInterface");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_6=';'
		{
			newLeafNode(otherlv_6, grammarAccess.getDSLEffectorAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleDSLReferenceInput
entryRuleDSLReferenceInput returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDSLReferenceInputRule()); }
	iv_ruleDSLReferenceInput=ruleDSLReferenceInput
	{ $current=$iv_ruleDSLReferenceInput.current; }
	EOF;

// Rule DSLReferenceInput
ruleDSLReferenceInput returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='ReferenceInput'
		{
			newLeafNode(otherlv_0, grammarAccess.getDSLReferenceInputAccess().getReferenceInputKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getDSLReferenceInputAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDSLReferenceInputRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getDSLReferenceInputAccess().getSemicolonKeyword_2());
		}
	)
;

// Entry rule entryRuleDSLMeasuredOutput
entryRuleDSLMeasuredOutput returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDSLMeasuredOutputRule()); }
	iv_ruleDSLMeasuredOutput=ruleDSLMeasuredOutput
	{ $current=$iv_ruleDSLMeasuredOutput.current; }
	EOF;

// Rule DSLMeasuredOutput
ruleDSLMeasuredOutput returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='MeasuredOutput'
		{
			newLeafNode(otherlv_0, grammarAccess.getDSLMeasuredOutputAccess().getMeasuredOutputKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getDSLMeasuredOutputAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDSLMeasuredOutputRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getDSLMeasuredOutputAccess().getSemicolonKeyword_2());
		}
	)
;

// Entry rule entryRuleEffectorInterface
entryRuleEffectorInterface returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEffectorInterfaceRule()); }
	iv_ruleEffectorInterface=ruleEffectorInterface
	{ $current=$iv_ruleEffectorInterface.current; }
	EOF;

// Rule EffectorInterface
ruleEffectorInterface returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getEffectorInterfaceAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getEffectorInterfaceRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleSensorInterface
entryRuleSensorInterface returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSensorInterfaceRule()); }
	iv_ruleSensorInterface=ruleSensorInterface
	{ $current=$iv_ruleSensorInterface.current; }
	EOF;

// Rule SensorInterface
ruleSensorInterface returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getSensorInterfaceAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getSensorInterfaceRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleMonitorInterface
entryRuleMonitorInterface returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMonitorInterfaceRule()); }
	iv_ruleMonitorInterface=ruleMonitorInterface
	{ $current=$iv_ruleMonitorInterface.current; }
	EOF;

// Rule MonitorInterface
ruleMonitorInterface returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getMonitorInterfaceAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getMonitorInterfaceRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleAnalyzerInterface
entryRuleAnalyzerInterface returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAnalyzerInterfaceRule()); }
	iv_ruleAnalyzerInterface=ruleAnalyzerInterface
	{ $current=$iv_ruleAnalyzerInterface.current; }
	EOF;

// Rule AnalyzerInterface
ruleAnalyzerInterface returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getAnalyzerInterfaceAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getAnalyzerInterfaceRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRulePlannerInterface
entryRulePlannerInterface returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPlannerInterfaceRule()); }
	iv_rulePlannerInterface=rulePlannerInterface
	{ $current=$iv_rulePlannerInterface.current; }
	EOF;

// Rule PlannerInterface
rulePlannerInterface returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getPlannerInterfaceAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getPlannerInterfaceRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleExecutorInterface
entryRuleExecutorInterface returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExecutorInterfaceRule()); }
	iv_ruleExecutorInterface=ruleExecutorInterface
	{ $current=$iv_ruleExecutorInterface.current; }
	EOF;

// Rule ExecutorInterface
ruleExecutorInterface returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getExecutorInterfaceAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getExecutorInterfaceRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleKnowledgeInterface
entryRuleKnowledgeInterface returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getKnowledgeInterfaceRule()); }
	iv_ruleKnowledgeInterface=ruleKnowledgeInterface
	{ $current=$iv_ruleKnowledgeInterface.current; }
	EOF;

// Rule KnowledgeInterface
ruleKnowledgeInterface returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getKnowledgeInterfaceAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getKnowledgeInterfaceRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleControlLoopInterface
entryRuleControlLoopInterface returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getControlLoopInterfaceRule()); }
	iv_ruleControlLoopInterface=ruleControlLoopInterface
	{ $current=$iv_ruleControlLoopInterface.current; }
	EOF;

// Rule ControlLoopInterface
ruleControlLoopInterface returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getControlLoopInterfaceAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getControlLoopInterfaceRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleControlLoopManagerInterface
entryRuleControlLoopManagerInterface returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getControlLoopManagerInterfaceRule()); }
	iv_ruleControlLoopManagerInterface=ruleControlLoopManagerInterface
	{ $current=$iv_ruleControlLoopManagerInterface.current; }
	EOF;

// Rule ControlLoopManagerInterface
ruleControlLoopManagerInterface returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getControlLoopManagerInterfaceAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getControlLoopManagerInterfaceRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleManagedInterface
entryRuleManagedInterface returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getManagedInterfaceRule()); }
	iv_ruleManagedInterface=ruleManagedInterface
	{ $current=$iv_ruleManagedInterface.current; }
	EOF;

// Rule ManagedInterface
ruleManagedInterface returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getManagedInterfaceAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getManagedInterfaceRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
