/*
 * generated by Xtext 2.10.0
 */
grammar InternalSasDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package br.ufscar.sas.xtext.sasdsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package br.ufscar.sas.xtext.sasdsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import br.ufscar.sas.xtext.sasdsl.services.SasDslGrammarAccess;

}

@parser::members {

 	private SasDslGrammarAccess grammarAccess;

    public InternalSasDslParser(TokenStream input, SasDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "ArchitectureDefinition";
   	}

   	@Override
   	protected SasDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleArchitectureDefinition
entryRuleArchitectureDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArchitectureDefinitionRule()); }
	iv_ruleArchitectureDefinition=ruleArchitectureDefinition
	{ $current=$iv_ruleArchitectureDefinition.current; }
	EOF;

// Rule ArchitectureDefinition
ruleArchitectureDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getArchitectureDefinitionAccess().getSectionSectionsParserRuleCall_0());
			}
			lv_section_0_0=ruleSections
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getArchitectureDefinitionRule());
				}
				add(
					$current,
					"section",
					lv_section_0_0,
					"br.ufscar.sas.xtext.sasdsl.SasDsl.Sections");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleSections
entryRuleSections returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSectionsRule()); }
	iv_ruleSections=ruleSections
	{ $current=$iv_ruleSections.current; }
	EOF;

// Rule Sections
ruleSections returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSectionsAccess().getAbstractionsAbstractionsParserRuleCall_0_0());
				}
				lv_abstractions_0_0=ruleAbstractions
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSectionsRule());
					}
					set(
						$current,
						"abstractions",
						lv_abstractions_0_0,
						"br.ufscar.sas.xtext.sasdsl.SasDsl.Abstractions");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSectionsAccess().getCompositionsCompositionsParserRuleCall_1_0());
				}
				lv_compositions_1_0=ruleCompositions
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSectionsRule());
					}
					set(
						$current,
						"compositions",
						lv_compositions_1_0,
						"br.ufscar.sas.xtext.sasdsl.SasDsl.Compositions");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSectionsAccess().getRestrictionsRestrictionsParserRuleCall_2_0());
				}
				lv_restrictions_2_0=ruleRestrictions
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSectionsRule());
					}
					set(
						$current,
						"restrictions",
						lv_restrictions_2_0,
						"br.ufscar.sas.xtext.sasdsl.SasDsl.Restrictions");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleAbstractions
entryRuleAbstractions returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAbstractionsRule()); }
	iv_ruleAbstractions=ruleAbstractions
	{ $current=$iv_ruleAbstractions.current; }
	EOF;

// Rule Abstractions
ruleAbstractions returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Abstractions'
		{
			newLeafNode(otherlv_0, grammarAccess.getAbstractionsAccess().getAbstractionsKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getAbstractionsAccess().getLeftCurlyBracketKeyword_1());
		}
		{
			newCompositeNode(grammarAccess.getAbstractionsAccess().getAbstractionParserRuleCall_2());
		}
		ruleAbstraction
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					lv_name_3_0=RULE_ID
					{
						newLeafNode(lv_name_3_0, grammarAccess.getAbstractionsAccess().getNameIDTerminalRuleCall_3_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAbstractionsRule());
						}
						addWithLastConsumed(
							$current,
							"name",
							lv_name_3_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getAbstractionsAccess().getCommaKeyword_3_1_0());
				}
				(
					(
						lv_name_5_0=RULE_ID
						{
							newLeafNode(lv_name_5_0, grammarAccess.getAbstractionsAccess().getNameIDTerminalRuleCall_3_1_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAbstractionsRule());
							}
							addWithLastConsumed(
								$current,
								"name",
								lv_name_5_0,
								"org.eclipse.xtext.common.Terminals.ID");
						}
					)
				)
			)*
			otherlv_6=';'
			{
				newLeafNode(otherlv_6, grammarAccess.getAbstractionsAccess().getSemicolonKeyword_3_2());
			}
		)+
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getAbstractionsAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleCompositions
entryRuleCompositions returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCompositionsRule()); }
	iv_ruleCompositions=ruleCompositions
	{ $current=$iv_ruleCompositions.current.getText(); }
	EOF;

// Rule Compositions
ruleCompositions returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='Compositions'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCompositionsAccess().getCompositionsKeyword_0());
		}
		kw='{'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCompositionsAccess().getLeftCurlyBracketKeyword_1());
		}
		kw='}'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCompositionsAccess().getRightCurlyBracketKeyword_2());
		}
	)
;

// Entry rule entryRuleRestrictions
entryRuleRestrictions returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRestrictionsRule()); }
	iv_ruleRestrictions=ruleRestrictions
	{ $current=$iv_ruleRestrictions.current.getText(); }
	EOF;

// Rule Restrictions
ruleRestrictions returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='Restrictions'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRestrictionsAccess().getRestrictionsKeyword_0());
		}
		kw='{'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRestrictionsAccess().getLeftCurlyBracketKeyword_1());
		}
		kw='}'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRestrictionsAccess().getRightCurlyBracketKeyword_2());
		}
	)
;

// Entry rule entryRuleAbstraction
entryRuleAbstraction returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAbstractionRule()); }
	iv_ruleAbstraction=ruleAbstraction
	{ $current=$iv_ruleAbstraction.current.getText(); }
	EOF;

// Rule Abstraction
ruleAbstraction returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='Monitor'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAbstractionAccess().getMonitorKeyword_0());
		}
		    |
		kw='Managing'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAbstractionAccess().getManagingKeyword_1());
		}
		    |
		kw='Managed'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAbstractionAccess().getManagedKeyword_2());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
