/*
 * generated by Xtext 2.10.0
 */
package br.ufscar.sas.xtext.sasdsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SasDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ArchitectureDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.ArchitectureDefinition");
		private final Assignment cSectionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cSectionSectionsParserRuleCall_0 = (RuleCall)cSectionAssignment.eContents().get(0);
		
		//ArchitectureDefinition:
		//	section+=Sections*;
		@Override public ParserRule getRule() { return rule; }
		
		//section+=Sections*
		public Assignment getSectionAssignment() { return cSectionAssignment; }
		
		//Sections
		public RuleCall getSectionSectionsParserRuleCall_0() { return cSectionSectionsParserRuleCall_0; }
	}
	public class SectionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.Sections");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAbstractionsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAbstractionsAbstractionsParserRuleCall_0_0 = (RuleCall)cAbstractionsAssignment_0.eContents().get(0);
		private final Assignment cCompositionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCompositionsCompositionsParserRuleCall_1_0 = (RuleCall)cCompositionsAssignment_1.eContents().get(0);
		private final Assignment cRestrictionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRestrictionsRestrictionsParserRuleCall_2_0 = (RuleCall)cRestrictionsAssignment_2.eContents().get(0);
		
		//Sections:
		//	abstractions=Abstractions compositions=Compositions restrictions=Restrictions;
		@Override public ParserRule getRule() { return rule; }
		
		//abstractions=Abstractions compositions=Compositions restrictions=Restrictions
		public Group getGroup() { return cGroup; }
		
		//abstractions=Abstractions
		public Assignment getAbstractionsAssignment_0() { return cAbstractionsAssignment_0; }
		
		//Abstractions
		public RuleCall getAbstractionsAbstractionsParserRuleCall_0_0() { return cAbstractionsAbstractionsParserRuleCall_0_0; }
		
		//compositions=Compositions
		public Assignment getCompositionsAssignment_1() { return cCompositionsAssignment_1; }
		
		//Compositions
		public RuleCall getCompositionsCompositionsParserRuleCall_1_0() { return cCompositionsCompositionsParserRuleCall_1_0; }
		
		//restrictions=Restrictions
		public Assignment getRestrictionsAssignment_2() { return cRestrictionsAssignment_2; }
		
		//Restrictions
		public RuleCall getRestrictionsRestrictionsParserRuleCall_2_0() { return cRestrictionsRestrictionsParserRuleCall_2_0; }
	}
	public class AbstractionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.Abstractions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAbstractionsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cAbstractionParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_3_0_0 = (RuleCall)cNameAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cNameAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_3_1_1_0 = (RuleCall)cNameAssignment_3_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Abstractions:
		//	'Abstractions'
		//	'{'
		//	Abstraction (name+=ID (',' name+=ID)* ';')+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Abstractions' '{' Abstraction (name+=ID (',' name+=ID)* ';')+ '}'
		public Group getGroup() { return cGroup; }
		
		//'Abstractions'
		public Keyword getAbstractionsKeyword_0() { return cAbstractionsKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//Abstraction
		public RuleCall getAbstractionParserRuleCall_2() { return cAbstractionParserRuleCall_2; }
		
		//(name+=ID (',' name+=ID)* ';')+
		public Group getGroup_3() { return cGroup_3; }
		
		//name+=ID
		public Assignment getNameAssignment_3_0() { return cNameAssignment_3_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0_0() { return cNameIDTerminalRuleCall_3_0_0; }
		
		//(',' name+=ID)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//name+=ID
		public Assignment getNameAssignment_3_1_1() { return cNameAssignment_3_1_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_1_1_0() { return cNameIDTerminalRuleCall_3_1_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_2() { return cSemicolonKeyword_3_2; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class CompositionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.Compositions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCompositionsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Compositions:
		//	'Compositions'
		//	'{'
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Compositions' '{' '}'
		public Group getGroup() { return cGroup; }
		
		//'Compositions'
		public Keyword getCompositionsKeyword_0() { return cCompositionsKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	public class RestrictionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.Restrictions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRestrictionsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Restrictions:
		//	'Restrictions'
		//	'{'
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Restrictions' '{' '}'
		public Group getGroup() { return cGroup; }
		
		//'Restrictions'
		public Keyword getRestrictionsKeyword_0() { return cRestrictionsKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	public class AbstractionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.Abstraction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cMonitorKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cManagingKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cManagedKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//Abstraction:
		//	'Monitor' | 'Managing' | 'Managed';
		@Override public ParserRule getRule() { return rule; }
		
		//'Monitor' | 'Managing' | 'Managed'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Monitor'
		public Keyword getMonitorKeyword_0() { return cMonitorKeyword_0; }
		
		//'Managing'
		public Keyword getManagingKeyword_1() { return cManagingKeyword_1; }
		
		//'Managed'
		public Keyword getManagedKeyword_2() { return cManagedKeyword_2; }
	}
	
	
	private final ArchitectureDefinitionElements pArchitectureDefinition;
	private final SectionsElements pSections;
	private final AbstractionsElements pAbstractions;
	private final CompositionsElements pCompositions;
	private final RestrictionsElements pRestrictions;
	private final AbstractionElements pAbstraction;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SasDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pArchitectureDefinition = new ArchitectureDefinitionElements();
		this.pSections = new SectionsElements();
		this.pAbstractions = new AbstractionsElements();
		this.pCompositions = new CompositionsElements();
		this.pRestrictions = new RestrictionsElements();
		this.pAbstraction = new AbstractionElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("br.ufscar.sas.xtext.sasdsl.SasDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//ArchitectureDefinition:
	//	section+=Sections*;
	public ArchitectureDefinitionElements getArchitectureDefinitionAccess() {
		return pArchitectureDefinition;
	}
	
	public ParserRule getArchitectureDefinitionRule() {
		return getArchitectureDefinitionAccess().getRule();
	}
	
	//Sections:
	//	abstractions=Abstractions compositions=Compositions restrictions=Restrictions;
	public SectionsElements getSectionsAccess() {
		return pSections;
	}
	
	public ParserRule getSectionsRule() {
		return getSectionsAccess().getRule();
	}
	
	//Abstractions:
	//	'Abstractions'
	//	'{'
	//	Abstraction (name+=ID (',' name+=ID)* ';')+
	//	'}';
	public AbstractionsElements getAbstractionsAccess() {
		return pAbstractions;
	}
	
	public ParserRule getAbstractionsRule() {
		return getAbstractionsAccess().getRule();
	}
	
	//Compositions:
	//	'Compositions'
	//	'{'
	//	'}';
	public CompositionsElements getCompositionsAccess() {
		return pCompositions;
	}
	
	public ParserRule getCompositionsRule() {
		return getCompositionsAccess().getRule();
	}
	
	//Restrictions:
	//	'Restrictions'
	//	'{'
	//	'}';
	public RestrictionsElements getRestrictionsAccess() {
		return pRestrictions;
	}
	
	public ParserRule getRestrictionsRule() {
		return getRestrictionsAccess().getRule();
	}
	
	//Abstraction:
	//	'Monitor' | 'Managing' | 'Managed';
	public AbstractionElements getAbstractionAccess() {
		return pAbstraction;
	}
	
	public ParserRule getAbstractionRule() {
		return getAbstractionAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
