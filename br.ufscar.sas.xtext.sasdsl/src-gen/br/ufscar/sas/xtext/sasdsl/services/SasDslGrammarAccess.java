/*
 * generated by Xtext 2.10.0
 */
package br.ufscar.sas.xtext.sasdsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SasDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ArchitectureDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.ArchitectureDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAbstractionsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAbstractionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAbstractionsDSLAbstractionParserRuleCall_2_0 = (RuleCall)cAbstractionsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cCompositionsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cCompositionsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cCompositionsDSLCompositionParserRuleCall_6_0 = (RuleCall)cCompositionsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cRestrictionsKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cLeftCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cRestrictionsAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cRestrictionsDSLRestrictionParserRuleCall_10_0 = (RuleCall)cRestrictionsAssignment_10.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//ArchitectureDefinition:
		//	'Abstractions' '{' abstractions+=DSLAbstraction+ '}'
		//	'Compositions' '{' compositions+=DSLComposition* '}'
		//	'Restrictions' '{' restrictions+=DSLRestriction* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Abstractions' '{' abstractions+=DSLAbstraction+ '}' 'Compositions' '{' compositions+=DSLComposition* '}' 'Restrictions'
		//'{' restrictions+=DSLRestriction* '}'
		public Group getGroup() { return cGroup; }
		
		//'Abstractions'
		public Keyword getAbstractionsKeyword_0() { return cAbstractionsKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//abstractions+=DSLAbstraction+
		public Assignment getAbstractionsAssignment_2() { return cAbstractionsAssignment_2; }
		
		//DSLAbstraction
		public RuleCall getAbstractionsDSLAbstractionParserRuleCall_2_0() { return cAbstractionsDSLAbstractionParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
		
		//'Compositions'
		public Keyword getCompositionsKeyword_4() { return cCompositionsKeyword_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//compositions+=DSLComposition*
		public Assignment getCompositionsAssignment_6() { return cCompositionsAssignment_6; }
		
		//DSLComposition
		public RuleCall getCompositionsDSLCompositionParserRuleCall_6_0() { return cCompositionsDSLCompositionParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
		
		//'Restrictions'
		public Keyword getRestrictionsKeyword_8() { return cRestrictionsKeyword_8; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_9() { return cLeftCurlyBracketKeyword_9; }
		
		//restrictions+=DSLRestriction*
		public Assignment getRestrictionsAssignment_10() { return cRestrictionsAssignment_10; }
		
		//DSLRestriction
		public RuleCall getRestrictionsDSLRestrictionParserRuleCall_10_0() { return cRestrictionsDSLRestrictionParserRuleCall_10_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}
	public class DSLAbstractionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLAbstraction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDSLManagingParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDSLManagedParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDSLControlLoopManagerParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDSLControlLoopParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDSLMonitorParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cDSLAnalyzerParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cDSLPlannerParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cDSLExecutorParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cDSLKnowledgeParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cDSLSensorParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cDSLEffectorParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cDSLProbeParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cDSLGaugeParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cDSLReferenceInputParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cDSLMeasuredOutputParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		
		//DSLAbstraction:
		//	DSLManaging | DSLManaged | DSLControlLoopManager | DSLControlLoop | DSLMonitor | DSLAnalyzer | DSLPlanner |
		//	DSLExecutor | DSLKnowledge | DSLSensor | DSLEffector | DSLProbe | DSLGauge | DSLReferenceInput | DSLMeasuredOutput;
		@Override public ParserRule getRule() { return rule; }
		
		//DSLManaging | DSLManaged | DSLControlLoopManager | DSLControlLoop | DSLMonitor | DSLAnalyzer | DSLPlanner | DSLExecutor
		//| DSLKnowledge | DSLSensor | DSLEffector | DSLProbe | DSLGauge | DSLReferenceInput | DSLMeasuredOutput
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DSLManaging
		public RuleCall getDSLManagingParserRuleCall_0() { return cDSLManagingParserRuleCall_0; }
		
		//DSLManaged
		public RuleCall getDSLManagedParserRuleCall_1() { return cDSLManagedParserRuleCall_1; }
		
		//DSLControlLoopManager
		public RuleCall getDSLControlLoopManagerParserRuleCall_2() { return cDSLControlLoopManagerParserRuleCall_2; }
		
		//DSLControlLoop
		public RuleCall getDSLControlLoopParserRuleCall_3() { return cDSLControlLoopParserRuleCall_3; }
		
		//DSLMonitor
		public RuleCall getDSLMonitorParserRuleCall_4() { return cDSLMonitorParserRuleCall_4; }
		
		//DSLAnalyzer
		public RuleCall getDSLAnalyzerParserRuleCall_5() { return cDSLAnalyzerParserRuleCall_5; }
		
		//DSLPlanner
		public RuleCall getDSLPlannerParserRuleCall_6() { return cDSLPlannerParserRuleCall_6; }
		
		//DSLExecutor
		public RuleCall getDSLExecutorParserRuleCall_7() { return cDSLExecutorParserRuleCall_7; }
		
		//DSLKnowledge
		public RuleCall getDSLKnowledgeParserRuleCall_8() { return cDSLKnowledgeParserRuleCall_8; }
		
		//DSLSensor
		public RuleCall getDSLSensorParserRuleCall_9() { return cDSLSensorParserRuleCall_9; }
		
		//DSLEffector
		public RuleCall getDSLEffectorParserRuleCall_10() { return cDSLEffectorParserRuleCall_10; }
		
		//DSLProbe
		public RuleCall getDSLProbeParserRuleCall_11() { return cDSLProbeParserRuleCall_11; }
		
		//DSLGauge
		public RuleCall getDSLGaugeParserRuleCall_12() { return cDSLGaugeParserRuleCall_12; }
		
		//DSLReferenceInput
		public RuleCall getDSLReferenceInputParserRuleCall_13() { return cDSLReferenceInputParserRuleCall_13; }
		
		//DSLMeasuredOutput
		public RuleCall getDSLMeasuredOutputParserRuleCall_14() { return cDSLMeasuredOutputParserRuleCall_14; }
	}
	public class DSLCompositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLComposition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDSLSensorBelongsToParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDSLReferenceInputBelongsToParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDSLEffectorBelongsToParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDSLMonitorBelongsTo1ParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDSLMonitorBelongsTo2ParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cDSLAnalyzerBelongsTo1ParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cDSLAnalyzerBelongsTo2ParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cDSLPlannerBelongsTo1ParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cDSLPlannerBelongsTo2ParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cDSLExecutorBelongsTo1ParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cDSLExecutorBelongsTo2ParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cDSLClBelongsTo1ParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cDSLClBelongsTo2ParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cDSLClmBelongsToParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cDSLMeasuredOuputBelongsToParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cDSLGaugeBelongsToParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cDSLProbeBelongsToParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		
		//DSLComposition:
		//	DSLSensorBelongsTo | DSLReferenceInputBelongsTo | DSLEffectorBelongsTo | DSLMonitorBelongsTo1 | DSLMonitorBelongsTo2 |
		//	DSLAnalyzerBelongsTo1 | DSLAnalyzerBelongsTo2 | DSLPlannerBelongsTo1 | DSLPlannerBelongsTo2 | DSLExecutorBelongsTo1 |
		//	DSLExecutorBelongsTo2 | DSLClBelongsTo1 | DSLClBelongsTo2 | DSLClmBelongsTo | DSLMeasuredOuputBelongsTo |
		//	DSLGaugeBelongsTo | DSLProbeBelongsTo;
		@Override public ParserRule getRule() { return rule; }
		
		//DSLSensorBelongsTo | DSLReferenceInputBelongsTo | DSLEffectorBelongsTo | DSLMonitorBelongsTo1 | DSLMonitorBelongsTo2 |
		//DSLAnalyzerBelongsTo1 | DSLAnalyzerBelongsTo2 | DSLPlannerBelongsTo1 | DSLPlannerBelongsTo2 | DSLExecutorBelongsTo1 |
		//DSLExecutorBelongsTo2 | DSLClBelongsTo1 | DSLClBelongsTo2 | DSLClmBelongsTo | DSLMeasuredOuputBelongsTo |
		//DSLGaugeBelongsTo | DSLProbeBelongsTo
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DSLSensorBelongsTo
		public RuleCall getDSLSensorBelongsToParserRuleCall_0() { return cDSLSensorBelongsToParserRuleCall_0; }
		
		//DSLReferenceInputBelongsTo
		public RuleCall getDSLReferenceInputBelongsToParserRuleCall_1() { return cDSLReferenceInputBelongsToParserRuleCall_1; }
		
		//DSLEffectorBelongsTo
		public RuleCall getDSLEffectorBelongsToParserRuleCall_2() { return cDSLEffectorBelongsToParserRuleCall_2; }
		
		//DSLMonitorBelongsTo1
		public RuleCall getDSLMonitorBelongsTo1ParserRuleCall_3() { return cDSLMonitorBelongsTo1ParserRuleCall_3; }
		
		//DSLMonitorBelongsTo2
		public RuleCall getDSLMonitorBelongsTo2ParserRuleCall_4() { return cDSLMonitorBelongsTo2ParserRuleCall_4; }
		
		//DSLAnalyzerBelongsTo1
		public RuleCall getDSLAnalyzerBelongsTo1ParserRuleCall_5() { return cDSLAnalyzerBelongsTo1ParserRuleCall_5; }
		
		//DSLAnalyzerBelongsTo2
		public RuleCall getDSLAnalyzerBelongsTo2ParserRuleCall_6() { return cDSLAnalyzerBelongsTo2ParserRuleCall_6; }
		
		//DSLPlannerBelongsTo1
		public RuleCall getDSLPlannerBelongsTo1ParserRuleCall_7() { return cDSLPlannerBelongsTo1ParserRuleCall_7; }
		
		//DSLPlannerBelongsTo2
		public RuleCall getDSLPlannerBelongsTo2ParserRuleCall_8() { return cDSLPlannerBelongsTo2ParserRuleCall_8; }
		
		//DSLExecutorBelongsTo1
		public RuleCall getDSLExecutorBelongsTo1ParserRuleCall_9() { return cDSLExecutorBelongsTo1ParserRuleCall_9; }
		
		//DSLExecutorBelongsTo2
		public RuleCall getDSLExecutorBelongsTo2ParserRuleCall_10() { return cDSLExecutorBelongsTo2ParserRuleCall_10; }
		
		//DSLClBelongsTo1
		public RuleCall getDSLClBelongsTo1ParserRuleCall_11() { return cDSLClBelongsTo1ParserRuleCall_11; }
		
		//DSLClBelongsTo2
		public RuleCall getDSLClBelongsTo2ParserRuleCall_12() { return cDSLClBelongsTo2ParserRuleCall_12; }
		
		//DSLClmBelongsTo
		public RuleCall getDSLClmBelongsToParserRuleCall_13() { return cDSLClmBelongsToParserRuleCall_13; }
		
		//DSLMeasuredOuputBelongsTo
		public RuleCall getDSLMeasuredOuputBelongsToParserRuleCall_14() { return cDSLMeasuredOuputBelongsToParserRuleCall_14; }
		
		//DSLGaugeBelongsTo
		public RuleCall getDSLGaugeBelongsToParserRuleCall_15() { return cDSLGaugeBelongsToParserRuleCall_15; }
		
		//DSLProbeBelongsTo
		public RuleCall getDSLProbeBelongsToParserRuleCall_16() { return cDSLProbeBelongsToParserRuleCall_16; }
	}
	public class DSLRestrictionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLRestriction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cSensorKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cTAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cTDSLSensorCrossReference_0_1_0 = (CrossReference)cTAssignment_0_1.eContents().get(0);
		private final RuleCall cTDSLSensorIDTerminalRuleCall_0_1_0_1 = (RuleCall)cTDSLSensorCrossReference_0_1_0.eContents().get(1);
		private final Keyword cMustNotAccessProbeKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cTypeAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final CrossReference cTypeDSLProbeCrossReference_0_3_0 = (CrossReference)cTypeAssignment_0_3.eContents().get(0);
		private final RuleCall cTypeDSLProbeIDTerminalRuleCall_0_3_0_1 = (RuleCall)cTypeDSLProbeCrossReference_0_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cSensorKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cTDSLSensorCrossReference_1_1_0 = (CrossReference)cTAssignment_1_1.eContents().get(0);
		private final RuleCall cTDSLSensorIDTerminalRuleCall_1_1_0_1 = (RuleCall)cTDSLSensorCrossReference_1_1_0.eContents().get(1);
		private final Keyword cMustAccessProbeKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cTypeAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final CrossReference cTypeDSLProbeCrossReference_1_3_0 = (CrossReference)cTypeAssignment_1_3.eContents().get(0);
		private final RuleCall cTypeDSLProbeIDTerminalRuleCall_1_3_0_1 = (RuleCall)cTypeDSLProbeCrossReference_1_3_0.eContents().get(1);
		private final Keyword cThroughInterfaceKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cProbeinterfaceAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final CrossReference cProbeinterfaceProbeInterfaceCrossReference_1_5_0 = (CrossReference)cProbeinterfaceAssignment_1_5.eContents().get(0);
		private final RuleCall cProbeinterfaceProbeInterfaceIDTerminalRuleCall_1_5_0_1 = (RuleCall)cProbeinterfaceProbeInterfaceCrossReference_1_5_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cAnalyzerKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cTDSLAnalyzerCrossReference_2_1_0 = (CrossReference)cTAssignment_2_1.eContents().get(0);
		private final RuleCall cTDSLAnalyzerIDTerminalRuleCall_2_1_0_1 = (RuleCall)cTDSLAnalyzerCrossReference_2_1_0.eContents().get(1);
		private final Keyword cMustNotAccessMonitorKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cTypeAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final CrossReference cTypeDSLMonitorCrossReference_2_3_0 = (CrossReference)cTypeAssignment_2_3.eContents().get(0);
		private final RuleCall cTypeDSLMonitorIDTerminalRuleCall_2_3_0_1 = (RuleCall)cTypeDSLMonitorCrossReference_2_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cAnalyzerKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cTDSLAnalyzerCrossReference_3_1_0 = (CrossReference)cTAssignment_3_1.eContents().get(0);
		private final RuleCall cTDSLAnalyzerIDTerminalRuleCall_3_1_0_1 = (RuleCall)cTDSLAnalyzerCrossReference_3_1_0.eContents().get(1);
		private final Keyword cMustAccessMonitorKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cTypeAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final CrossReference cTypeDSLMonitorCrossReference_3_3_0 = (CrossReference)cTypeAssignment_3_3.eContents().get(0);
		private final RuleCall cTypeDSLMonitorIDTerminalRuleCall_3_3_0_1 = (RuleCall)cTypeDSLMonitorCrossReference_3_3_0.eContents().get(1);
		private final Keyword cThroughInterfaceKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Assignment cInterfaceAssignment_3_5 = (Assignment)cGroup_3.eContents().get(5);
		private final CrossReference cInterfaceMonitorInterfaceCrossReference_3_5_0 = (CrossReference)cInterfaceAssignment_3_5.eContents().get(0);
		private final RuleCall cInterfaceMonitorInterfaceIDTerminalRuleCall_3_5_0_1 = (RuleCall)cInterfaceMonitorInterfaceCrossReference_3_5_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3_6 = (Keyword)cGroup_3.eContents().get(6);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cAnalyzerKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cTDSLAnalyzerCrossReference_4_1_0 = (CrossReference)cTAssignment_4_1.eContents().get(0);
		private final RuleCall cTDSLAnalyzerIDTerminalRuleCall_4_1_0_1 = (RuleCall)cTDSLAnalyzerCrossReference_4_1_0.eContents().get(1);
		private final Keyword cMustNotAccessPlannerKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cTypeAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final CrossReference cTypeDSLPlannerCrossReference_4_3_0 = (CrossReference)cTypeAssignment_4_3.eContents().get(0);
		private final RuleCall cTypeDSLPlannerIDTerminalRuleCall_4_3_0_1 = (RuleCall)cTypeDSLPlannerCrossReference_4_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cAnalyzerKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cTAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cTDSLAnalyzerCrossReference_5_1_0 = (CrossReference)cTAssignment_5_1.eContents().get(0);
		private final RuleCall cTDSLAnalyzerIDTerminalRuleCall_5_1_0_1 = (RuleCall)cTDSLAnalyzerCrossReference_5_1_0.eContents().get(1);
		private final Keyword cMustAccessPlannerKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Assignment cTypeAssignment_5_3 = (Assignment)cGroup_5.eContents().get(3);
		private final CrossReference cTypeDSLPlannerCrossReference_5_3_0 = (CrossReference)cTypeAssignment_5_3.eContents().get(0);
		private final RuleCall cTypeDSLPlannerIDTerminalRuleCall_5_3_0_1 = (RuleCall)cTypeDSLPlannerCrossReference_5_3_0.eContents().get(1);
		private final Keyword cThroughInterfaceKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Assignment cInterfaceAssignment_5_5 = (Assignment)cGroup_5.eContents().get(5);
		private final CrossReference cInterfacePlannerInterfaceCrossReference_5_5_0 = (CrossReference)cInterfaceAssignment_5_5.eContents().get(0);
		private final RuleCall cInterfacePlannerInterfaceIDTerminalRuleCall_5_5_0_1 = (RuleCall)cInterfacePlannerInterfaceCrossReference_5_5_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_5_6 = (Keyword)cGroup_5.eContents().get(6);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Keyword cAnalyzerKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cTAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final CrossReference cTDSLAnalyzerCrossReference_6_1_0 = (CrossReference)cTAssignment_6_1.eContents().get(0);
		private final RuleCall cTDSLAnalyzerIDTerminalRuleCall_6_1_0_1 = (RuleCall)cTDSLAnalyzerCrossReference_6_1_0.eContents().get(1);
		private final Keyword cMustNotAccessExecutorKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Assignment cTypeAssignment_6_3 = (Assignment)cGroup_6.eContents().get(3);
		private final CrossReference cTypeDSLExecutorCrossReference_6_3_0 = (CrossReference)cTypeAssignment_6_3.eContents().get(0);
		private final RuleCall cTypeDSLExecutorIDTerminalRuleCall_6_3_0_1 = (RuleCall)cTypeDSLExecutorCrossReference_6_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Keyword cAnalyzerKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cTAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final CrossReference cTDSLAnalyzerCrossReference_7_1_0 = (CrossReference)cTAssignment_7_1.eContents().get(0);
		private final RuleCall cTDSLAnalyzerIDTerminalRuleCall_7_1_0_1 = (RuleCall)cTDSLAnalyzerCrossReference_7_1_0.eContents().get(1);
		private final Keyword cMustAccessExecutorKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		private final Assignment cTypeAssignment_7_3 = (Assignment)cGroup_7.eContents().get(3);
		private final CrossReference cTypeDSLExecutorCrossReference_7_3_0 = (CrossReference)cTypeAssignment_7_3.eContents().get(0);
		private final RuleCall cTypeDSLExecutorIDTerminalRuleCall_7_3_0_1 = (RuleCall)cTypeDSLExecutorCrossReference_7_3_0.eContents().get(1);
		private final Keyword cThroughInterfaceKeyword_7_4 = (Keyword)cGroup_7.eContents().get(4);
		private final Assignment cInterfaceAssignment_7_5 = (Assignment)cGroup_7.eContents().get(5);
		private final CrossReference cInterfaceExecutorInterfaceCrossReference_7_5_0 = (CrossReference)cInterfaceAssignment_7_5.eContents().get(0);
		private final RuleCall cInterfaceExecutorInterfaceIDTerminalRuleCall_7_5_0_1 = (RuleCall)cInterfaceExecutorInterfaceCrossReference_7_5_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_7_6 = (Keyword)cGroup_7.eContents().get(6);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Keyword cPlannerKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cTAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final CrossReference cTDSLPlannerCrossReference_8_1_0 = (CrossReference)cTAssignment_8_1.eContents().get(0);
		private final RuleCall cTDSLPlannerIDTerminalRuleCall_8_1_0_1 = (RuleCall)cTDSLPlannerCrossReference_8_1_0.eContents().get(1);
		private final Keyword cMustNotAccessExecutorKeyword_8_2 = (Keyword)cGroup_8.eContents().get(2);
		private final Assignment cTypeAssignment_8_3 = (Assignment)cGroup_8.eContents().get(3);
		private final CrossReference cTypeDSLExecutorCrossReference_8_3_0 = (CrossReference)cTypeAssignment_8_3.eContents().get(0);
		private final RuleCall cTypeDSLExecutorIDTerminalRuleCall_8_3_0_1 = (RuleCall)cTypeDSLExecutorCrossReference_8_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_8_4 = (Keyword)cGroup_8.eContents().get(4);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Keyword cPlannerKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cTAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final CrossReference cTDSLPlannerCrossReference_9_1_0 = (CrossReference)cTAssignment_9_1.eContents().get(0);
		private final RuleCall cTDSLPlannerIDTerminalRuleCall_9_1_0_1 = (RuleCall)cTDSLPlannerCrossReference_9_1_0.eContents().get(1);
		private final Keyword cMustAccessExecutorKeyword_9_2 = (Keyword)cGroup_9.eContents().get(2);
		private final Assignment cTypeAssignment_9_3 = (Assignment)cGroup_9.eContents().get(3);
		private final CrossReference cTypeDSLExecutorCrossReference_9_3_0 = (CrossReference)cTypeAssignment_9_3.eContents().get(0);
		private final RuleCall cTypeDSLExecutorIDTerminalRuleCall_9_3_0_1 = (RuleCall)cTypeDSLExecutorCrossReference_9_3_0.eContents().get(1);
		private final Keyword cThroughInterfaceKeyword_9_4 = (Keyword)cGroup_9.eContents().get(4);
		private final Assignment cInterfaceAssignment_9_5 = (Assignment)cGroup_9.eContents().get(5);
		private final CrossReference cInterfaceExecutorInterfaceCrossReference_9_5_0 = (CrossReference)cInterfaceAssignment_9_5.eContents().get(0);
		private final RuleCall cInterfaceExecutorInterfaceIDTerminalRuleCall_9_5_0_1 = (RuleCall)cInterfaceExecutorInterfaceCrossReference_9_5_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_9_6 = (Keyword)cGroup_9.eContents().get(6);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final Keyword cAnalyzerKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cTAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final CrossReference cTDSLAnalyzerCrossReference_10_1_0 = (CrossReference)cTAssignment_10_1.eContents().get(0);
		private final RuleCall cTDSLAnalyzerIDTerminalRuleCall_10_1_0_1 = (RuleCall)cTDSLAnalyzerCrossReference_10_1_0.eContents().get(1);
		private final Keyword cMustNotAccessKnowledgeKeyword_10_2 = (Keyword)cGroup_10.eContents().get(2);
		private final Assignment cTypeAssignment_10_3 = (Assignment)cGroup_10.eContents().get(3);
		private final CrossReference cTypeDSLKnowledgeCrossReference_10_3_0 = (CrossReference)cTypeAssignment_10_3.eContents().get(0);
		private final RuleCall cTypeDSLKnowledgeIDTerminalRuleCall_10_3_0_1 = (RuleCall)cTypeDSLKnowledgeCrossReference_10_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_10_4 = (Keyword)cGroup_10.eContents().get(4);
		private final Group cGroup_11 = (Group)cAlternatives.eContents().get(11);
		private final Keyword cAnalyzerKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Assignment cTAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final CrossReference cTDSLAnalyzerCrossReference_11_1_0 = (CrossReference)cTAssignment_11_1.eContents().get(0);
		private final RuleCall cTDSLAnalyzerIDTerminalRuleCall_11_1_0_1 = (RuleCall)cTDSLAnalyzerCrossReference_11_1_0.eContents().get(1);
		private final Keyword cMustAccessKnowledgeKeyword_11_2 = (Keyword)cGroup_11.eContents().get(2);
		private final Assignment cTypeAssignment_11_3 = (Assignment)cGroup_11.eContents().get(3);
		private final CrossReference cTypeDSLKnowledgeCrossReference_11_3_0 = (CrossReference)cTypeAssignment_11_3.eContents().get(0);
		private final RuleCall cTypeDSLKnowledgeIDTerminalRuleCall_11_3_0_1 = (RuleCall)cTypeDSLKnowledgeCrossReference_11_3_0.eContents().get(1);
		private final Keyword cThroughInterfaceKeyword_11_4 = (Keyword)cGroup_11.eContents().get(4);
		private final Assignment cInterfaceAssignment_11_5 = (Assignment)cGroup_11.eContents().get(5);
		private final CrossReference cInterfaceKnowledgeInterfaceCrossReference_11_5_0 = (CrossReference)cInterfaceAssignment_11_5.eContents().get(0);
		private final RuleCall cInterfaceKnowledgeInterfaceIDTerminalRuleCall_11_5_0_1 = (RuleCall)cInterfaceKnowledgeInterfaceCrossReference_11_5_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_11_6 = (Keyword)cGroup_11.eContents().get(6);
		private final Group cGroup_12 = (Group)cAlternatives.eContents().get(12);
		private final Keyword cPlannerKeyword_12_0 = (Keyword)cGroup_12.eContents().get(0);
		private final Assignment cTAssignment_12_1 = (Assignment)cGroup_12.eContents().get(1);
		private final CrossReference cTDSLPlannerCrossReference_12_1_0 = (CrossReference)cTAssignment_12_1.eContents().get(0);
		private final RuleCall cTDSLPlannerIDTerminalRuleCall_12_1_0_1 = (RuleCall)cTDSLPlannerCrossReference_12_1_0.eContents().get(1);
		private final Keyword cMustNotAccessKnowledgeKeyword_12_2 = (Keyword)cGroup_12.eContents().get(2);
		private final Assignment cTypeAssignment_12_3 = (Assignment)cGroup_12.eContents().get(3);
		private final CrossReference cTypeDSLKnowledgeCrossReference_12_3_0 = (CrossReference)cTypeAssignment_12_3.eContents().get(0);
		private final RuleCall cTypeDSLKnowledgeIDTerminalRuleCall_12_3_0_1 = (RuleCall)cTypeDSLKnowledgeCrossReference_12_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_12_4 = (Keyword)cGroup_12.eContents().get(4);
		private final Group cGroup_13 = (Group)cAlternatives.eContents().get(13);
		private final Keyword cPlannerKeyword_13_0 = (Keyword)cGroup_13.eContents().get(0);
		private final Assignment cTAssignment_13_1 = (Assignment)cGroup_13.eContents().get(1);
		private final CrossReference cTDSLPlannerCrossReference_13_1_0 = (CrossReference)cTAssignment_13_1.eContents().get(0);
		private final RuleCall cTDSLPlannerIDTerminalRuleCall_13_1_0_1 = (RuleCall)cTDSLPlannerCrossReference_13_1_0.eContents().get(1);
		private final Keyword cMustAccessKnowledgeKeyword_13_2 = (Keyword)cGroup_13.eContents().get(2);
		private final Assignment cTypeAssignment_13_3 = (Assignment)cGroup_13.eContents().get(3);
		private final CrossReference cTypeDSLKnowledgeCrossReference_13_3_0 = (CrossReference)cTypeAssignment_13_3.eContents().get(0);
		private final RuleCall cTypeDSLKnowledgeIDTerminalRuleCall_13_3_0_1 = (RuleCall)cTypeDSLKnowledgeCrossReference_13_3_0.eContents().get(1);
		private final Keyword cThroughInterfaceKeyword_13_4 = (Keyword)cGroup_13.eContents().get(4);
		private final Assignment cInterfaceAssignment_13_5 = (Assignment)cGroup_13.eContents().get(5);
		private final CrossReference cInterfaceKnowledgeInterfaceCrossReference_13_5_0 = (CrossReference)cInterfaceAssignment_13_5.eContents().get(0);
		private final RuleCall cInterfaceKnowledgeInterfaceIDTerminalRuleCall_13_5_0_1 = (RuleCall)cInterfaceKnowledgeInterfaceCrossReference_13_5_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_13_6 = (Keyword)cGroup_13.eContents().get(6);
		private final Group cGroup_14 = (Group)cAlternatives.eContents().get(14);
		private final Keyword cEffectorKeyword_14_0 = (Keyword)cGroup_14.eContents().get(0);
		private final Assignment cTAssignment_14_1 = (Assignment)cGroup_14.eContents().get(1);
		private final CrossReference cTDSLEffectorCrossReference_14_1_0 = (CrossReference)cTAssignment_14_1.eContents().get(0);
		private final RuleCall cTDSLEffectorIDTerminalRuleCall_14_1_0_1 = (RuleCall)cTDSLEffectorCrossReference_14_1_0.eContents().get(1);
		private final Keyword cMustNotAccessGaugeKeyword_14_2 = (Keyword)cGroup_14.eContents().get(2);
		private final Assignment cTypeAssignment_14_3 = (Assignment)cGroup_14.eContents().get(3);
		private final CrossReference cTypeDSLGaugeCrossReference_14_3_0 = (CrossReference)cTypeAssignment_14_3.eContents().get(0);
		private final RuleCall cTypeDSLGaugeIDTerminalRuleCall_14_3_0_1 = (RuleCall)cTypeDSLGaugeCrossReference_14_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_14_4 = (Keyword)cGroup_14.eContents().get(4);
		private final Group cGroup_15 = (Group)cAlternatives.eContents().get(15);
		private final Keyword cEffectorKeyword_15_0 = (Keyword)cGroup_15.eContents().get(0);
		private final Assignment cTAssignment_15_1 = (Assignment)cGroup_15.eContents().get(1);
		private final CrossReference cTDSLEffectorCrossReference_15_1_0 = (CrossReference)cTAssignment_15_1.eContents().get(0);
		private final RuleCall cTDSLEffectorIDTerminalRuleCall_15_1_0_1 = (RuleCall)cTDSLEffectorCrossReference_15_1_0.eContents().get(1);
		private final Keyword cMustAccessGaugeKeyword_15_2 = (Keyword)cGroup_15.eContents().get(2);
		private final Assignment cTypeAssignment_15_3 = (Assignment)cGroup_15.eContents().get(3);
		private final CrossReference cTypeDSLGaugeCrossReference_15_3_0 = (CrossReference)cTypeAssignment_15_3.eContents().get(0);
		private final RuleCall cTypeDSLGaugeIDTerminalRuleCall_15_3_0_1 = (RuleCall)cTypeDSLGaugeCrossReference_15_3_0.eContents().get(1);
		private final Keyword cThroughInterfaceKeyword_15_4 = (Keyword)cGroup_15.eContents().get(4);
		private final Assignment cInterfaceAssignment_15_5 = (Assignment)cGroup_15.eContents().get(5);
		private final CrossReference cInterfaceGaugeInterfaceCrossReference_15_5_0 = (CrossReference)cInterfaceAssignment_15_5.eContents().get(0);
		private final RuleCall cInterfaceGaugeInterfaceIDTerminalRuleCall_15_5_0_1 = (RuleCall)cInterfaceGaugeInterfaceCrossReference_15_5_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_15_6 = (Keyword)cGroup_15.eContents().get(6);
		private final Group cGroup_16 = (Group)cAlternatives.eContents().get(16);
		private final Keyword cManagingKeyword_16_0 = (Keyword)cGroup_16.eContents().get(0);
		private final Assignment cTAssignment_16_1 = (Assignment)cGroup_16.eContents().get(1);
		private final CrossReference cTDSLManagingCrossReference_16_1_0 = (CrossReference)cTAssignment_16_1.eContents().get(0);
		private final RuleCall cTDSLManagingIDTerminalRuleCall_16_1_0_1 = (RuleCall)cTDSLManagingCrossReference_16_1_0.eContents().get(1);
		private final Keyword cMustNotAccessManagedKeyword_16_2 = (Keyword)cGroup_16.eContents().get(2);
		private final Assignment cTypeAssignment_16_3 = (Assignment)cGroup_16.eContents().get(3);
		private final CrossReference cTypeDSLManagedCrossReference_16_3_0 = (CrossReference)cTypeAssignment_16_3.eContents().get(0);
		private final RuleCall cTypeDSLManagedIDTerminalRuleCall_16_3_0_1 = (RuleCall)cTypeDSLManagedCrossReference_16_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_16_4 = (Keyword)cGroup_16.eContents().get(4);
		private final Group cGroup_17 = (Group)cAlternatives.eContents().get(17);
		private final Keyword cManagingKeyword_17_0 = (Keyword)cGroup_17.eContents().get(0);
		private final Assignment cTAssignment_17_1 = (Assignment)cGroup_17.eContents().get(1);
		private final CrossReference cTDSLManagingCrossReference_17_1_0 = (CrossReference)cTAssignment_17_1.eContents().get(0);
		private final RuleCall cTDSLManagingIDTerminalRuleCall_17_1_0_1 = (RuleCall)cTDSLManagingCrossReference_17_1_0.eContents().get(1);
		private final Keyword cMustAccessManagedKeyword_17_2 = (Keyword)cGroup_17.eContents().get(2);
		private final Assignment cTypeAssignment_17_3 = (Assignment)cGroup_17.eContents().get(3);
		private final CrossReference cTypeDSLManagedCrossReference_17_3_0 = (CrossReference)cTypeAssignment_17_3.eContents().get(0);
		private final RuleCall cTypeDSLManagedIDTerminalRuleCall_17_3_0_1 = (RuleCall)cTypeDSLManagedCrossReference_17_3_0.eContents().get(1);
		private final Keyword cThroughInterfaceKeyword_17_4 = (Keyword)cGroup_17.eContents().get(4);
		private final Assignment cInterfaceAssignment_17_5 = (Assignment)cGroup_17.eContents().get(5);
		private final CrossReference cInterfaceManagedInterfaceCrossReference_17_5_0 = (CrossReference)cInterfaceAssignment_17_5.eContents().get(0);
		private final RuleCall cInterfaceManagedInterfaceIDTerminalRuleCall_17_5_0_1 = (RuleCall)cInterfaceManagedInterfaceCrossReference_17_5_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_17_6 = (Keyword)cGroup_17.eContents().get(6);
		
		//DSLRestriction:
		//	'sensor' t=[DSLSensor] 'must-not-access-probe' type=[DSLProbe] ';' | 'sensor' t=[DSLSensor] 'must-access-probe'
		//	type=[DSLProbe] 'through-interface' probeinterface=[ProbeInterface] ';' | 'analyzer' t=[DSLAnalyzer]
		//	'must-not-access-monitor' type=[DSLMonitor] ';' | 'analyzer' t=[DSLAnalyzer] 'must-access-monitor' type=[DSLMonitor]
		//	'through-interface' interface=[MonitorInterface] ';' | 'analyzer' t=[DSLAnalyzer] 'must-not-access-planner'
		//	type=[DSLPlanner] ';' | 'analyzer' t=[DSLAnalyzer] 'must-access-planner' type=[DSLPlanner] 'through-interface'
		//	interface=[PlannerInterface] ';' | 'analyzer' t=[DSLAnalyzer] 'must-not-access-executor' type=[DSLExecutor] ';' |
		//	'analyzer' t=[DSLAnalyzer] 'must-access-executor' type=[DSLExecutor] 'through-interface' interface=[ExecutorInterface]
		//	';' | 'planner' t=[DSLPlanner] 'must-not-access-executor' type=[DSLExecutor] ';' | 'planner' t=[DSLPlanner]
		//	'must-access-executor' type=[DSLExecutor] 'through-interface' interface=[ExecutorInterface] ';' | 'analyzer'
		//	t=[DSLAnalyzer] 'must-not-access-knowledge' type=[DSLKnowledge] ';' | 'analyzer' t=[DSLAnalyzer]
		//	'must-access-knowledge' type=[DSLKnowledge] 'through-interface' interface=[KnowledgeInterface] ';' | 'planner'
		//	t=[DSLPlanner] 'must-not-access-knowledge' type=[DSLKnowledge] ';' | 'planner' t=[DSLPlanner] 'must-access-knowledge'
		//	type=[DSLKnowledge] 'through-interface' interface=[KnowledgeInterface] ';' | 'effector' t=[DSLEffector]
		//	'must-not-access-gauge' type=[DSLGauge] ';' | 'effector' t=[DSLEffector] 'must-access-gauge' type=[DSLGauge]
		//	'through-interface' interface=[GaugeInterface] ';' | 'managing' t=[DSLManaging] 'must-not-access-managed'
		//	type=[DSLManaged] ';' | 'managing' t=[DSLManaging] 'must-access-managed' type=[DSLManaged] 'through-interface'
		//	interface=[ManagedInterface] ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'sensor' t=[DSLSensor] 'must-not-access-probe' type=[DSLProbe] ';' | 'sensor' t=[DSLSensor] 'must-access-probe'
		//type=[DSLProbe] 'through-interface' probeinterface=[ProbeInterface] ';' | 'analyzer' t=[DSLAnalyzer]
		//'must-not-access-monitor' type=[DSLMonitor] ';' | 'analyzer' t=[DSLAnalyzer] 'must-access-monitor' type=[DSLMonitor]
		//'through-interface' interface=[MonitorInterface] ';' | 'analyzer' t=[DSLAnalyzer] 'must-not-access-planner'
		//type=[DSLPlanner] ';' | 'analyzer' t=[DSLAnalyzer] 'must-access-planner' type=[DSLPlanner] 'through-interface'
		//interface=[PlannerInterface] ';' | 'analyzer' t=[DSLAnalyzer] 'must-not-access-executor' type=[DSLExecutor] ';' |
		//'analyzer' t=[DSLAnalyzer] 'must-access-executor' type=[DSLExecutor] 'through-interface' interface=[ExecutorInterface]
		//';' | 'planner' t=[DSLPlanner] 'must-not-access-executor' type=[DSLExecutor] ';' | 'planner' t=[DSLPlanner]
		//'must-access-executor' type=[DSLExecutor] 'through-interface' interface=[ExecutorInterface] ';' | 'analyzer'
		//t=[DSLAnalyzer] 'must-not-access-knowledge' type=[DSLKnowledge] ';' | 'analyzer' t=[DSLAnalyzer]
		//'must-access-knowledge' type=[DSLKnowledge] 'through-interface' interface=[KnowledgeInterface] ';' | 'planner'
		//t=[DSLPlanner] 'must-not-access-knowledge' type=[DSLKnowledge] ';' | 'planner' t=[DSLPlanner] 'must-access-knowledge'
		//type=[DSLKnowledge] 'through-interface' interface=[KnowledgeInterface] ';' | 'effector' t=[DSLEffector]
		//'must-not-access-gauge' type=[DSLGauge] ';' | 'effector' t=[DSLEffector] 'must-access-gauge' type=[DSLGauge]
		//'through-interface' interface=[GaugeInterface] ';' | 'managing' t=[DSLManaging] 'must-not-access-managed'
		//type=[DSLManaged] ';' | 'managing' t=[DSLManaging] 'must-access-managed' type=[DSLManaged] 'through-interface'
		//interface=[ManagedInterface] ';'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'sensor' t=[DSLSensor] 'must-not-access-probe' type=[DSLProbe] ';'
		public Group getGroup_0() { return cGroup_0; }
		
		//'sensor'
		public Keyword getSensorKeyword_0_0() { return cSensorKeyword_0_0; }
		
		//t=[DSLSensor]
		public Assignment getTAssignment_0_1() { return cTAssignment_0_1; }
		
		//[DSLSensor]
		public CrossReference getTDSLSensorCrossReference_0_1_0() { return cTDSLSensorCrossReference_0_1_0; }
		
		//ID
		public RuleCall getTDSLSensorIDTerminalRuleCall_0_1_0_1() { return cTDSLSensorIDTerminalRuleCall_0_1_0_1; }
		
		//'must-not-access-probe'
		public Keyword getMustNotAccessProbeKeyword_0_2() { return cMustNotAccessProbeKeyword_0_2; }
		
		//type=[DSLProbe]
		public Assignment getTypeAssignment_0_3() { return cTypeAssignment_0_3; }
		
		//[DSLProbe]
		public CrossReference getTypeDSLProbeCrossReference_0_3_0() { return cTypeDSLProbeCrossReference_0_3_0; }
		
		//ID
		public RuleCall getTypeDSLProbeIDTerminalRuleCall_0_3_0_1() { return cTypeDSLProbeIDTerminalRuleCall_0_3_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_0_4() { return cSemicolonKeyword_0_4; }
		
		//'sensor' t=[DSLSensor] 'must-access-probe' type=[DSLProbe] 'through-interface' probeinterface=[ProbeInterface] ';'
		public Group getGroup_1() { return cGroup_1; }
		
		//'sensor'
		public Keyword getSensorKeyword_1_0() { return cSensorKeyword_1_0; }
		
		//t=[DSLSensor]
		public Assignment getTAssignment_1_1() { return cTAssignment_1_1; }
		
		//[DSLSensor]
		public CrossReference getTDSLSensorCrossReference_1_1_0() { return cTDSLSensorCrossReference_1_1_0; }
		
		//ID
		public RuleCall getTDSLSensorIDTerminalRuleCall_1_1_0_1() { return cTDSLSensorIDTerminalRuleCall_1_1_0_1; }
		
		//'must-access-probe'
		public Keyword getMustAccessProbeKeyword_1_2() { return cMustAccessProbeKeyword_1_2; }
		
		//type=[DSLProbe]
		public Assignment getTypeAssignment_1_3() { return cTypeAssignment_1_3; }
		
		//[DSLProbe]
		public CrossReference getTypeDSLProbeCrossReference_1_3_0() { return cTypeDSLProbeCrossReference_1_3_0; }
		
		//ID
		public RuleCall getTypeDSLProbeIDTerminalRuleCall_1_3_0_1() { return cTypeDSLProbeIDTerminalRuleCall_1_3_0_1; }
		
		//'through-interface'
		public Keyword getThroughInterfaceKeyword_1_4() { return cThroughInterfaceKeyword_1_4; }
		
		//probeinterface=[ProbeInterface]
		public Assignment getProbeinterfaceAssignment_1_5() { return cProbeinterfaceAssignment_1_5; }
		
		//[ProbeInterface]
		public CrossReference getProbeinterfaceProbeInterfaceCrossReference_1_5_0() { return cProbeinterfaceProbeInterfaceCrossReference_1_5_0; }
		
		//ID
		public RuleCall getProbeinterfaceProbeInterfaceIDTerminalRuleCall_1_5_0_1() { return cProbeinterfaceProbeInterfaceIDTerminalRuleCall_1_5_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_1_6() { return cSemicolonKeyword_1_6; }
		
		//'analyzer' t=[DSLAnalyzer] 'must-not-access-monitor' type=[DSLMonitor] ';'
		public Group getGroup_2() { return cGroup_2; }
		
		//'analyzer'
		public Keyword getAnalyzerKeyword_2_0() { return cAnalyzerKeyword_2_0; }
		
		//t=[DSLAnalyzer]
		public Assignment getTAssignment_2_1() { return cTAssignment_2_1; }
		
		//[DSLAnalyzer]
		public CrossReference getTDSLAnalyzerCrossReference_2_1_0() { return cTDSLAnalyzerCrossReference_2_1_0; }
		
		//ID
		public RuleCall getTDSLAnalyzerIDTerminalRuleCall_2_1_0_1() { return cTDSLAnalyzerIDTerminalRuleCall_2_1_0_1; }
		
		//'must-not-access-monitor'
		public Keyword getMustNotAccessMonitorKeyword_2_2() { return cMustNotAccessMonitorKeyword_2_2; }
		
		//type=[DSLMonitor]
		public Assignment getTypeAssignment_2_3() { return cTypeAssignment_2_3; }
		
		//[DSLMonitor]
		public CrossReference getTypeDSLMonitorCrossReference_2_3_0() { return cTypeDSLMonitorCrossReference_2_3_0; }
		
		//ID
		public RuleCall getTypeDSLMonitorIDTerminalRuleCall_2_3_0_1() { return cTypeDSLMonitorIDTerminalRuleCall_2_3_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_2_4() { return cSemicolonKeyword_2_4; }
		
		//'analyzer' t=[DSLAnalyzer] 'must-access-monitor' type=[DSLMonitor] 'through-interface' interface=[MonitorInterface] ';'
		public Group getGroup_3() { return cGroup_3; }
		
		//'analyzer'
		public Keyword getAnalyzerKeyword_3_0() { return cAnalyzerKeyword_3_0; }
		
		//t=[DSLAnalyzer]
		public Assignment getTAssignment_3_1() { return cTAssignment_3_1; }
		
		//[DSLAnalyzer]
		public CrossReference getTDSLAnalyzerCrossReference_3_1_0() { return cTDSLAnalyzerCrossReference_3_1_0; }
		
		//ID
		public RuleCall getTDSLAnalyzerIDTerminalRuleCall_3_1_0_1() { return cTDSLAnalyzerIDTerminalRuleCall_3_1_0_1; }
		
		//'must-access-monitor'
		public Keyword getMustAccessMonitorKeyword_3_2() { return cMustAccessMonitorKeyword_3_2; }
		
		//type=[DSLMonitor]
		public Assignment getTypeAssignment_3_3() { return cTypeAssignment_3_3; }
		
		//[DSLMonitor]
		public CrossReference getTypeDSLMonitorCrossReference_3_3_0() { return cTypeDSLMonitorCrossReference_3_3_0; }
		
		//ID
		public RuleCall getTypeDSLMonitorIDTerminalRuleCall_3_3_0_1() { return cTypeDSLMonitorIDTerminalRuleCall_3_3_0_1; }
		
		//'through-interface'
		public Keyword getThroughInterfaceKeyword_3_4() { return cThroughInterfaceKeyword_3_4; }
		
		//interface=[MonitorInterface]
		public Assignment getInterfaceAssignment_3_5() { return cInterfaceAssignment_3_5; }
		
		//[MonitorInterface]
		public CrossReference getInterfaceMonitorInterfaceCrossReference_3_5_0() { return cInterfaceMonitorInterfaceCrossReference_3_5_0; }
		
		//ID
		public RuleCall getInterfaceMonitorInterfaceIDTerminalRuleCall_3_5_0_1() { return cInterfaceMonitorInterfaceIDTerminalRuleCall_3_5_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_3_6() { return cSemicolonKeyword_3_6; }
		
		//'analyzer' t=[DSLAnalyzer] 'must-not-access-planner' type=[DSLPlanner] ';'
		public Group getGroup_4() { return cGroup_4; }
		
		//'analyzer'
		public Keyword getAnalyzerKeyword_4_0() { return cAnalyzerKeyword_4_0; }
		
		//t=[DSLAnalyzer]
		public Assignment getTAssignment_4_1() { return cTAssignment_4_1; }
		
		//[DSLAnalyzer]
		public CrossReference getTDSLAnalyzerCrossReference_4_1_0() { return cTDSLAnalyzerCrossReference_4_1_0; }
		
		//ID
		public RuleCall getTDSLAnalyzerIDTerminalRuleCall_4_1_0_1() { return cTDSLAnalyzerIDTerminalRuleCall_4_1_0_1; }
		
		//'must-not-access-planner'
		public Keyword getMustNotAccessPlannerKeyword_4_2() { return cMustNotAccessPlannerKeyword_4_2; }
		
		//type=[DSLPlanner]
		public Assignment getTypeAssignment_4_3() { return cTypeAssignment_4_3; }
		
		//[DSLPlanner]
		public CrossReference getTypeDSLPlannerCrossReference_4_3_0() { return cTypeDSLPlannerCrossReference_4_3_0; }
		
		//ID
		public RuleCall getTypeDSLPlannerIDTerminalRuleCall_4_3_0_1() { return cTypeDSLPlannerIDTerminalRuleCall_4_3_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_4_4() { return cSemicolonKeyword_4_4; }
		
		//'analyzer' t=[DSLAnalyzer] 'must-access-planner' type=[DSLPlanner] 'through-interface' interface=[PlannerInterface] ';'
		public Group getGroup_5() { return cGroup_5; }
		
		//'analyzer'
		public Keyword getAnalyzerKeyword_5_0() { return cAnalyzerKeyword_5_0; }
		
		//t=[DSLAnalyzer]
		public Assignment getTAssignment_5_1() { return cTAssignment_5_1; }
		
		//[DSLAnalyzer]
		public CrossReference getTDSLAnalyzerCrossReference_5_1_0() { return cTDSLAnalyzerCrossReference_5_1_0; }
		
		//ID
		public RuleCall getTDSLAnalyzerIDTerminalRuleCall_5_1_0_1() { return cTDSLAnalyzerIDTerminalRuleCall_5_1_0_1; }
		
		//'must-access-planner'
		public Keyword getMustAccessPlannerKeyword_5_2() { return cMustAccessPlannerKeyword_5_2; }
		
		//type=[DSLPlanner]
		public Assignment getTypeAssignment_5_3() { return cTypeAssignment_5_3; }
		
		//[DSLPlanner]
		public CrossReference getTypeDSLPlannerCrossReference_5_3_0() { return cTypeDSLPlannerCrossReference_5_3_0; }
		
		//ID
		public RuleCall getTypeDSLPlannerIDTerminalRuleCall_5_3_0_1() { return cTypeDSLPlannerIDTerminalRuleCall_5_3_0_1; }
		
		//'through-interface'
		public Keyword getThroughInterfaceKeyword_5_4() { return cThroughInterfaceKeyword_5_4; }
		
		//interface=[PlannerInterface]
		public Assignment getInterfaceAssignment_5_5() { return cInterfaceAssignment_5_5; }
		
		//[PlannerInterface]
		public CrossReference getInterfacePlannerInterfaceCrossReference_5_5_0() { return cInterfacePlannerInterfaceCrossReference_5_5_0; }
		
		//ID
		public RuleCall getInterfacePlannerInterfaceIDTerminalRuleCall_5_5_0_1() { return cInterfacePlannerInterfaceIDTerminalRuleCall_5_5_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_5_6() { return cSemicolonKeyword_5_6; }
		
		//'analyzer' t=[DSLAnalyzer] 'must-not-access-executor' type=[DSLExecutor] ';'
		public Group getGroup_6() { return cGroup_6; }
		
		//'analyzer'
		public Keyword getAnalyzerKeyword_6_0() { return cAnalyzerKeyword_6_0; }
		
		//t=[DSLAnalyzer]
		public Assignment getTAssignment_6_1() { return cTAssignment_6_1; }
		
		//[DSLAnalyzer]
		public CrossReference getTDSLAnalyzerCrossReference_6_1_0() { return cTDSLAnalyzerCrossReference_6_1_0; }
		
		//ID
		public RuleCall getTDSLAnalyzerIDTerminalRuleCall_6_1_0_1() { return cTDSLAnalyzerIDTerminalRuleCall_6_1_0_1; }
		
		//'must-not-access-executor'
		public Keyword getMustNotAccessExecutorKeyword_6_2() { return cMustNotAccessExecutorKeyword_6_2; }
		
		//type=[DSLExecutor]
		public Assignment getTypeAssignment_6_3() { return cTypeAssignment_6_3; }
		
		//[DSLExecutor]
		public CrossReference getTypeDSLExecutorCrossReference_6_3_0() { return cTypeDSLExecutorCrossReference_6_3_0; }
		
		//ID
		public RuleCall getTypeDSLExecutorIDTerminalRuleCall_6_3_0_1() { return cTypeDSLExecutorIDTerminalRuleCall_6_3_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_6_4() { return cSemicolonKeyword_6_4; }
		
		//'analyzer' t=[DSLAnalyzer] 'must-access-executor' type=[DSLExecutor] 'through-interface' interface=[ExecutorInterface]
		//';'
		public Group getGroup_7() { return cGroup_7; }
		
		//'analyzer'
		public Keyword getAnalyzerKeyword_7_0() { return cAnalyzerKeyword_7_0; }
		
		//t=[DSLAnalyzer]
		public Assignment getTAssignment_7_1() { return cTAssignment_7_1; }
		
		//[DSLAnalyzer]
		public CrossReference getTDSLAnalyzerCrossReference_7_1_0() { return cTDSLAnalyzerCrossReference_7_1_0; }
		
		//ID
		public RuleCall getTDSLAnalyzerIDTerminalRuleCall_7_1_0_1() { return cTDSLAnalyzerIDTerminalRuleCall_7_1_0_1; }
		
		//'must-access-executor'
		public Keyword getMustAccessExecutorKeyword_7_2() { return cMustAccessExecutorKeyword_7_2; }
		
		//type=[DSLExecutor]
		public Assignment getTypeAssignment_7_3() { return cTypeAssignment_7_3; }
		
		//[DSLExecutor]
		public CrossReference getTypeDSLExecutorCrossReference_7_3_0() { return cTypeDSLExecutorCrossReference_7_3_0; }
		
		//ID
		public RuleCall getTypeDSLExecutorIDTerminalRuleCall_7_3_0_1() { return cTypeDSLExecutorIDTerminalRuleCall_7_3_0_1; }
		
		//'through-interface'
		public Keyword getThroughInterfaceKeyword_7_4() { return cThroughInterfaceKeyword_7_4; }
		
		//interface=[ExecutorInterface]
		public Assignment getInterfaceAssignment_7_5() { return cInterfaceAssignment_7_5; }
		
		//[ExecutorInterface]
		public CrossReference getInterfaceExecutorInterfaceCrossReference_7_5_0() { return cInterfaceExecutorInterfaceCrossReference_7_5_0; }
		
		//ID
		public RuleCall getInterfaceExecutorInterfaceIDTerminalRuleCall_7_5_0_1() { return cInterfaceExecutorInterfaceIDTerminalRuleCall_7_5_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_7_6() { return cSemicolonKeyword_7_6; }
		
		//'planner' t=[DSLPlanner] 'must-not-access-executor' type=[DSLExecutor] ';'
		public Group getGroup_8() { return cGroup_8; }
		
		//'planner'
		public Keyword getPlannerKeyword_8_0() { return cPlannerKeyword_8_0; }
		
		//t=[DSLPlanner]
		public Assignment getTAssignment_8_1() { return cTAssignment_8_1; }
		
		//[DSLPlanner]
		public CrossReference getTDSLPlannerCrossReference_8_1_0() { return cTDSLPlannerCrossReference_8_1_0; }
		
		//ID
		public RuleCall getTDSLPlannerIDTerminalRuleCall_8_1_0_1() { return cTDSLPlannerIDTerminalRuleCall_8_1_0_1; }
		
		//'must-not-access-executor'
		public Keyword getMustNotAccessExecutorKeyword_8_2() { return cMustNotAccessExecutorKeyword_8_2; }
		
		//type=[DSLExecutor]
		public Assignment getTypeAssignment_8_3() { return cTypeAssignment_8_3; }
		
		//[DSLExecutor]
		public CrossReference getTypeDSLExecutorCrossReference_8_3_0() { return cTypeDSLExecutorCrossReference_8_3_0; }
		
		//ID
		public RuleCall getTypeDSLExecutorIDTerminalRuleCall_8_3_0_1() { return cTypeDSLExecutorIDTerminalRuleCall_8_3_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_8_4() { return cSemicolonKeyword_8_4; }
		
		//'planner' t=[DSLPlanner] 'must-access-executor' type=[DSLExecutor] 'through-interface' interface=[ExecutorInterface] ';'
		public Group getGroup_9() { return cGroup_9; }
		
		//'planner'
		public Keyword getPlannerKeyword_9_0() { return cPlannerKeyword_9_0; }
		
		//t=[DSLPlanner]
		public Assignment getTAssignment_9_1() { return cTAssignment_9_1; }
		
		//[DSLPlanner]
		public CrossReference getTDSLPlannerCrossReference_9_1_0() { return cTDSLPlannerCrossReference_9_1_0; }
		
		//ID
		public RuleCall getTDSLPlannerIDTerminalRuleCall_9_1_0_1() { return cTDSLPlannerIDTerminalRuleCall_9_1_0_1; }
		
		//'must-access-executor'
		public Keyword getMustAccessExecutorKeyword_9_2() { return cMustAccessExecutorKeyword_9_2; }
		
		//type=[DSLExecutor]
		public Assignment getTypeAssignment_9_3() { return cTypeAssignment_9_3; }
		
		//[DSLExecutor]
		public CrossReference getTypeDSLExecutorCrossReference_9_3_0() { return cTypeDSLExecutorCrossReference_9_3_0; }
		
		//ID
		public RuleCall getTypeDSLExecutorIDTerminalRuleCall_9_3_0_1() { return cTypeDSLExecutorIDTerminalRuleCall_9_3_0_1; }
		
		//'through-interface'
		public Keyword getThroughInterfaceKeyword_9_4() { return cThroughInterfaceKeyword_9_4; }
		
		//interface=[ExecutorInterface]
		public Assignment getInterfaceAssignment_9_5() { return cInterfaceAssignment_9_5; }
		
		//[ExecutorInterface]
		public CrossReference getInterfaceExecutorInterfaceCrossReference_9_5_0() { return cInterfaceExecutorInterfaceCrossReference_9_5_0; }
		
		//ID
		public RuleCall getInterfaceExecutorInterfaceIDTerminalRuleCall_9_5_0_1() { return cInterfaceExecutorInterfaceIDTerminalRuleCall_9_5_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_9_6() { return cSemicolonKeyword_9_6; }
		
		//'analyzer' t=[DSLAnalyzer] 'must-not-access-knowledge' type=[DSLKnowledge] ';'
		public Group getGroup_10() { return cGroup_10; }
		
		//'analyzer'
		public Keyword getAnalyzerKeyword_10_0() { return cAnalyzerKeyword_10_0; }
		
		//t=[DSLAnalyzer]
		public Assignment getTAssignment_10_1() { return cTAssignment_10_1; }
		
		//[DSLAnalyzer]
		public CrossReference getTDSLAnalyzerCrossReference_10_1_0() { return cTDSLAnalyzerCrossReference_10_1_0; }
		
		//ID
		public RuleCall getTDSLAnalyzerIDTerminalRuleCall_10_1_0_1() { return cTDSLAnalyzerIDTerminalRuleCall_10_1_0_1; }
		
		//'must-not-access-knowledge'
		public Keyword getMustNotAccessKnowledgeKeyword_10_2() { return cMustNotAccessKnowledgeKeyword_10_2; }
		
		//type=[DSLKnowledge]
		public Assignment getTypeAssignment_10_3() { return cTypeAssignment_10_3; }
		
		//[DSLKnowledge]
		public CrossReference getTypeDSLKnowledgeCrossReference_10_3_0() { return cTypeDSLKnowledgeCrossReference_10_3_0; }
		
		//ID
		public RuleCall getTypeDSLKnowledgeIDTerminalRuleCall_10_3_0_1() { return cTypeDSLKnowledgeIDTerminalRuleCall_10_3_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_10_4() { return cSemicolonKeyword_10_4; }
		
		//'analyzer' t=[DSLAnalyzer] 'must-access-knowledge' type=[DSLKnowledge] 'through-interface'
		//interface=[KnowledgeInterface] ';'
		public Group getGroup_11() { return cGroup_11; }
		
		//'analyzer'
		public Keyword getAnalyzerKeyword_11_0() { return cAnalyzerKeyword_11_0; }
		
		//t=[DSLAnalyzer]
		public Assignment getTAssignment_11_1() { return cTAssignment_11_1; }
		
		//[DSLAnalyzer]
		public CrossReference getTDSLAnalyzerCrossReference_11_1_0() { return cTDSLAnalyzerCrossReference_11_1_0; }
		
		//ID
		public RuleCall getTDSLAnalyzerIDTerminalRuleCall_11_1_0_1() { return cTDSLAnalyzerIDTerminalRuleCall_11_1_0_1; }
		
		//'must-access-knowledge'
		public Keyword getMustAccessKnowledgeKeyword_11_2() { return cMustAccessKnowledgeKeyword_11_2; }
		
		//type=[DSLKnowledge]
		public Assignment getTypeAssignment_11_3() { return cTypeAssignment_11_3; }
		
		//[DSLKnowledge]
		public CrossReference getTypeDSLKnowledgeCrossReference_11_3_0() { return cTypeDSLKnowledgeCrossReference_11_3_0; }
		
		//ID
		public RuleCall getTypeDSLKnowledgeIDTerminalRuleCall_11_3_0_1() { return cTypeDSLKnowledgeIDTerminalRuleCall_11_3_0_1; }
		
		//'through-interface'
		public Keyword getThroughInterfaceKeyword_11_4() { return cThroughInterfaceKeyword_11_4; }
		
		//interface=[KnowledgeInterface]
		public Assignment getInterfaceAssignment_11_5() { return cInterfaceAssignment_11_5; }
		
		//[KnowledgeInterface]
		public CrossReference getInterfaceKnowledgeInterfaceCrossReference_11_5_0() { return cInterfaceKnowledgeInterfaceCrossReference_11_5_0; }
		
		//ID
		public RuleCall getInterfaceKnowledgeInterfaceIDTerminalRuleCall_11_5_0_1() { return cInterfaceKnowledgeInterfaceIDTerminalRuleCall_11_5_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_11_6() { return cSemicolonKeyword_11_6; }
		
		//'planner' t=[DSLPlanner] 'must-not-access-knowledge' type=[DSLKnowledge] ';'
		public Group getGroup_12() { return cGroup_12; }
		
		//'planner'
		public Keyword getPlannerKeyword_12_0() { return cPlannerKeyword_12_0; }
		
		//t=[DSLPlanner]
		public Assignment getTAssignment_12_1() { return cTAssignment_12_1; }
		
		//[DSLPlanner]
		public CrossReference getTDSLPlannerCrossReference_12_1_0() { return cTDSLPlannerCrossReference_12_1_0; }
		
		//ID
		public RuleCall getTDSLPlannerIDTerminalRuleCall_12_1_0_1() { return cTDSLPlannerIDTerminalRuleCall_12_1_0_1; }
		
		//'must-not-access-knowledge'
		public Keyword getMustNotAccessKnowledgeKeyword_12_2() { return cMustNotAccessKnowledgeKeyword_12_2; }
		
		//type=[DSLKnowledge]
		public Assignment getTypeAssignment_12_3() { return cTypeAssignment_12_3; }
		
		//[DSLKnowledge]
		public CrossReference getTypeDSLKnowledgeCrossReference_12_3_0() { return cTypeDSLKnowledgeCrossReference_12_3_0; }
		
		//ID
		public RuleCall getTypeDSLKnowledgeIDTerminalRuleCall_12_3_0_1() { return cTypeDSLKnowledgeIDTerminalRuleCall_12_3_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_12_4() { return cSemicolonKeyword_12_4; }
		
		//'planner' t=[DSLPlanner] 'must-access-knowledge' type=[DSLKnowledge] 'through-interface' interface=[KnowledgeInterface]
		//';'
		public Group getGroup_13() { return cGroup_13; }
		
		//'planner'
		public Keyword getPlannerKeyword_13_0() { return cPlannerKeyword_13_0; }
		
		//t=[DSLPlanner]
		public Assignment getTAssignment_13_1() { return cTAssignment_13_1; }
		
		//[DSLPlanner]
		public CrossReference getTDSLPlannerCrossReference_13_1_0() { return cTDSLPlannerCrossReference_13_1_0; }
		
		//ID
		public RuleCall getTDSLPlannerIDTerminalRuleCall_13_1_0_1() { return cTDSLPlannerIDTerminalRuleCall_13_1_0_1; }
		
		//'must-access-knowledge'
		public Keyword getMustAccessKnowledgeKeyword_13_2() { return cMustAccessKnowledgeKeyword_13_2; }
		
		//type=[DSLKnowledge]
		public Assignment getTypeAssignment_13_3() { return cTypeAssignment_13_3; }
		
		//[DSLKnowledge]
		public CrossReference getTypeDSLKnowledgeCrossReference_13_3_0() { return cTypeDSLKnowledgeCrossReference_13_3_0; }
		
		//ID
		public RuleCall getTypeDSLKnowledgeIDTerminalRuleCall_13_3_0_1() { return cTypeDSLKnowledgeIDTerminalRuleCall_13_3_0_1; }
		
		//'through-interface'
		public Keyword getThroughInterfaceKeyword_13_4() { return cThroughInterfaceKeyword_13_4; }
		
		//interface=[KnowledgeInterface]
		public Assignment getInterfaceAssignment_13_5() { return cInterfaceAssignment_13_5; }
		
		//[KnowledgeInterface]
		public CrossReference getInterfaceKnowledgeInterfaceCrossReference_13_5_0() { return cInterfaceKnowledgeInterfaceCrossReference_13_5_0; }
		
		//ID
		public RuleCall getInterfaceKnowledgeInterfaceIDTerminalRuleCall_13_5_0_1() { return cInterfaceKnowledgeInterfaceIDTerminalRuleCall_13_5_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_13_6() { return cSemicolonKeyword_13_6; }
		
		//'effector' t=[DSLEffector] 'must-not-access-gauge' type=[DSLGauge] ';'
		public Group getGroup_14() { return cGroup_14; }
		
		//'effector'
		public Keyword getEffectorKeyword_14_0() { return cEffectorKeyword_14_0; }
		
		//t=[DSLEffector]
		public Assignment getTAssignment_14_1() { return cTAssignment_14_1; }
		
		//[DSLEffector]
		public CrossReference getTDSLEffectorCrossReference_14_1_0() { return cTDSLEffectorCrossReference_14_1_0; }
		
		//ID
		public RuleCall getTDSLEffectorIDTerminalRuleCall_14_1_0_1() { return cTDSLEffectorIDTerminalRuleCall_14_1_0_1; }
		
		//'must-not-access-gauge'
		public Keyword getMustNotAccessGaugeKeyword_14_2() { return cMustNotAccessGaugeKeyword_14_2; }
		
		//type=[DSLGauge]
		public Assignment getTypeAssignment_14_3() { return cTypeAssignment_14_3; }
		
		//[DSLGauge]
		public CrossReference getTypeDSLGaugeCrossReference_14_3_0() { return cTypeDSLGaugeCrossReference_14_3_0; }
		
		//ID
		public RuleCall getTypeDSLGaugeIDTerminalRuleCall_14_3_0_1() { return cTypeDSLGaugeIDTerminalRuleCall_14_3_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_14_4() { return cSemicolonKeyword_14_4; }
		
		//'effector' t=[DSLEffector] 'must-access-gauge' type=[DSLGauge] 'through-interface' interface=[GaugeInterface] ';'
		public Group getGroup_15() { return cGroup_15; }
		
		//'effector'
		public Keyword getEffectorKeyword_15_0() { return cEffectorKeyword_15_0; }
		
		//t=[DSLEffector]
		public Assignment getTAssignment_15_1() { return cTAssignment_15_1; }
		
		//[DSLEffector]
		public CrossReference getTDSLEffectorCrossReference_15_1_0() { return cTDSLEffectorCrossReference_15_1_0; }
		
		//ID
		public RuleCall getTDSLEffectorIDTerminalRuleCall_15_1_0_1() { return cTDSLEffectorIDTerminalRuleCall_15_1_0_1; }
		
		//'must-access-gauge'
		public Keyword getMustAccessGaugeKeyword_15_2() { return cMustAccessGaugeKeyword_15_2; }
		
		//type=[DSLGauge]
		public Assignment getTypeAssignment_15_3() { return cTypeAssignment_15_3; }
		
		//[DSLGauge]
		public CrossReference getTypeDSLGaugeCrossReference_15_3_0() { return cTypeDSLGaugeCrossReference_15_3_0; }
		
		//ID
		public RuleCall getTypeDSLGaugeIDTerminalRuleCall_15_3_0_1() { return cTypeDSLGaugeIDTerminalRuleCall_15_3_0_1; }
		
		//'through-interface'
		public Keyword getThroughInterfaceKeyword_15_4() { return cThroughInterfaceKeyword_15_4; }
		
		//interface=[GaugeInterface]
		public Assignment getInterfaceAssignment_15_5() { return cInterfaceAssignment_15_5; }
		
		//[GaugeInterface]
		public CrossReference getInterfaceGaugeInterfaceCrossReference_15_5_0() { return cInterfaceGaugeInterfaceCrossReference_15_5_0; }
		
		//ID
		public RuleCall getInterfaceGaugeInterfaceIDTerminalRuleCall_15_5_0_1() { return cInterfaceGaugeInterfaceIDTerminalRuleCall_15_5_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_15_6() { return cSemicolonKeyword_15_6; }
		
		//'managing' t=[DSLManaging] 'must-not-access-managed' type=[DSLManaged] ';'
		public Group getGroup_16() { return cGroup_16; }
		
		//'managing'
		public Keyword getManagingKeyword_16_0() { return cManagingKeyword_16_0; }
		
		//t=[DSLManaging]
		public Assignment getTAssignment_16_1() { return cTAssignment_16_1; }
		
		//[DSLManaging]
		public CrossReference getTDSLManagingCrossReference_16_1_0() { return cTDSLManagingCrossReference_16_1_0; }
		
		//ID
		public RuleCall getTDSLManagingIDTerminalRuleCall_16_1_0_1() { return cTDSLManagingIDTerminalRuleCall_16_1_0_1; }
		
		//'must-not-access-managed'
		public Keyword getMustNotAccessManagedKeyword_16_2() { return cMustNotAccessManagedKeyword_16_2; }
		
		//type=[DSLManaged]
		public Assignment getTypeAssignment_16_3() { return cTypeAssignment_16_3; }
		
		//[DSLManaged]
		public CrossReference getTypeDSLManagedCrossReference_16_3_0() { return cTypeDSLManagedCrossReference_16_3_0; }
		
		//ID
		public RuleCall getTypeDSLManagedIDTerminalRuleCall_16_3_0_1() { return cTypeDSLManagedIDTerminalRuleCall_16_3_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_16_4() { return cSemicolonKeyword_16_4; }
		
		//'managing' t=[DSLManaging] 'must-access-managed' type=[DSLManaged] 'through-interface' interface=[ManagedInterface] ';'
		public Group getGroup_17() { return cGroup_17; }
		
		//'managing'
		public Keyword getManagingKeyword_17_0() { return cManagingKeyword_17_0; }
		
		//t=[DSLManaging]
		public Assignment getTAssignment_17_1() { return cTAssignment_17_1; }
		
		//[DSLManaging]
		public CrossReference getTDSLManagingCrossReference_17_1_0() { return cTDSLManagingCrossReference_17_1_0; }
		
		//ID
		public RuleCall getTDSLManagingIDTerminalRuleCall_17_1_0_1() { return cTDSLManagingIDTerminalRuleCall_17_1_0_1; }
		
		//'must-access-managed'
		public Keyword getMustAccessManagedKeyword_17_2() { return cMustAccessManagedKeyword_17_2; }
		
		//type=[DSLManaged]
		public Assignment getTypeAssignment_17_3() { return cTypeAssignment_17_3; }
		
		//[DSLManaged]
		public CrossReference getTypeDSLManagedCrossReference_17_3_0() { return cTypeDSLManagedCrossReference_17_3_0; }
		
		//ID
		public RuleCall getTypeDSLManagedIDTerminalRuleCall_17_3_0_1() { return cTypeDSLManagedIDTerminalRuleCall_17_3_0_1; }
		
		//'through-interface'
		public Keyword getThroughInterfaceKeyword_17_4() { return cThroughInterfaceKeyword_17_4; }
		
		//interface=[ManagedInterface]
		public Assignment getInterfaceAssignment_17_5() { return cInterfaceAssignment_17_5; }
		
		//[ManagedInterface]
		public CrossReference getInterfaceManagedInterfaceCrossReference_17_5_0() { return cInterfaceManagedInterfaceCrossReference_17_5_0; }
		
		//ID
		public RuleCall getInterfaceManagedInterfaceIDTerminalRuleCall_17_5_0_1() { return cInterfaceManagedInterfaceIDTerminalRuleCall_17_5_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_17_6() { return cSemicolonKeyword_17_6; }
	}
	public class DSLSensorBelongsToElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLSensorBelongsTo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSensorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSensorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cSensorDSLSensorCrossReference_1_0 = (CrossReference)cSensorAssignment_1.eContents().get(0);
		private final RuleCall cSensorDSLSensorIDTerminalRuleCall_1_0_1 = (RuleCall)cSensorDSLSensorCrossReference_1_0.eContents().get(1);
		private final Keyword cMustBeInMonitorKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMonitorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cMonitorDSLMonitorCrossReference_3_0 = (CrossReference)cMonitorAssignment_3.eContents().get(0);
		private final RuleCall cMonitorDSLMonitorIDTerminalRuleCall_3_0_1 = (RuleCall)cMonitorDSLMonitorCrossReference_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DSLSensorBelongsTo:
		//	'sensor' sensor=[DSLSensor] 'must-be-in-monitor' monitor=[DSLMonitor] ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'sensor' sensor=[DSLSensor] 'must-be-in-monitor' monitor=[DSLMonitor] ';'
		public Group getGroup() { return cGroup; }
		
		//'sensor'
		public Keyword getSensorKeyword_0() { return cSensorKeyword_0; }
		
		//sensor=[DSLSensor]
		public Assignment getSensorAssignment_1() { return cSensorAssignment_1; }
		
		//[DSLSensor]
		public CrossReference getSensorDSLSensorCrossReference_1_0() { return cSensorDSLSensorCrossReference_1_0; }
		
		//ID
		public RuleCall getSensorDSLSensorIDTerminalRuleCall_1_0_1() { return cSensorDSLSensorIDTerminalRuleCall_1_0_1; }
		
		//'must-be-in-monitor'
		public Keyword getMustBeInMonitorKeyword_2() { return cMustBeInMonitorKeyword_2; }
		
		//monitor=[DSLMonitor]
		public Assignment getMonitorAssignment_3() { return cMonitorAssignment_3; }
		
		//[DSLMonitor]
		public CrossReference getMonitorDSLMonitorCrossReference_3_0() { return cMonitorDSLMonitorCrossReference_3_0; }
		
		//ID
		public RuleCall getMonitorDSLMonitorIDTerminalRuleCall_3_0_1() { return cMonitorDSLMonitorIDTerminalRuleCall_3_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class DSLReferenceInputBelongsToElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLReferenceInputBelongsTo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReferenceInputKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReferenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cReferenceDSLReferenceInputCrossReference_1_0 = (CrossReference)cReferenceAssignment_1.eContents().get(0);
		private final RuleCall cReferenceDSLReferenceInputIDTerminalRuleCall_1_0_1 = (RuleCall)cReferenceDSLReferenceInputCrossReference_1_0.eContents().get(1);
		private final Keyword cMustBeInKnowledgeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cKnowledgeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cKnowledgeDSLKnowledgeCrossReference_3_0 = (CrossReference)cKnowledgeAssignment_3.eContents().get(0);
		private final RuleCall cKnowledgeDSLKnowledgeIDTerminalRuleCall_3_0_1 = (RuleCall)cKnowledgeDSLKnowledgeCrossReference_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DSLReferenceInputBelongsTo:
		//	'reference-input' reference=[DSLReferenceInput] 'must-be-in-knowledge' knowledge=[DSLKnowledge] ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'reference-input' reference=[DSLReferenceInput] 'must-be-in-knowledge' knowledge=[DSLKnowledge] ';'
		public Group getGroup() { return cGroup; }
		
		//'reference-input'
		public Keyword getReferenceInputKeyword_0() { return cReferenceInputKeyword_0; }
		
		//reference=[DSLReferenceInput]
		public Assignment getReferenceAssignment_1() { return cReferenceAssignment_1; }
		
		//[DSLReferenceInput]
		public CrossReference getReferenceDSLReferenceInputCrossReference_1_0() { return cReferenceDSLReferenceInputCrossReference_1_0; }
		
		//ID
		public RuleCall getReferenceDSLReferenceInputIDTerminalRuleCall_1_0_1() { return cReferenceDSLReferenceInputIDTerminalRuleCall_1_0_1; }
		
		//'must-be-in-knowledge'
		public Keyword getMustBeInKnowledgeKeyword_2() { return cMustBeInKnowledgeKeyword_2; }
		
		//knowledge=[DSLKnowledge]
		public Assignment getKnowledgeAssignment_3() { return cKnowledgeAssignment_3; }
		
		//[DSLKnowledge]
		public CrossReference getKnowledgeDSLKnowledgeCrossReference_3_0() { return cKnowledgeDSLKnowledgeCrossReference_3_0; }
		
		//ID
		public RuleCall getKnowledgeDSLKnowledgeIDTerminalRuleCall_3_0_1() { return cKnowledgeDSLKnowledgeIDTerminalRuleCall_3_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class DSLEffectorBelongsToElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLEffectorBelongsTo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEffectorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEffectorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cEffectorDSLEffectorCrossReference_1_0 = (CrossReference)cEffectorAssignment_1.eContents().get(0);
		private final RuleCall cEffectorDSLEffectorIDTerminalRuleCall_1_0_1 = (RuleCall)cEffectorDSLEffectorCrossReference_1_0.eContents().get(1);
		private final Keyword cMustBeInExecutorKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExecutorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cExecutorDSLExecutorCrossReference_3_0 = (CrossReference)cExecutorAssignment_3.eContents().get(0);
		private final RuleCall cExecutorDSLExecutorIDTerminalRuleCall_3_0_1 = (RuleCall)cExecutorDSLExecutorCrossReference_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DSLEffectorBelongsTo:
		//	'effector' effector=[DSLEffector] 'must-be-in-executor' executor=[DSLExecutor] ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'effector' effector=[DSLEffector] 'must-be-in-executor' executor=[DSLExecutor] ';'
		public Group getGroup() { return cGroup; }
		
		//'effector'
		public Keyword getEffectorKeyword_0() { return cEffectorKeyword_0; }
		
		//effector=[DSLEffector]
		public Assignment getEffectorAssignment_1() { return cEffectorAssignment_1; }
		
		//[DSLEffector]
		public CrossReference getEffectorDSLEffectorCrossReference_1_0() { return cEffectorDSLEffectorCrossReference_1_0; }
		
		//ID
		public RuleCall getEffectorDSLEffectorIDTerminalRuleCall_1_0_1() { return cEffectorDSLEffectorIDTerminalRuleCall_1_0_1; }
		
		//'must-be-in-executor'
		public Keyword getMustBeInExecutorKeyword_2() { return cMustBeInExecutorKeyword_2; }
		
		//executor=[DSLExecutor]
		public Assignment getExecutorAssignment_3() { return cExecutorAssignment_3; }
		
		//[DSLExecutor]
		public CrossReference getExecutorDSLExecutorCrossReference_3_0() { return cExecutorDSLExecutorCrossReference_3_0; }
		
		//ID
		public RuleCall getExecutorDSLExecutorIDTerminalRuleCall_3_0_1() { return cExecutorDSLExecutorIDTerminalRuleCall_3_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class DSLMonitorBelongsTo1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLMonitorBelongsTo1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMonitorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMonitorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cMonitorDSLMonitorCrossReference_1_0 = (CrossReference)cMonitorAssignment_1.eContents().get(0);
		private final RuleCall cMonitorDSLMonitorIDTerminalRuleCall_1_0_1 = (RuleCall)cMonitorDSLMonitorCrossReference_1_0.eContents().get(1);
		private final Keyword cMustBeInControlLoopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cClAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cClDSLControlLoopCrossReference_3_0 = (CrossReference)cClAssignment_3.eContents().get(0);
		private final RuleCall cClDSLControlLoopIDTerminalRuleCall_3_0_1 = (RuleCall)cClDSLControlLoopCrossReference_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DSLMonitorBelongsTo1:
		//	'monitor' monitor=[DSLMonitor] 'must-be-in-control-loop' cl=[DSLControlLoop] ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'monitor' monitor=[DSLMonitor] 'must-be-in-control-loop' cl=[DSLControlLoop] ';'
		public Group getGroup() { return cGroup; }
		
		//'monitor'
		public Keyword getMonitorKeyword_0() { return cMonitorKeyword_0; }
		
		//monitor=[DSLMonitor]
		public Assignment getMonitorAssignment_1() { return cMonitorAssignment_1; }
		
		//[DSLMonitor]
		public CrossReference getMonitorDSLMonitorCrossReference_1_0() { return cMonitorDSLMonitorCrossReference_1_0; }
		
		//ID
		public RuleCall getMonitorDSLMonitorIDTerminalRuleCall_1_0_1() { return cMonitorDSLMonitorIDTerminalRuleCall_1_0_1; }
		
		//'must-be-in-control-loop'
		public Keyword getMustBeInControlLoopKeyword_2() { return cMustBeInControlLoopKeyword_2; }
		
		//cl=[DSLControlLoop]
		public Assignment getClAssignment_3() { return cClAssignment_3; }
		
		//[DSLControlLoop]
		public CrossReference getClDSLControlLoopCrossReference_3_0() { return cClDSLControlLoopCrossReference_3_0; }
		
		//ID
		public RuleCall getClDSLControlLoopIDTerminalRuleCall_3_0_1() { return cClDSLControlLoopIDTerminalRuleCall_3_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class DSLMonitorBelongsTo2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLMonitorBelongsTo2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMonitorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMonitorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cMonitorDSLMonitorCrossReference_1_0 = (CrossReference)cMonitorAssignment_1.eContents().get(0);
		private final RuleCall cMonitorDSLMonitorIDTerminalRuleCall_1_0_1 = (RuleCall)cMonitorDSLMonitorCrossReference_1_0.eContents().get(1);
		private final Keyword cMustBeInManagingKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cManagingAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cManagingDSLManagingCrossReference_3_0 = (CrossReference)cManagingAssignment_3.eContents().get(0);
		private final RuleCall cManagingDSLManagingIDTerminalRuleCall_3_0_1 = (RuleCall)cManagingDSLManagingCrossReference_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DSLMonitorBelongsTo2:
		//	'monitor' monitor=[DSLMonitor] 'must-be-in-managing' managing=[DSLManaging] ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'monitor' monitor=[DSLMonitor] 'must-be-in-managing' managing=[DSLManaging] ';'
		public Group getGroup() { return cGroup; }
		
		//'monitor'
		public Keyword getMonitorKeyword_0() { return cMonitorKeyword_0; }
		
		//monitor=[DSLMonitor]
		public Assignment getMonitorAssignment_1() { return cMonitorAssignment_1; }
		
		//[DSLMonitor]
		public CrossReference getMonitorDSLMonitorCrossReference_1_0() { return cMonitorDSLMonitorCrossReference_1_0; }
		
		//ID
		public RuleCall getMonitorDSLMonitorIDTerminalRuleCall_1_0_1() { return cMonitorDSLMonitorIDTerminalRuleCall_1_0_1; }
		
		//'must-be-in-managing'
		public Keyword getMustBeInManagingKeyword_2() { return cMustBeInManagingKeyword_2; }
		
		//managing=[DSLManaging]
		public Assignment getManagingAssignment_3() { return cManagingAssignment_3; }
		
		//[DSLManaging]
		public CrossReference getManagingDSLManagingCrossReference_3_0() { return cManagingDSLManagingCrossReference_3_0; }
		
		//ID
		public RuleCall getManagingDSLManagingIDTerminalRuleCall_3_0_1() { return cManagingDSLManagingIDTerminalRuleCall_3_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class DSLAnalyzerBelongsTo1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLAnalyzerBelongsTo1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAnalyzerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAnalyzerAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cAnalyzerDSLAnalyzerCrossReference_1_0 = (CrossReference)cAnalyzerAssignment_1.eContents().get(0);
		private final RuleCall cAnalyzerDSLAnalyzerIDTerminalRuleCall_1_0_1 = (RuleCall)cAnalyzerDSLAnalyzerCrossReference_1_0.eContents().get(1);
		private final Keyword cMustBeInControlLoopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cClAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cClDSLControlLoopCrossReference_3_0 = (CrossReference)cClAssignment_3.eContents().get(0);
		private final RuleCall cClDSLControlLoopIDTerminalRuleCall_3_0_1 = (RuleCall)cClDSLControlLoopCrossReference_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DSLAnalyzerBelongsTo1:
		//	'analyzer' analyzer=[DSLAnalyzer] 'must-be-in-control-loop' cl=[DSLControlLoop] ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'analyzer' analyzer=[DSLAnalyzer] 'must-be-in-control-loop' cl=[DSLControlLoop] ';'
		public Group getGroup() { return cGroup; }
		
		//'analyzer'
		public Keyword getAnalyzerKeyword_0() { return cAnalyzerKeyword_0; }
		
		//analyzer=[DSLAnalyzer]
		public Assignment getAnalyzerAssignment_1() { return cAnalyzerAssignment_1; }
		
		//[DSLAnalyzer]
		public CrossReference getAnalyzerDSLAnalyzerCrossReference_1_0() { return cAnalyzerDSLAnalyzerCrossReference_1_0; }
		
		//ID
		public RuleCall getAnalyzerDSLAnalyzerIDTerminalRuleCall_1_0_1() { return cAnalyzerDSLAnalyzerIDTerminalRuleCall_1_0_1; }
		
		//'must-be-in-control-loop'
		public Keyword getMustBeInControlLoopKeyword_2() { return cMustBeInControlLoopKeyword_2; }
		
		//cl=[DSLControlLoop]
		public Assignment getClAssignment_3() { return cClAssignment_3; }
		
		//[DSLControlLoop]
		public CrossReference getClDSLControlLoopCrossReference_3_0() { return cClDSLControlLoopCrossReference_3_0; }
		
		//ID
		public RuleCall getClDSLControlLoopIDTerminalRuleCall_3_0_1() { return cClDSLControlLoopIDTerminalRuleCall_3_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class DSLAnalyzerBelongsTo2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLAnalyzerBelongsTo2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAnalyzerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAnalyzerAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cAnalyzerDSLAnalyzerCrossReference_1_0 = (CrossReference)cAnalyzerAssignment_1.eContents().get(0);
		private final RuleCall cAnalyzerDSLAnalyzerIDTerminalRuleCall_1_0_1 = (RuleCall)cAnalyzerDSLAnalyzerCrossReference_1_0.eContents().get(1);
		private final Keyword cMustBeInManagingKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cManagingAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cManagingDSLManagingCrossReference_3_0 = (CrossReference)cManagingAssignment_3.eContents().get(0);
		private final RuleCall cManagingDSLManagingIDTerminalRuleCall_3_0_1 = (RuleCall)cManagingDSLManagingCrossReference_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DSLAnalyzerBelongsTo2:
		//	'analyzer' analyzer=[DSLAnalyzer] 'must-be-in-managing' managing=[DSLManaging] ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'analyzer' analyzer=[DSLAnalyzer] 'must-be-in-managing' managing=[DSLManaging] ';'
		public Group getGroup() { return cGroup; }
		
		//'analyzer'
		public Keyword getAnalyzerKeyword_0() { return cAnalyzerKeyword_0; }
		
		//analyzer=[DSLAnalyzer]
		public Assignment getAnalyzerAssignment_1() { return cAnalyzerAssignment_1; }
		
		//[DSLAnalyzer]
		public CrossReference getAnalyzerDSLAnalyzerCrossReference_1_0() { return cAnalyzerDSLAnalyzerCrossReference_1_0; }
		
		//ID
		public RuleCall getAnalyzerDSLAnalyzerIDTerminalRuleCall_1_0_1() { return cAnalyzerDSLAnalyzerIDTerminalRuleCall_1_0_1; }
		
		//'must-be-in-managing'
		public Keyword getMustBeInManagingKeyword_2() { return cMustBeInManagingKeyword_2; }
		
		//managing=[DSLManaging]
		public Assignment getManagingAssignment_3() { return cManagingAssignment_3; }
		
		//[DSLManaging]
		public CrossReference getManagingDSLManagingCrossReference_3_0() { return cManagingDSLManagingCrossReference_3_0; }
		
		//ID
		public RuleCall getManagingDSLManagingIDTerminalRuleCall_3_0_1() { return cManagingDSLManagingIDTerminalRuleCall_3_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class DSLPlannerBelongsTo1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLPlannerBelongsTo1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPlannerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPlannerAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cPlannerDSLPlannerCrossReference_1_0 = (CrossReference)cPlannerAssignment_1.eContents().get(0);
		private final RuleCall cPlannerDSLPlannerIDTerminalRuleCall_1_0_1 = (RuleCall)cPlannerDSLPlannerCrossReference_1_0.eContents().get(1);
		private final Keyword cMustBeInControlLoopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cClAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cClDSLControlLoopCrossReference_3_0 = (CrossReference)cClAssignment_3.eContents().get(0);
		private final RuleCall cClDSLControlLoopIDTerminalRuleCall_3_0_1 = (RuleCall)cClDSLControlLoopCrossReference_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DSLPlannerBelongsTo1:
		//	'planner' planner=[DSLPlanner] 'must-be-in-control-loop' cl=[DSLControlLoop] ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'planner' planner=[DSLPlanner] 'must-be-in-control-loop' cl=[DSLControlLoop] ';'
		public Group getGroup() { return cGroup; }
		
		//'planner'
		public Keyword getPlannerKeyword_0() { return cPlannerKeyword_0; }
		
		//planner=[DSLPlanner]
		public Assignment getPlannerAssignment_1() { return cPlannerAssignment_1; }
		
		//[DSLPlanner]
		public CrossReference getPlannerDSLPlannerCrossReference_1_0() { return cPlannerDSLPlannerCrossReference_1_0; }
		
		//ID
		public RuleCall getPlannerDSLPlannerIDTerminalRuleCall_1_0_1() { return cPlannerDSLPlannerIDTerminalRuleCall_1_0_1; }
		
		//'must-be-in-control-loop'
		public Keyword getMustBeInControlLoopKeyword_2() { return cMustBeInControlLoopKeyword_2; }
		
		//cl=[DSLControlLoop]
		public Assignment getClAssignment_3() { return cClAssignment_3; }
		
		//[DSLControlLoop]
		public CrossReference getClDSLControlLoopCrossReference_3_0() { return cClDSLControlLoopCrossReference_3_0; }
		
		//ID
		public RuleCall getClDSLControlLoopIDTerminalRuleCall_3_0_1() { return cClDSLControlLoopIDTerminalRuleCall_3_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class DSLPlannerBelongsTo2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLPlannerBelongsTo2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPlannerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPlannerAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cPlannerDSLPlannerCrossReference_1_0 = (CrossReference)cPlannerAssignment_1.eContents().get(0);
		private final RuleCall cPlannerDSLPlannerIDTerminalRuleCall_1_0_1 = (RuleCall)cPlannerDSLPlannerCrossReference_1_0.eContents().get(1);
		private final Keyword cMustBeInManagingKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cManagingAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cManagingDSLManagingCrossReference_3_0 = (CrossReference)cManagingAssignment_3.eContents().get(0);
		private final RuleCall cManagingDSLManagingIDTerminalRuleCall_3_0_1 = (RuleCall)cManagingDSLManagingCrossReference_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DSLPlannerBelongsTo2:
		//	'planner' planner=[DSLPlanner] 'must-be-in-managing' managing=[DSLManaging] ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'planner' planner=[DSLPlanner] 'must-be-in-managing' managing=[DSLManaging] ';'
		public Group getGroup() { return cGroup; }
		
		//'planner'
		public Keyword getPlannerKeyword_0() { return cPlannerKeyword_0; }
		
		//planner=[DSLPlanner]
		public Assignment getPlannerAssignment_1() { return cPlannerAssignment_1; }
		
		//[DSLPlanner]
		public CrossReference getPlannerDSLPlannerCrossReference_1_0() { return cPlannerDSLPlannerCrossReference_1_0; }
		
		//ID
		public RuleCall getPlannerDSLPlannerIDTerminalRuleCall_1_0_1() { return cPlannerDSLPlannerIDTerminalRuleCall_1_0_1; }
		
		//'must-be-in-managing'
		public Keyword getMustBeInManagingKeyword_2() { return cMustBeInManagingKeyword_2; }
		
		//managing=[DSLManaging]
		public Assignment getManagingAssignment_3() { return cManagingAssignment_3; }
		
		//[DSLManaging]
		public CrossReference getManagingDSLManagingCrossReference_3_0() { return cManagingDSLManagingCrossReference_3_0; }
		
		//ID
		public RuleCall getManagingDSLManagingIDTerminalRuleCall_3_0_1() { return cManagingDSLManagingIDTerminalRuleCall_3_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class DSLExecutorBelongsTo1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLExecutorBelongsTo1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExecutorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExecutorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cExecutorDSLExecutorCrossReference_1_0 = (CrossReference)cExecutorAssignment_1.eContents().get(0);
		private final RuleCall cExecutorDSLExecutorIDTerminalRuleCall_1_0_1 = (RuleCall)cExecutorDSLExecutorCrossReference_1_0.eContents().get(1);
		private final Keyword cMustBeInControlLoopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cClAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cClDSLControlLoopCrossReference_3_0 = (CrossReference)cClAssignment_3.eContents().get(0);
		private final RuleCall cClDSLControlLoopIDTerminalRuleCall_3_0_1 = (RuleCall)cClDSLControlLoopCrossReference_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DSLExecutorBelongsTo1:
		//	'executor' executor=[DSLExecutor] 'must-be-in-control-loop' cl=[DSLControlLoop] ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'executor' executor=[DSLExecutor] 'must-be-in-control-loop' cl=[DSLControlLoop] ';'
		public Group getGroup() { return cGroup; }
		
		//'executor'
		public Keyword getExecutorKeyword_0() { return cExecutorKeyword_0; }
		
		//executor=[DSLExecutor]
		public Assignment getExecutorAssignment_1() { return cExecutorAssignment_1; }
		
		//[DSLExecutor]
		public CrossReference getExecutorDSLExecutorCrossReference_1_0() { return cExecutorDSLExecutorCrossReference_1_0; }
		
		//ID
		public RuleCall getExecutorDSLExecutorIDTerminalRuleCall_1_0_1() { return cExecutorDSLExecutorIDTerminalRuleCall_1_0_1; }
		
		//'must-be-in-control-loop'
		public Keyword getMustBeInControlLoopKeyword_2() { return cMustBeInControlLoopKeyword_2; }
		
		//cl=[DSLControlLoop]
		public Assignment getClAssignment_3() { return cClAssignment_3; }
		
		//[DSLControlLoop]
		public CrossReference getClDSLControlLoopCrossReference_3_0() { return cClDSLControlLoopCrossReference_3_0; }
		
		//ID
		public RuleCall getClDSLControlLoopIDTerminalRuleCall_3_0_1() { return cClDSLControlLoopIDTerminalRuleCall_3_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class DSLExecutorBelongsTo2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLExecutorBelongsTo2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExecutorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExecutorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cExecutorDSLExecutorCrossReference_1_0 = (CrossReference)cExecutorAssignment_1.eContents().get(0);
		private final RuleCall cExecutorDSLExecutorIDTerminalRuleCall_1_0_1 = (RuleCall)cExecutorDSLExecutorCrossReference_1_0.eContents().get(1);
		private final Keyword cMustBeInManagingKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cManagingAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cManagingDSLManagingCrossReference_3_0 = (CrossReference)cManagingAssignment_3.eContents().get(0);
		private final RuleCall cManagingDSLManagingIDTerminalRuleCall_3_0_1 = (RuleCall)cManagingDSLManagingCrossReference_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DSLExecutorBelongsTo2:
		//	'executor' executor=[DSLExecutor] 'must-be-in-managing' managing=[DSLManaging] ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'executor' executor=[DSLExecutor] 'must-be-in-managing' managing=[DSLManaging] ';'
		public Group getGroup() { return cGroup; }
		
		//'executor'
		public Keyword getExecutorKeyword_0() { return cExecutorKeyword_0; }
		
		//executor=[DSLExecutor]
		public Assignment getExecutorAssignment_1() { return cExecutorAssignment_1; }
		
		//[DSLExecutor]
		public CrossReference getExecutorDSLExecutorCrossReference_1_0() { return cExecutorDSLExecutorCrossReference_1_0; }
		
		//ID
		public RuleCall getExecutorDSLExecutorIDTerminalRuleCall_1_0_1() { return cExecutorDSLExecutorIDTerminalRuleCall_1_0_1; }
		
		//'must-be-in-managing'
		public Keyword getMustBeInManagingKeyword_2() { return cMustBeInManagingKeyword_2; }
		
		//managing=[DSLManaging]
		public Assignment getManagingAssignment_3() { return cManagingAssignment_3; }
		
		//[DSLManaging]
		public CrossReference getManagingDSLManagingCrossReference_3_0() { return cManagingDSLManagingCrossReference_3_0; }
		
		//ID
		public RuleCall getManagingDSLManagingIDTerminalRuleCall_3_0_1() { return cManagingDSLManagingIDTerminalRuleCall_3_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class DSLClBelongsTo1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLClBelongsTo1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cControlLoopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cClAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cClDSLControlLoopCrossReference_1_0 = (CrossReference)cClAssignment_1.eContents().get(0);
		private final RuleCall cClDSLControlLoopIDTerminalRuleCall_1_0_1 = (RuleCall)cClDSLControlLoopCrossReference_1_0.eContents().get(1);
		private final Keyword cMustBeInControlLoopManagerKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cClmAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cClmDSLControlLoopManagerCrossReference_3_0 = (CrossReference)cClmAssignment_3.eContents().get(0);
		private final RuleCall cClmDSLControlLoopManagerIDTerminalRuleCall_3_0_1 = (RuleCall)cClmDSLControlLoopManagerCrossReference_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DSLClBelongsTo1:
		//	'control-loop' cl=[DSLControlLoop] 'must-be-in-control-loop-manager' clm=[DSLControlLoopManager] ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'control-loop' cl=[DSLControlLoop] 'must-be-in-control-loop-manager' clm=[DSLControlLoopManager] ';'
		public Group getGroup() { return cGroup; }
		
		//'control-loop'
		public Keyword getControlLoopKeyword_0() { return cControlLoopKeyword_0; }
		
		//cl=[DSLControlLoop]
		public Assignment getClAssignment_1() { return cClAssignment_1; }
		
		//[DSLControlLoop]
		public CrossReference getClDSLControlLoopCrossReference_1_0() { return cClDSLControlLoopCrossReference_1_0; }
		
		//ID
		public RuleCall getClDSLControlLoopIDTerminalRuleCall_1_0_1() { return cClDSLControlLoopIDTerminalRuleCall_1_0_1; }
		
		//'must-be-in-control-loop-manager'
		public Keyword getMustBeInControlLoopManagerKeyword_2() { return cMustBeInControlLoopManagerKeyword_2; }
		
		//clm=[DSLControlLoopManager]
		public Assignment getClmAssignment_3() { return cClmAssignment_3; }
		
		//[DSLControlLoopManager]
		public CrossReference getClmDSLControlLoopManagerCrossReference_3_0() { return cClmDSLControlLoopManagerCrossReference_3_0; }
		
		//ID
		public RuleCall getClmDSLControlLoopManagerIDTerminalRuleCall_3_0_1() { return cClmDSLControlLoopManagerIDTerminalRuleCall_3_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class DSLClBelongsTo2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLClBelongsTo2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cControlLoopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cClAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cClDSLControlLoopCrossReference_1_0 = (CrossReference)cClAssignment_1.eContents().get(0);
		private final RuleCall cClDSLControlLoopIDTerminalRuleCall_1_0_1 = (RuleCall)cClDSLControlLoopCrossReference_1_0.eContents().get(1);
		private final Keyword cMustBeInManagingKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cManagingAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cManagingDSLManagingCrossReference_3_0 = (CrossReference)cManagingAssignment_3.eContents().get(0);
		private final RuleCall cManagingDSLManagingIDTerminalRuleCall_3_0_1 = (RuleCall)cManagingDSLManagingCrossReference_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DSLClBelongsTo2:
		//	'control-loop' cl=[DSLControlLoop] 'must-be-in-managing' managing=[DSLManaging] ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'control-loop' cl=[DSLControlLoop] 'must-be-in-managing' managing=[DSLManaging] ';'
		public Group getGroup() { return cGroup; }
		
		//'control-loop'
		public Keyword getControlLoopKeyword_0() { return cControlLoopKeyword_0; }
		
		//cl=[DSLControlLoop]
		public Assignment getClAssignment_1() { return cClAssignment_1; }
		
		//[DSLControlLoop]
		public CrossReference getClDSLControlLoopCrossReference_1_0() { return cClDSLControlLoopCrossReference_1_0; }
		
		//ID
		public RuleCall getClDSLControlLoopIDTerminalRuleCall_1_0_1() { return cClDSLControlLoopIDTerminalRuleCall_1_0_1; }
		
		//'must-be-in-managing'
		public Keyword getMustBeInManagingKeyword_2() { return cMustBeInManagingKeyword_2; }
		
		//managing=[DSLManaging]
		public Assignment getManagingAssignment_3() { return cManagingAssignment_3; }
		
		//[DSLManaging]
		public CrossReference getManagingDSLManagingCrossReference_3_0() { return cManagingDSLManagingCrossReference_3_0; }
		
		//ID
		public RuleCall getManagingDSLManagingIDTerminalRuleCall_3_0_1() { return cManagingDSLManagingIDTerminalRuleCall_3_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class DSLClmBelongsToElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLClmBelongsTo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cControlLoopManagerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cClAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cClDSLControlLoopManagerCrossReference_1_0 = (CrossReference)cClAssignment_1.eContents().get(0);
		private final RuleCall cClDSLControlLoopManagerIDTerminalRuleCall_1_0_1 = (RuleCall)cClDSLControlLoopManagerCrossReference_1_0.eContents().get(1);
		private final Keyword cMustBeInManagingKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cManagingAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cManagingDSLManagingCrossReference_3_0 = (CrossReference)cManagingAssignment_3.eContents().get(0);
		private final RuleCall cManagingDSLManagingIDTerminalRuleCall_3_0_1 = (RuleCall)cManagingDSLManagingCrossReference_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DSLClmBelongsTo:
		//	'control-loop-manager' cl=[DSLControlLoopManager] 'must-be-in-managing' managing=[DSLManaging] ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'control-loop-manager' cl=[DSLControlLoopManager] 'must-be-in-managing' managing=[DSLManaging] ';'
		public Group getGroup() { return cGroup; }
		
		//'control-loop-manager'
		public Keyword getControlLoopManagerKeyword_0() { return cControlLoopManagerKeyword_0; }
		
		//cl=[DSLControlLoopManager]
		public Assignment getClAssignment_1() { return cClAssignment_1; }
		
		//[DSLControlLoopManager]
		public CrossReference getClDSLControlLoopManagerCrossReference_1_0() { return cClDSLControlLoopManagerCrossReference_1_0; }
		
		//ID
		public RuleCall getClDSLControlLoopManagerIDTerminalRuleCall_1_0_1() { return cClDSLControlLoopManagerIDTerminalRuleCall_1_0_1; }
		
		//'must-be-in-managing'
		public Keyword getMustBeInManagingKeyword_2() { return cMustBeInManagingKeyword_2; }
		
		//managing=[DSLManaging]
		public Assignment getManagingAssignment_3() { return cManagingAssignment_3; }
		
		//[DSLManaging]
		public CrossReference getManagingDSLManagingCrossReference_3_0() { return cManagingDSLManagingCrossReference_3_0; }
		
		//ID
		public RuleCall getManagingDSLManagingIDTerminalRuleCall_3_0_1() { return cManagingDSLManagingIDTerminalRuleCall_3_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class DSLMeasuredOuputBelongsToElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLMeasuredOuputBelongsTo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMeasuredOutputKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMeasuredAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cMeasuredDSLMeasuredOutputCrossReference_1_0 = (CrossReference)cMeasuredAssignment_1.eContents().get(0);
		private final RuleCall cMeasuredDSLMeasuredOutputIDTerminalRuleCall_1_0_1 = (RuleCall)cMeasuredDSLMeasuredOutputCrossReference_1_0.eContents().get(1);
		private final Keyword cMustBeInManagedKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cManagedAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cManagedDSLManagedCrossReference_3_0 = (CrossReference)cManagedAssignment_3.eContents().get(0);
		private final RuleCall cManagedDSLManagedIDTerminalRuleCall_3_0_1 = (RuleCall)cManagedDSLManagedCrossReference_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DSLMeasuredOuputBelongsTo:
		//	'measured-output' measured=[DSLMeasuredOutput] 'must-be-in-managed' managed=[DSLManaged] ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'measured-output' measured=[DSLMeasuredOutput] 'must-be-in-managed' managed=[DSLManaged] ';'
		public Group getGroup() { return cGroup; }
		
		//'measured-output'
		public Keyword getMeasuredOutputKeyword_0() { return cMeasuredOutputKeyword_0; }
		
		//measured=[DSLMeasuredOutput]
		public Assignment getMeasuredAssignment_1() { return cMeasuredAssignment_1; }
		
		//[DSLMeasuredOutput]
		public CrossReference getMeasuredDSLMeasuredOutputCrossReference_1_0() { return cMeasuredDSLMeasuredOutputCrossReference_1_0; }
		
		//ID
		public RuleCall getMeasuredDSLMeasuredOutputIDTerminalRuleCall_1_0_1() { return cMeasuredDSLMeasuredOutputIDTerminalRuleCall_1_0_1; }
		
		//'must-be-in-managed'
		public Keyword getMustBeInManagedKeyword_2() { return cMustBeInManagedKeyword_2; }
		
		//managed=[DSLManaged]
		public Assignment getManagedAssignment_3() { return cManagedAssignment_3; }
		
		//[DSLManaged]
		public CrossReference getManagedDSLManagedCrossReference_3_0() { return cManagedDSLManagedCrossReference_3_0; }
		
		//ID
		public RuleCall getManagedDSLManagedIDTerminalRuleCall_3_0_1() { return cManagedDSLManagedIDTerminalRuleCall_3_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class DSLGaugeBelongsToElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLGaugeBelongsTo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGaugeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cGaugeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cGaugeDSLGaugeCrossReference_1_0 = (CrossReference)cGaugeAssignment_1.eContents().get(0);
		private final RuleCall cGaugeDSLGaugeIDTerminalRuleCall_1_0_1 = (RuleCall)cGaugeDSLGaugeCrossReference_1_0.eContents().get(1);
		private final Keyword cMustBeInManagedKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cManagedAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cManagedDSLManagedCrossReference_3_0 = (CrossReference)cManagedAssignment_3.eContents().get(0);
		private final RuleCall cManagedDSLManagedIDTerminalRuleCall_3_0_1 = (RuleCall)cManagedDSLManagedCrossReference_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DSLGaugeBelongsTo:
		//	'gauge' gauge=[DSLGauge] 'must-be-in-managed' managed=[DSLManaged] ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'gauge' gauge=[DSLGauge] 'must-be-in-managed' managed=[DSLManaged] ';'
		public Group getGroup() { return cGroup; }
		
		//'gauge'
		public Keyword getGaugeKeyword_0() { return cGaugeKeyword_0; }
		
		//gauge=[DSLGauge]
		public Assignment getGaugeAssignment_1() { return cGaugeAssignment_1; }
		
		//[DSLGauge]
		public CrossReference getGaugeDSLGaugeCrossReference_1_0() { return cGaugeDSLGaugeCrossReference_1_0; }
		
		//ID
		public RuleCall getGaugeDSLGaugeIDTerminalRuleCall_1_0_1() { return cGaugeDSLGaugeIDTerminalRuleCall_1_0_1; }
		
		//'must-be-in-managed'
		public Keyword getMustBeInManagedKeyword_2() { return cMustBeInManagedKeyword_2; }
		
		//managed=[DSLManaged]
		public Assignment getManagedAssignment_3() { return cManagedAssignment_3; }
		
		//[DSLManaged]
		public CrossReference getManagedDSLManagedCrossReference_3_0() { return cManagedDSLManagedCrossReference_3_0; }
		
		//ID
		public RuleCall getManagedDSLManagedIDTerminalRuleCall_3_0_1() { return cManagedDSLManagedIDTerminalRuleCall_3_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class DSLProbeBelongsToElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLProbeBelongsTo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProbeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cProbeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cProbeDSLProbeCrossReference_1_0 = (CrossReference)cProbeAssignment_1.eContents().get(0);
		private final RuleCall cProbeDSLProbeIDTerminalRuleCall_1_0_1 = (RuleCall)cProbeDSLProbeCrossReference_1_0.eContents().get(1);
		private final Keyword cMustBeInManagedKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cManagedAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cManagedDSLManagedCrossReference_3_0 = (CrossReference)cManagedAssignment_3.eContents().get(0);
		private final RuleCall cManagedDSLManagedIDTerminalRuleCall_3_0_1 = (RuleCall)cManagedDSLManagedCrossReference_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DSLProbeBelongsTo:
		//	'probe' probe=[DSLProbe] 'must-be-in-managed' managed=[DSLManaged] ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'probe' probe=[DSLProbe] 'must-be-in-managed' managed=[DSLManaged] ';'
		public Group getGroup() { return cGroup; }
		
		//'probe'
		public Keyword getProbeKeyword_0() { return cProbeKeyword_0; }
		
		//probe=[DSLProbe]
		public Assignment getProbeAssignment_1() { return cProbeAssignment_1; }
		
		//[DSLProbe]
		public CrossReference getProbeDSLProbeCrossReference_1_0() { return cProbeDSLProbeCrossReference_1_0; }
		
		//ID
		public RuleCall getProbeDSLProbeIDTerminalRuleCall_1_0_1() { return cProbeDSLProbeIDTerminalRuleCall_1_0_1; }
		
		//'must-be-in-managed'
		public Keyword getMustBeInManagedKeyword_2() { return cMustBeInManagedKeyword_2; }
		
		//managed=[DSLManaged]
		public Assignment getManagedAssignment_3() { return cManagedAssignment_3; }
		
		//[DSLManaged]
		public CrossReference getManagedDSLManagedCrossReference_3_0() { return cManagedDSLManagedCrossReference_3_0; }
		
		//ID
		public RuleCall getManagedDSLManagedIDTerminalRuleCall_3_0_1() { return cManagedDSLManagedIDTerminalRuleCall_3_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class DSLManagingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLManaging");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cManagingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//DSLManaging:
		//	'Managing' name=ID ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'Managing' name=ID ';'
		public Group getGroup() { return cGroup; }
		
		//'Managing'
		public Keyword getManagingKeyword_0() { return cManagingKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class DSLManagedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLManaged");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cManagedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cWithInterfaceKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cInterfaceAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cInterfaceManagedInterfaceParserRuleCall_2_1_0 = (RuleCall)cInterfaceAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cInterfaceAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cInterfaceManagedInterfaceParserRuleCall_2_2_1_0 = (RuleCall)cInterfaceAssignment_2_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DSLManaged:
		//	'Managed' name=ID ('with-interface' interface+=ManagedInterface (',' interface+=ManagedInterface)*)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'Managed' name=ID ('with-interface' interface+=ManagedInterface (',' interface+=ManagedInterface)*)? ';'
		public Group getGroup() { return cGroup; }
		
		//'Managed'
		public Keyword getManagedKeyword_0() { return cManagedKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('with-interface' interface+=ManagedInterface (',' interface+=ManagedInterface)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'with-interface'
		public Keyword getWithInterfaceKeyword_2_0() { return cWithInterfaceKeyword_2_0; }
		
		//interface+=ManagedInterface
		public Assignment getInterfaceAssignment_2_1() { return cInterfaceAssignment_2_1; }
		
		//ManagedInterface
		public RuleCall getInterfaceManagedInterfaceParserRuleCall_2_1_0() { return cInterfaceManagedInterfaceParserRuleCall_2_1_0; }
		
		//(',' interface+=ManagedInterface)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//interface+=ManagedInterface
		public Assignment getInterfaceAssignment_2_2_1() { return cInterfaceAssignment_2_2_1; }
		
		//ManagedInterface
		public RuleCall getInterfaceManagedInterfaceParserRuleCall_2_2_1_0() { return cInterfaceManagedInterfaceParserRuleCall_2_2_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class DSLControlLoopManagerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLControlLoopManager");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cControlLoopManagerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cTypeOfKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cDSLTypeCLMParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cWithInterfaceKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cInterfaceAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cInterfaceControlLoopManagerInterfaceParserRuleCall_4_1_0 = (RuleCall)cInterfaceAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cInterfaceAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cInterfaceControlLoopManagerInterfaceParserRuleCall_4_2_1_0 = (RuleCall)cInterfaceAssignment_4_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//DSLControlLoopManager:
		//	'ControlLoopManager' name=ID 'typeOf' DSLTypeCLM ('with-interface' interface+=ControlLoopManagerInterface (','
		//	interface+=ControlLoopManagerInterface)*)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'ControlLoopManager' name=ID 'typeOf' DSLTypeCLM ('with-interface' interface+=ControlLoopManagerInterface (','
		//interface+=ControlLoopManagerInterface)*)? ';'
		public Group getGroup() { return cGroup; }
		
		//'ControlLoopManager'
		public Keyword getControlLoopManagerKeyword_0() { return cControlLoopManagerKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'typeOf'
		public Keyword getTypeOfKeyword_2() { return cTypeOfKeyword_2; }
		
		//DSLTypeCLM
		public RuleCall getDSLTypeCLMParserRuleCall_3() { return cDSLTypeCLMParserRuleCall_3; }
		
		//('with-interface' interface+=ControlLoopManagerInterface (',' interface+=ControlLoopManagerInterface)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'with-interface'
		public Keyword getWithInterfaceKeyword_4_0() { return cWithInterfaceKeyword_4_0; }
		
		//interface+=ControlLoopManagerInterface
		public Assignment getInterfaceAssignment_4_1() { return cInterfaceAssignment_4_1; }
		
		//ControlLoopManagerInterface
		public RuleCall getInterfaceControlLoopManagerInterfaceParserRuleCall_4_1_0() { return cInterfaceControlLoopManagerInterfaceParserRuleCall_4_1_0; }
		
		//(',' interface+=ControlLoopManagerInterface)*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//','
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }
		
		//interface+=ControlLoopManagerInterface
		public Assignment getInterfaceAssignment_4_2_1() { return cInterfaceAssignment_4_2_1; }
		
		//ControlLoopManagerInterface
		public RuleCall getInterfaceControlLoopManagerInterfaceParserRuleCall_4_2_1_0() { return cInterfaceControlLoopManagerInterfaceParserRuleCall_4_2_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class DSLTypeCLMElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLTypeCLM");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSynchronizedKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cCoordinatedKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cIndependentKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//DSLTypeCLM:
		//	'Synchronized' | 'Coordinated' | 'Independent';
		@Override public ParserRule getRule() { return rule; }
		
		//'Synchronized' | 'Coordinated' | 'Independent'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Synchronized'
		public Keyword getSynchronizedKeyword_0() { return cSynchronizedKeyword_0; }
		
		//'Coordinated'
		public Keyword getCoordinatedKeyword_1() { return cCoordinatedKeyword_1; }
		
		//'Independent'
		public Keyword getIndependentKeyword_2() { return cIndependentKeyword_2; }
	}
	public class DSLControlLoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLControlLoop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cControlLoopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cWithInterfaceKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cInterfaceAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cInterfaceControlLoopInterfaceParserRuleCall_2_1_0 = (RuleCall)cInterfaceAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cInterfaceAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cInterfaceControlLoopInterfaceParserRuleCall_2_2_1_0 = (RuleCall)cInterfaceAssignment_2_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DSLControlLoop:
		//	'ControlLoop' name=ID ('with-interface' interface+=ControlLoopInterface (',' interface+=ControlLoopInterface)*)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'ControlLoop' name=ID ('with-interface' interface+=ControlLoopInterface (',' interface+=ControlLoopInterface)*)? ';'
		public Group getGroup() { return cGroup; }
		
		//'ControlLoop'
		public Keyword getControlLoopKeyword_0() { return cControlLoopKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('with-interface' interface+=ControlLoopInterface (',' interface+=ControlLoopInterface)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'with-interface'
		public Keyword getWithInterfaceKeyword_2_0() { return cWithInterfaceKeyword_2_0; }
		
		//interface+=ControlLoopInterface
		public Assignment getInterfaceAssignment_2_1() { return cInterfaceAssignment_2_1; }
		
		//ControlLoopInterface
		public RuleCall getInterfaceControlLoopInterfaceParserRuleCall_2_1_0() { return cInterfaceControlLoopInterfaceParserRuleCall_2_1_0; }
		
		//(',' interface+=ControlLoopInterface)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//interface+=ControlLoopInterface
		public Assignment getInterfaceAssignment_2_2_1() { return cInterfaceAssignment_2_2_1; }
		
		//ControlLoopInterface
		public RuleCall getInterfaceControlLoopInterfaceParserRuleCall_2_2_1_0() { return cInterfaceControlLoopInterfaceParserRuleCall_2_2_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class DSLMonitorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLMonitor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMonitorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cWithInterfaceKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cInterfaceAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cInterfaceMonitorInterfaceParserRuleCall_2_1_0 = (RuleCall)cInterfaceAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cInterfaceAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cInterfaceMonitorInterfaceParserRuleCall_2_2_1_0 = (RuleCall)cInterfaceAssignment_2_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DSLMonitor:
		//	'Monitor' name=ID ('with-interface' interface+=MonitorInterface (',' interface+=MonitorInterface)*)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'Monitor' name=ID ('with-interface' interface+=MonitorInterface (',' interface+=MonitorInterface)*)? ';'
		public Group getGroup() { return cGroup; }
		
		//'Monitor'
		public Keyword getMonitorKeyword_0() { return cMonitorKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('with-interface' interface+=MonitorInterface (',' interface+=MonitorInterface)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'with-interface'
		public Keyword getWithInterfaceKeyword_2_0() { return cWithInterfaceKeyword_2_0; }
		
		//interface+=MonitorInterface
		public Assignment getInterfaceAssignment_2_1() { return cInterfaceAssignment_2_1; }
		
		//MonitorInterface
		public RuleCall getInterfaceMonitorInterfaceParserRuleCall_2_1_0() { return cInterfaceMonitorInterfaceParserRuleCall_2_1_0; }
		
		//(',' interface+=MonitorInterface)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//interface+=MonitorInterface
		public Assignment getInterfaceAssignment_2_2_1() { return cInterfaceAssignment_2_2_1; }
		
		//MonitorInterface
		public RuleCall getInterfaceMonitorInterfaceParserRuleCall_2_2_1_0() { return cInterfaceMonitorInterfaceParserRuleCall_2_2_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class DSLAnalyzerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLAnalyzer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAnalyzerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cWithInterfaceKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cInterfaceAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cInterfaceAnalyzerInterfaceParserRuleCall_2_1_0 = (RuleCall)cInterfaceAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cInterfaceAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cInterfaceAnalyzerInterfaceParserRuleCall_2_2_1_0 = (RuleCall)cInterfaceAssignment_2_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DSLAnalyzer:
		//	'Analyzer' name=ID ('with-interface' interface+=AnalyzerInterface (',' interface+=AnalyzerInterface)*)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'Analyzer' name=ID ('with-interface' interface+=AnalyzerInterface (',' interface+=AnalyzerInterface)*)? ';'
		public Group getGroup() { return cGroup; }
		
		//'Analyzer'
		public Keyword getAnalyzerKeyword_0() { return cAnalyzerKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('with-interface' interface+=AnalyzerInterface (',' interface+=AnalyzerInterface)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'with-interface'
		public Keyword getWithInterfaceKeyword_2_0() { return cWithInterfaceKeyword_2_0; }
		
		//interface+=AnalyzerInterface
		public Assignment getInterfaceAssignment_2_1() { return cInterfaceAssignment_2_1; }
		
		//AnalyzerInterface
		public RuleCall getInterfaceAnalyzerInterfaceParserRuleCall_2_1_0() { return cInterfaceAnalyzerInterfaceParserRuleCall_2_1_0; }
		
		//(',' interface+=AnalyzerInterface)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//interface+=AnalyzerInterface
		public Assignment getInterfaceAssignment_2_2_1() { return cInterfaceAssignment_2_2_1; }
		
		//AnalyzerInterface
		public RuleCall getInterfaceAnalyzerInterfaceParserRuleCall_2_2_1_0() { return cInterfaceAnalyzerInterfaceParserRuleCall_2_2_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class DSLPlannerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLPlanner");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPlannerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cWithInterfaceKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cInterfaceAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cInterfacePlannerInterfaceParserRuleCall_2_1_0 = (RuleCall)cInterfaceAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cInterfaceAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cInterfacePlannerInterfaceParserRuleCall_2_2_1_0 = (RuleCall)cInterfaceAssignment_2_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DSLPlanner:
		//	'Planner' name=ID ('with-interface' interface+=PlannerInterface (',' interface+=PlannerInterface)*)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'Planner' name=ID ('with-interface' interface+=PlannerInterface (',' interface+=PlannerInterface)*)? ';'
		public Group getGroup() { return cGroup; }
		
		//'Planner'
		public Keyword getPlannerKeyword_0() { return cPlannerKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('with-interface' interface+=PlannerInterface (',' interface+=PlannerInterface)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'with-interface'
		public Keyword getWithInterfaceKeyword_2_0() { return cWithInterfaceKeyword_2_0; }
		
		//interface+=PlannerInterface
		public Assignment getInterfaceAssignment_2_1() { return cInterfaceAssignment_2_1; }
		
		//PlannerInterface
		public RuleCall getInterfacePlannerInterfaceParserRuleCall_2_1_0() { return cInterfacePlannerInterfaceParserRuleCall_2_1_0; }
		
		//(',' interface+=PlannerInterface)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//interface+=PlannerInterface
		public Assignment getInterfaceAssignment_2_2_1() { return cInterfaceAssignment_2_2_1; }
		
		//PlannerInterface
		public RuleCall getInterfacePlannerInterfaceParserRuleCall_2_2_1_0() { return cInterfacePlannerInterfaceParserRuleCall_2_2_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class DSLExecutorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLExecutor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExecutorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cWithInterfaceKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cInterfaceAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cInterfaceExecutorInterfaceParserRuleCall_2_1_0 = (RuleCall)cInterfaceAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cInterfaceAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cInterfaceExecutorInterfaceParserRuleCall_2_2_1_0 = (RuleCall)cInterfaceAssignment_2_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DSLExecutor:
		//	'Executor' name=ID ('with-interface' interface+=ExecutorInterface (',' interface+=ExecutorInterface)*)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'Executor' name=ID ('with-interface' interface+=ExecutorInterface (',' interface+=ExecutorInterface)*)? ';'
		public Group getGroup() { return cGroup; }
		
		//'Executor'
		public Keyword getExecutorKeyword_0() { return cExecutorKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('with-interface' interface+=ExecutorInterface (',' interface+=ExecutorInterface)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'with-interface'
		public Keyword getWithInterfaceKeyword_2_0() { return cWithInterfaceKeyword_2_0; }
		
		//interface+=ExecutorInterface
		public Assignment getInterfaceAssignment_2_1() { return cInterfaceAssignment_2_1; }
		
		//ExecutorInterface
		public RuleCall getInterfaceExecutorInterfaceParserRuleCall_2_1_0() { return cInterfaceExecutorInterfaceParserRuleCall_2_1_0; }
		
		//(',' interface+=ExecutorInterface)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//interface+=ExecutorInterface
		public Assignment getInterfaceAssignment_2_2_1() { return cInterfaceAssignment_2_2_1; }
		
		//ExecutorInterface
		public RuleCall getInterfaceExecutorInterfaceParserRuleCall_2_2_1_0() { return cInterfaceExecutorInterfaceParserRuleCall_2_2_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class DSLKnowledgeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLKnowledge");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cKnowledgeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cWithInterfaceKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cInterfaceAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cInterfaceKnowledgeInterfaceParserRuleCall_2_1_0 = (RuleCall)cInterfaceAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cInterfaceAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cInterfaceKnowledgeInterfaceParserRuleCall_2_2_1_0 = (RuleCall)cInterfaceAssignment_2_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DSLKnowledge:
		//	'Knowledge' name=ID ('with-interface' interface+=KnowledgeInterface (',' interface+=KnowledgeInterface)*)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'Knowledge' name=ID ('with-interface' interface+=KnowledgeInterface (',' interface+=KnowledgeInterface)*)? ';'
		public Group getGroup() { return cGroup; }
		
		//'Knowledge'
		public Keyword getKnowledgeKeyword_0() { return cKnowledgeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('with-interface' interface+=KnowledgeInterface (',' interface+=KnowledgeInterface)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'with-interface'
		public Keyword getWithInterfaceKeyword_2_0() { return cWithInterfaceKeyword_2_0; }
		
		//interface+=KnowledgeInterface
		public Assignment getInterfaceAssignment_2_1() { return cInterfaceAssignment_2_1; }
		
		//KnowledgeInterface
		public RuleCall getInterfaceKnowledgeInterfaceParserRuleCall_2_1_0() { return cInterfaceKnowledgeInterfaceParserRuleCall_2_1_0; }
		
		//(',' interface+=KnowledgeInterface)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//interface+=KnowledgeInterface
		public Assignment getInterfaceAssignment_2_2_1() { return cInterfaceAssignment_2_2_1; }
		
		//KnowledgeInterface
		public RuleCall getInterfaceKnowledgeInterfaceParserRuleCall_2_2_1_0() { return cInterfaceKnowledgeInterfaceParserRuleCall_2_2_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class DSLSensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLSensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSensorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cWithInterfaceKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cInterfaceAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cInterfaceSensorInterfaceParserRuleCall_2_1_0 = (RuleCall)cInterfaceAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cInterfaceAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cInterfaceSensorInterfaceParserRuleCall_2_2_1_0 = (RuleCall)cInterfaceAssignment_2_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DSLSensor:
		//	'Sensor' name=ID ('with-interface' interface+=SensorInterface (',' interface+=SensorInterface)*)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'Sensor' name=ID ('with-interface' interface+=SensorInterface (',' interface+=SensorInterface)*)? ';'
		public Group getGroup() { return cGroup; }
		
		//'Sensor'
		public Keyword getSensorKeyword_0() { return cSensorKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('with-interface' interface+=SensorInterface (',' interface+=SensorInterface)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'with-interface'
		public Keyword getWithInterfaceKeyword_2_0() { return cWithInterfaceKeyword_2_0; }
		
		//interface+=SensorInterface
		public Assignment getInterfaceAssignment_2_1() { return cInterfaceAssignment_2_1; }
		
		//SensorInterface
		public RuleCall getInterfaceSensorInterfaceParserRuleCall_2_1_0() { return cInterfaceSensorInterfaceParserRuleCall_2_1_0; }
		
		//(',' interface+=SensorInterface)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//interface+=SensorInterface
		public Assignment getInterfaceAssignment_2_2_1() { return cInterfaceAssignment_2_2_1; }
		
		//SensorInterface
		public RuleCall getInterfaceSensorInterfaceParserRuleCall_2_2_1_0() { return cInterfaceSensorInterfaceParserRuleCall_2_2_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class DSLEffectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLEffector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEffectorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cWithInterfaceKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cInterfaceAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cInterfaceEffectorInterfaceParserRuleCall_2_1_0 = (RuleCall)cInterfaceAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cInterfaceAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cInterfaceEffectorInterfaceParserRuleCall_2_2_1_0 = (RuleCall)cInterfaceAssignment_2_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DSLEffector:
		//	'Effector' name=ID ('with-interface' interface+=EffectorInterface (',' interface+=EffectorInterface)*)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'Effector' name=ID ('with-interface' interface+=EffectorInterface (',' interface+=EffectorInterface)*)? ';'
		public Group getGroup() { return cGroup; }
		
		//'Effector'
		public Keyword getEffectorKeyword_0() { return cEffectorKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('with-interface' interface+=EffectorInterface (',' interface+=EffectorInterface)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'with-interface'
		public Keyword getWithInterfaceKeyword_2_0() { return cWithInterfaceKeyword_2_0; }
		
		//interface+=EffectorInterface
		public Assignment getInterfaceAssignment_2_1() { return cInterfaceAssignment_2_1; }
		
		//EffectorInterface
		public RuleCall getInterfaceEffectorInterfaceParserRuleCall_2_1_0() { return cInterfaceEffectorInterfaceParserRuleCall_2_1_0; }
		
		//(',' interface+=EffectorInterface)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//interface+=EffectorInterface
		public Assignment getInterfaceAssignment_2_2_1() { return cInterfaceAssignment_2_2_1; }
		
		//EffectorInterface
		public RuleCall getInterfaceEffectorInterfaceParserRuleCall_2_2_1_0() { return cInterfaceEffectorInterfaceParserRuleCall_2_2_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class DSLProbeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLProbe");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProbeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cWithInterfaceKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cProbeinterfacesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cProbeinterfacesProbeInterfaceParserRuleCall_2_1_0 = (RuleCall)cProbeinterfacesAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cProbeinterfacesAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cProbeinterfacesProbeInterfaceParserRuleCall_2_2_1_0 = (RuleCall)cProbeinterfacesAssignment_2_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DSLProbe:
		//	'Probe' name=ID ('with-interface' probeinterfaces+=ProbeInterface ("," probeinterfaces+=ProbeInterface)*)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'Probe' name=ID ('with-interface' probeinterfaces+=ProbeInterface ("," probeinterfaces+=ProbeInterface)*)? ';'
		public Group getGroup() { return cGroup; }
		
		//'Probe'
		public Keyword getProbeKeyword_0() { return cProbeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('with-interface' probeinterfaces+=ProbeInterface ("," probeinterfaces+=ProbeInterface)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'with-interface'
		public Keyword getWithInterfaceKeyword_2_0() { return cWithInterfaceKeyword_2_0; }
		
		//probeinterfaces+=ProbeInterface
		public Assignment getProbeinterfacesAssignment_2_1() { return cProbeinterfacesAssignment_2_1; }
		
		//ProbeInterface
		public RuleCall getProbeinterfacesProbeInterfaceParserRuleCall_2_1_0() { return cProbeinterfacesProbeInterfaceParserRuleCall_2_1_0; }
		
		//("," probeinterfaces+=ProbeInterface)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//probeinterfaces+=ProbeInterface
		public Assignment getProbeinterfacesAssignment_2_2_1() { return cProbeinterfacesAssignment_2_2_1; }
		
		//ProbeInterface
		public RuleCall getProbeinterfacesProbeInterfaceParserRuleCall_2_2_1_0() { return cProbeinterfacesProbeInterfaceParserRuleCall_2_2_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class DSLGaugeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLGauge");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGaugeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cWithInterfaceKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cInterfaceAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cInterfaceGaugeInterfaceParserRuleCall_2_1_0 = (RuleCall)cInterfaceAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cInterfaceAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cInterfaceGaugeInterfaceParserRuleCall_2_2_1_0 = (RuleCall)cInterfaceAssignment_2_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DSLGauge:
		//	'Gauge' name=ID ('with-interface' interface+=GaugeInterface (',' interface+=GaugeInterface)*)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'Gauge' name=ID ('with-interface' interface+=GaugeInterface (',' interface+=GaugeInterface)*)? ';'
		public Group getGroup() { return cGroup; }
		
		//'Gauge'
		public Keyword getGaugeKeyword_0() { return cGaugeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('with-interface' interface+=GaugeInterface (',' interface+=GaugeInterface)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'with-interface'
		public Keyword getWithInterfaceKeyword_2_0() { return cWithInterfaceKeyword_2_0; }
		
		//interface+=GaugeInterface
		public Assignment getInterfaceAssignment_2_1() { return cInterfaceAssignment_2_1; }
		
		//GaugeInterface
		public RuleCall getInterfaceGaugeInterfaceParserRuleCall_2_1_0() { return cInterfaceGaugeInterfaceParserRuleCall_2_1_0; }
		
		//(',' interface+=GaugeInterface)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//interface+=GaugeInterface
		public Assignment getInterfaceAssignment_2_2_1() { return cInterfaceAssignment_2_2_1; }
		
		//GaugeInterface
		public RuleCall getInterfaceGaugeInterfaceParserRuleCall_2_2_1_0() { return cInterfaceGaugeInterfaceParserRuleCall_2_2_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class DSLReferenceInputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLReferenceInput");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReferenceInputKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cWithInterfaceKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cInterfaceAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cInterfaceReferenceInputInterfaceParserRuleCall_2_1_0 = (RuleCall)cInterfaceAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cInterfaceAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cInterfaceReferenceInputInterfaceParserRuleCall_2_2_1_0 = (RuleCall)cInterfaceAssignment_2_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DSLReferenceInput:
		//	'ReferenceInput' name=ID ('with-interface' interface+=ReferenceInputInterface (','
		//	interface+=ReferenceInputInterface)*)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'ReferenceInput' name=ID ('with-interface' interface+=ReferenceInputInterface (','
		//interface+=ReferenceInputInterface)*)? ';'
		public Group getGroup() { return cGroup; }
		
		//'ReferenceInput'
		public Keyword getReferenceInputKeyword_0() { return cReferenceInputKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('with-interface' interface+=ReferenceInputInterface (',' interface+=ReferenceInputInterface)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'with-interface'
		public Keyword getWithInterfaceKeyword_2_0() { return cWithInterfaceKeyword_2_0; }
		
		//interface+=ReferenceInputInterface
		public Assignment getInterfaceAssignment_2_1() { return cInterfaceAssignment_2_1; }
		
		//ReferenceInputInterface
		public RuleCall getInterfaceReferenceInputInterfaceParserRuleCall_2_1_0() { return cInterfaceReferenceInputInterfaceParserRuleCall_2_1_0; }
		
		//(',' interface+=ReferenceInputInterface)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//interface+=ReferenceInputInterface
		public Assignment getInterfaceAssignment_2_2_1() { return cInterfaceAssignment_2_2_1; }
		
		//ReferenceInputInterface
		public RuleCall getInterfaceReferenceInputInterfaceParserRuleCall_2_2_1_0() { return cInterfaceReferenceInputInterfaceParserRuleCall_2_2_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class DSLMeasuredOutputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLMeasuredOutput");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMeasuredOutputKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cWithInterfaceKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cInterfaceAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cInterfaceMeasuredOutputInterfaceParserRuleCall_2_1_0 = (RuleCall)cInterfaceAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cInterfaceAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cInterfaceMeasuredOutputInterfaceParserRuleCall_2_2_1_0 = (RuleCall)cInterfaceAssignment_2_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DSLMeasuredOutput:
		//	'MeasuredOutput' name=ID ('with-interface' interface+=MeasuredOutputInterface (','
		//	interface+=MeasuredOutputInterface)*)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'MeasuredOutput' name=ID ('with-interface' interface+=MeasuredOutputInterface (','
		//interface+=MeasuredOutputInterface)*)? ';'
		public Group getGroup() { return cGroup; }
		
		//'MeasuredOutput'
		public Keyword getMeasuredOutputKeyword_0() { return cMeasuredOutputKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('with-interface' interface+=MeasuredOutputInterface (',' interface+=MeasuredOutputInterface)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'with-interface'
		public Keyword getWithInterfaceKeyword_2_0() { return cWithInterfaceKeyword_2_0; }
		
		//interface+=MeasuredOutputInterface
		public Assignment getInterfaceAssignment_2_1() { return cInterfaceAssignment_2_1; }
		
		//MeasuredOutputInterface
		public RuleCall getInterfaceMeasuredOutputInterfaceParserRuleCall_2_1_0() { return cInterfaceMeasuredOutputInterfaceParserRuleCall_2_1_0; }
		
		//(',' interface+=MeasuredOutputInterface)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//interface+=MeasuredOutputInterface
		public Assignment getInterfaceAssignment_2_2_1() { return cInterfaceAssignment_2_2_1; }
		
		//MeasuredOutputInterface
		public RuleCall getInterfaceMeasuredOutputInterfaceParserRuleCall_2_2_1_0() { return cInterfaceMeasuredOutputInterfaceParserRuleCall_2_2_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class MeasuredOutputInterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.MeasuredOutputInterface");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//MeasuredOutputInterface:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class GaugeInterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.GaugeInterface");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//GaugeInterface:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class EffectorInterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.EffectorInterface");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//EffectorInterface:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class ProbeInterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.ProbeInterface");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//ProbeInterface:
		//	name+=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name+=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class SensorInterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.SensorInterface");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//SensorInterface:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class MonitorInterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.MonitorInterface");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//MonitorInterface:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class AnalyzerInterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.AnalyzerInterface");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//AnalyzerInterface:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class PlannerInterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.PlannerInterface");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//PlannerInterface:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class ExecutorInterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.ExecutorInterface");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//ExecutorInterface:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class KnowledgeInterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.KnowledgeInterface");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//KnowledgeInterface:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class ControlLoopInterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.ControlLoopInterface");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//ControlLoopInterface:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class ControlLoopManagerInterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.ControlLoopManagerInterface");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//ControlLoopManagerInterface:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class ReferenceInputInterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.ReferenceInputInterface");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//ReferenceInputInterface:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class ManagedInterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.ManagedInterface");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//ManagedInterface:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	
	
	private final ArchitectureDefinitionElements pArchitectureDefinition;
	private final DSLAbstractionElements pDSLAbstraction;
	private final DSLCompositionElements pDSLComposition;
	private final DSLRestrictionElements pDSLRestriction;
	private final DSLSensorBelongsToElements pDSLSensorBelongsTo;
	private final DSLReferenceInputBelongsToElements pDSLReferenceInputBelongsTo;
	private final DSLEffectorBelongsToElements pDSLEffectorBelongsTo;
	private final DSLMonitorBelongsTo1Elements pDSLMonitorBelongsTo1;
	private final DSLMonitorBelongsTo2Elements pDSLMonitorBelongsTo2;
	private final DSLAnalyzerBelongsTo1Elements pDSLAnalyzerBelongsTo1;
	private final DSLAnalyzerBelongsTo2Elements pDSLAnalyzerBelongsTo2;
	private final DSLPlannerBelongsTo1Elements pDSLPlannerBelongsTo1;
	private final DSLPlannerBelongsTo2Elements pDSLPlannerBelongsTo2;
	private final DSLExecutorBelongsTo1Elements pDSLExecutorBelongsTo1;
	private final DSLExecutorBelongsTo2Elements pDSLExecutorBelongsTo2;
	private final DSLClBelongsTo1Elements pDSLClBelongsTo1;
	private final DSLClBelongsTo2Elements pDSLClBelongsTo2;
	private final DSLClmBelongsToElements pDSLClmBelongsTo;
	private final DSLMeasuredOuputBelongsToElements pDSLMeasuredOuputBelongsTo;
	private final DSLGaugeBelongsToElements pDSLGaugeBelongsTo;
	private final DSLProbeBelongsToElements pDSLProbeBelongsTo;
	private final DSLManagingElements pDSLManaging;
	private final DSLManagedElements pDSLManaged;
	private final DSLControlLoopManagerElements pDSLControlLoopManager;
	private final DSLTypeCLMElements pDSLTypeCLM;
	private final DSLControlLoopElements pDSLControlLoop;
	private final DSLMonitorElements pDSLMonitor;
	private final DSLAnalyzerElements pDSLAnalyzer;
	private final DSLPlannerElements pDSLPlanner;
	private final DSLExecutorElements pDSLExecutor;
	private final DSLKnowledgeElements pDSLKnowledge;
	private final DSLSensorElements pDSLSensor;
	private final DSLEffectorElements pDSLEffector;
	private final DSLProbeElements pDSLProbe;
	private final DSLGaugeElements pDSLGauge;
	private final DSLReferenceInputElements pDSLReferenceInput;
	private final DSLMeasuredOutputElements pDSLMeasuredOutput;
	private final MeasuredOutputInterfaceElements pMeasuredOutputInterface;
	private final GaugeInterfaceElements pGaugeInterface;
	private final EffectorInterfaceElements pEffectorInterface;
	private final ProbeInterfaceElements pProbeInterface;
	private final SensorInterfaceElements pSensorInterface;
	private final MonitorInterfaceElements pMonitorInterface;
	private final AnalyzerInterfaceElements pAnalyzerInterface;
	private final PlannerInterfaceElements pPlannerInterface;
	private final ExecutorInterfaceElements pExecutorInterface;
	private final KnowledgeInterfaceElements pKnowledgeInterface;
	private final ControlLoopInterfaceElements pControlLoopInterface;
	private final ControlLoopManagerInterfaceElements pControlLoopManagerInterface;
	private final ReferenceInputInterfaceElements pReferenceInputInterface;
	private final ManagedInterfaceElements pManagedInterface;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SasDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pArchitectureDefinition = new ArchitectureDefinitionElements();
		this.pDSLAbstraction = new DSLAbstractionElements();
		this.pDSLComposition = new DSLCompositionElements();
		this.pDSLRestriction = new DSLRestrictionElements();
		this.pDSLSensorBelongsTo = new DSLSensorBelongsToElements();
		this.pDSLReferenceInputBelongsTo = new DSLReferenceInputBelongsToElements();
		this.pDSLEffectorBelongsTo = new DSLEffectorBelongsToElements();
		this.pDSLMonitorBelongsTo1 = new DSLMonitorBelongsTo1Elements();
		this.pDSLMonitorBelongsTo2 = new DSLMonitorBelongsTo2Elements();
		this.pDSLAnalyzerBelongsTo1 = new DSLAnalyzerBelongsTo1Elements();
		this.pDSLAnalyzerBelongsTo2 = new DSLAnalyzerBelongsTo2Elements();
		this.pDSLPlannerBelongsTo1 = new DSLPlannerBelongsTo1Elements();
		this.pDSLPlannerBelongsTo2 = new DSLPlannerBelongsTo2Elements();
		this.pDSLExecutorBelongsTo1 = new DSLExecutorBelongsTo1Elements();
		this.pDSLExecutorBelongsTo2 = new DSLExecutorBelongsTo2Elements();
		this.pDSLClBelongsTo1 = new DSLClBelongsTo1Elements();
		this.pDSLClBelongsTo2 = new DSLClBelongsTo2Elements();
		this.pDSLClmBelongsTo = new DSLClmBelongsToElements();
		this.pDSLMeasuredOuputBelongsTo = new DSLMeasuredOuputBelongsToElements();
		this.pDSLGaugeBelongsTo = new DSLGaugeBelongsToElements();
		this.pDSLProbeBelongsTo = new DSLProbeBelongsToElements();
		this.pDSLManaging = new DSLManagingElements();
		this.pDSLManaged = new DSLManagedElements();
		this.pDSLControlLoopManager = new DSLControlLoopManagerElements();
		this.pDSLTypeCLM = new DSLTypeCLMElements();
		this.pDSLControlLoop = new DSLControlLoopElements();
		this.pDSLMonitor = new DSLMonitorElements();
		this.pDSLAnalyzer = new DSLAnalyzerElements();
		this.pDSLPlanner = new DSLPlannerElements();
		this.pDSLExecutor = new DSLExecutorElements();
		this.pDSLKnowledge = new DSLKnowledgeElements();
		this.pDSLSensor = new DSLSensorElements();
		this.pDSLEffector = new DSLEffectorElements();
		this.pDSLProbe = new DSLProbeElements();
		this.pDSLGauge = new DSLGaugeElements();
		this.pDSLReferenceInput = new DSLReferenceInputElements();
		this.pDSLMeasuredOutput = new DSLMeasuredOutputElements();
		this.pMeasuredOutputInterface = new MeasuredOutputInterfaceElements();
		this.pGaugeInterface = new GaugeInterfaceElements();
		this.pEffectorInterface = new EffectorInterfaceElements();
		this.pProbeInterface = new ProbeInterfaceElements();
		this.pSensorInterface = new SensorInterfaceElements();
		this.pMonitorInterface = new MonitorInterfaceElements();
		this.pAnalyzerInterface = new AnalyzerInterfaceElements();
		this.pPlannerInterface = new PlannerInterfaceElements();
		this.pExecutorInterface = new ExecutorInterfaceElements();
		this.pKnowledgeInterface = new KnowledgeInterfaceElements();
		this.pControlLoopInterface = new ControlLoopInterfaceElements();
		this.pControlLoopManagerInterface = new ControlLoopManagerInterfaceElements();
		this.pReferenceInputInterface = new ReferenceInputInterfaceElements();
		this.pManagedInterface = new ManagedInterfaceElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("br.ufscar.sas.xtext.sasdsl.SasDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//ArchitectureDefinition:
	//	'Abstractions' '{' abstractions+=DSLAbstraction+ '}'
	//	'Compositions' '{' compositions+=DSLComposition* '}'
	//	'Restrictions' '{' restrictions+=DSLRestriction* '}';
	public ArchitectureDefinitionElements getArchitectureDefinitionAccess() {
		return pArchitectureDefinition;
	}
	
	public ParserRule getArchitectureDefinitionRule() {
		return getArchitectureDefinitionAccess().getRule();
	}
	
	//DSLAbstraction:
	//	DSLManaging | DSLManaged | DSLControlLoopManager | DSLControlLoop | DSLMonitor | DSLAnalyzer | DSLPlanner |
	//	DSLExecutor | DSLKnowledge | DSLSensor | DSLEffector | DSLProbe | DSLGauge | DSLReferenceInput | DSLMeasuredOutput;
	public DSLAbstractionElements getDSLAbstractionAccess() {
		return pDSLAbstraction;
	}
	
	public ParserRule getDSLAbstractionRule() {
		return getDSLAbstractionAccess().getRule();
	}
	
	//DSLComposition:
	//	DSLSensorBelongsTo | DSLReferenceInputBelongsTo | DSLEffectorBelongsTo | DSLMonitorBelongsTo1 | DSLMonitorBelongsTo2 |
	//	DSLAnalyzerBelongsTo1 | DSLAnalyzerBelongsTo2 | DSLPlannerBelongsTo1 | DSLPlannerBelongsTo2 | DSLExecutorBelongsTo1 |
	//	DSLExecutorBelongsTo2 | DSLClBelongsTo1 | DSLClBelongsTo2 | DSLClmBelongsTo | DSLMeasuredOuputBelongsTo |
	//	DSLGaugeBelongsTo | DSLProbeBelongsTo;
	public DSLCompositionElements getDSLCompositionAccess() {
		return pDSLComposition;
	}
	
	public ParserRule getDSLCompositionRule() {
		return getDSLCompositionAccess().getRule();
	}
	
	//DSLRestriction:
	//	'sensor' t=[DSLSensor] 'must-not-access-probe' type=[DSLProbe] ';' | 'sensor' t=[DSLSensor] 'must-access-probe'
	//	type=[DSLProbe] 'through-interface' probeinterface=[ProbeInterface] ';' | 'analyzer' t=[DSLAnalyzer]
	//	'must-not-access-monitor' type=[DSLMonitor] ';' | 'analyzer' t=[DSLAnalyzer] 'must-access-monitor' type=[DSLMonitor]
	//	'through-interface' interface=[MonitorInterface] ';' | 'analyzer' t=[DSLAnalyzer] 'must-not-access-planner'
	//	type=[DSLPlanner] ';' | 'analyzer' t=[DSLAnalyzer] 'must-access-planner' type=[DSLPlanner] 'through-interface'
	//	interface=[PlannerInterface] ';' | 'analyzer' t=[DSLAnalyzer] 'must-not-access-executor' type=[DSLExecutor] ';' |
	//	'analyzer' t=[DSLAnalyzer] 'must-access-executor' type=[DSLExecutor] 'through-interface' interface=[ExecutorInterface]
	//	';' | 'planner' t=[DSLPlanner] 'must-not-access-executor' type=[DSLExecutor] ';' | 'planner' t=[DSLPlanner]
	//	'must-access-executor' type=[DSLExecutor] 'through-interface' interface=[ExecutorInterface] ';' | 'analyzer'
	//	t=[DSLAnalyzer] 'must-not-access-knowledge' type=[DSLKnowledge] ';' | 'analyzer' t=[DSLAnalyzer]
	//	'must-access-knowledge' type=[DSLKnowledge] 'through-interface' interface=[KnowledgeInterface] ';' | 'planner'
	//	t=[DSLPlanner] 'must-not-access-knowledge' type=[DSLKnowledge] ';' | 'planner' t=[DSLPlanner] 'must-access-knowledge'
	//	type=[DSLKnowledge] 'through-interface' interface=[KnowledgeInterface] ';' | 'effector' t=[DSLEffector]
	//	'must-not-access-gauge' type=[DSLGauge] ';' | 'effector' t=[DSLEffector] 'must-access-gauge' type=[DSLGauge]
	//	'through-interface' interface=[GaugeInterface] ';' | 'managing' t=[DSLManaging] 'must-not-access-managed'
	//	type=[DSLManaged] ';' | 'managing' t=[DSLManaging] 'must-access-managed' type=[DSLManaged] 'through-interface'
	//	interface=[ManagedInterface] ';';
	public DSLRestrictionElements getDSLRestrictionAccess() {
		return pDSLRestriction;
	}
	
	public ParserRule getDSLRestrictionRule() {
		return getDSLRestrictionAccess().getRule();
	}
	
	//DSLSensorBelongsTo:
	//	'sensor' sensor=[DSLSensor] 'must-be-in-monitor' monitor=[DSLMonitor] ';';
	public DSLSensorBelongsToElements getDSLSensorBelongsToAccess() {
		return pDSLSensorBelongsTo;
	}
	
	public ParserRule getDSLSensorBelongsToRule() {
		return getDSLSensorBelongsToAccess().getRule();
	}
	
	//DSLReferenceInputBelongsTo:
	//	'reference-input' reference=[DSLReferenceInput] 'must-be-in-knowledge' knowledge=[DSLKnowledge] ';';
	public DSLReferenceInputBelongsToElements getDSLReferenceInputBelongsToAccess() {
		return pDSLReferenceInputBelongsTo;
	}
	
	public ParserRule getDSLReferenceInputBelongsToRule() {
		return getDSLReferenceInputBelongsToAccess().getRule();
	}
	
	//DSLEffectorBelongsTo:
	//	'effector' effector=[DSLEffector] 'must-be-in-executor' executor=[DSLExecutor] ';';
	public DSLEffectorBelongsToElements getDSLEffectorBelongsToAccess() {
		return pDSLEffectorBelongsTo;
	}
	
	public ParserRule getDSLEffectorBelongsToRule() {
		return getDSLEffectorBelongsToAccess().getRule();
	}
	
	//DSLMonitorBelongsTo1:
	//	'monitor' monitor=[DSLMonitor] 'must-be-in-control-loop' cl=[DSLControlLoop] ';';
	public DSLMonitorBelongsTo1Elements getDSLMonitorBelongsTo1Access() {
		return pDSLMonitorBelongsTo1;
	}
	
	public ParserRule getDSLMonitorBelongsTo1Rule() {
		return getDSLMonitorBelongsTo1Access().getRule();
	}
	
	//DSLMonitorBelongsTo2:
	//	'monitor' monitor=[DSLMonitor] 'must-be-in-managing' managing=[DSLManaging] ';';
	public DSLMonitorBelongsTo2Elements getDSLMonitorBelongsTo2Access() {
		return pDSLMonitorBelongsTo2;
	}
	
	public ParserRule getDSLMonitorBelongsTo2Rule() {
		return getDSLMonitorBelongsTo2Access().getRule();
	}
	
	//DSLAnalyzerBelongsTo1:
	//	'analyzer' analyzer=[DSLAnalyzer] 'must-be-in-control-loop' cl=[DSLControlLoop] ';';
	public DSLAnalyzerBelongsTo1Elements getDSLAnalyzerBelongsTo1Access() {
		return pDSLAnalyzerBelongsTo1;
	}
	
	public ParserRule getDSLAnalyzerBelongsTo1Rule() {
		return getDSLAnalyzerBelongsTo1Access().getRule();
	}
	
	//DSLAnalyzerBelongsTo2:
	//	'analyzer' analyzer=[DSLAnalyzer] 'must-be-in-managing' managing=[DSLManaging] ';';
	public DSLAnalyzerBelongsTo2Elements getDSLAnalyzerBelongsTo2Access() {
		return pDSLAnalyzerBelongsTo2;
	}
	
	public ParserRule getDSLAnalyzerBelongsTo2Rule() {
		return getDSLAnalyzerBelongsTo2Access().getRule();
	}
	
	//DSLPlannerBelongsTo1:
	//	'planner' planner=[DSLPlanner] 'must-be-in-control-loop' cl=[DSLControlLoop] ';';
	public DSLPlannerBelongsTo1Elements getDSLPlannerBelongsTo1Access() {
		return pDSLPlannerBelongsTo1;
	}
	
	public ParserRule getDSLPlannerBelongsTo1Rule() {
		return getDSLPlannerBelongsTo1Access().getRule();
	}
	
	//DSLPlannerBelongsTo2:
	//	'planner' planner=[DSLPlanner] 'must-be-in-managing' managing=[DSLManaging] ';';
	public DSLPlannerBelongsTo2Elements getDSLPlannerBelongsTo2Access() {
		return pDSLPlannerBelongsTo2;
	}
	
	public ParserRule getDSLPlannerBelongsTo2Rule() {
		return getDSLPlannerBelongsTo2Access().getRule();
	}
	
	//DSLExecutorBelongsTo1:
	//	'executor' executor=[DSLExecutor] 'must-be-in-control-loop' cl=[DSLControlLoop] ';';
	public DSLExecutorBelongsTo1Elements getDSLExecutorBelongsTo1Access() {
		return pDSLExecutorBelongsTo1;
	}
	
	public ParserRule getDSLExecutorBelongsTo1Rule() {
		return getDSLExecutorBelongsTo1Access().getRule();
	}
	
	//DSLExecutorBelongsTo2:
	//	'executor' executor=[DSLExecutor] 'must-be-in-managing' managing=[DSLManaging] ';';
	public DSLExecutorBelongsTo2Elements getDSLExecutorBelongsTo2Access() {
		return pDSLExecutorBelongsTo2;
	}
	
	public ParserRule getDSLExecutorBelongsTo2Rule() {
		return getDSLExecutorBelongsTo2Access().getRule();
	}
	
	//DSLClBelongsTo1:
	//	'control-loop' cl=[DSLControlLoop] 'must-be-in-control-loop-manager' clm=[DSLControlLoopManager] ';';
	public DSLClBelongsTo1Elements getDSLClBelongsTo1Access() {
		return pDSLClBelongsTo1;
	}
	
	public ParserRule getDSLClBelongsTo1Rule() {
		return getDSLClBelongsTo1Access().getRule();
	}
	
	//DSLClBelongsTo2:
	//	'control-loop' cl=[DSLControlLoop] 'must-be-in-managing' managing=[DSLManaging] ';';
	public DSLClBelongsTo2Elements getDSLClBelongsTo2Access() {
		return pDSLClBelongsTo2;
	}
	
	public ParserRule getDSLClBelongsTo2Rule() {
		return getDSLClBelongsTo2Access().getRule();
	}
	
	//DSLClmBelongsTo:
	//	'control-loop-manager' cl=[DSLControlLoopManager] 'must-be-in-managing' managing=[DSLManaging] ';';
	public DSLClmBelongsToElements getDSLClmBelongsToAccess() {
		return pDSLClmBelongsTo;
	}
	
	public ParserRule getDSLClmBelongsToRule() {
		return getDSLClmBelongsToAccess().getRule();
	}
	
	//DSLMeasuredOuputBelongsTo:
	//	'measured-output' measured=[DSLMeasuredOutput] 'must-be-in-managed' managed=[DSLManaged] ';';
	public DSLMeasuredOuputBelongsToElements getDSLMeasuredOuputBelongsToAccess() {
		return pDSLMeasuredOuputBelongsTo;
	}
	
	public ParserRule getDSLMeasuredOuputBelongsToRule() {
		return getDSLMeasuredOuputBelongsToAccess().getRule();
	}
	
	//DSLGaugeBelongsTo:
	//	'gauge' gauge=[DSLGauge] 'must-be-in-managed' managed=[DSLManaged] ';';
	public DSLGaugeBelongsToElements getDSLGaugeBelongsToAccess() {
		return pDSLGaugeBelongsTo;
	}
	
	public ParserRule getDSLGaugeBelongsToRule() {
		return getDSLGaugeBelongsToAccess().getRule();
	}
	
	//DSLProbeBelongsTo:
	//	'probe' probe=[DSLProbe] 'must-be-in-managed' managed=[DSLManaged] ';';
	public DSLProbeBelongsToElements getDSLProbeBelongsToAccess() {
		return pDSLProbeBelongsTo;
	}
	
	public ParserRule getDSLProbeBelongsToRule() {
		return getDSLProbeBelongsToAccess().getRule();
	}
	
	//DSLManaging:
	//	'Managing' name=ID ';';
	public DSLManagingElements getDSLManagingAccess() {
		return pDSLManaging;
	}
	
	public ParserRule getDSLManagingRule() {
		return getDSLManagingAccess().getRule();
	}
	
	//DSLManaged:
	//	'Managed' name=ID ('with-interface' interface+=ManagedInterface (',' interface+=ManagedInterface)*)? ';';
	public DSLManagedElements getDSLManagedAccess() {
		return pDSLManaged;
	}
	
	public ParserRule getDSLManagedRule() {
		return getDSLManagedAccess().getRule();
	}
	
	//DSLControlLoopManager:
	//	'ControlLoopManager' name=ID 'typeOf' DSLTypeCLM ('with-interface' interface+=ControlLoopManagerInterface (','
	//	interface+=ControlLoopManagerInterface)*)? ';';
	public DSLControlLoopManagerElements getDSLControlLoopManagerAccess() {
		return pDSLControlLoopManager;
	}
	
	public ParserRule getDSLControlLoopManagerRule() {
		return getDSLControlLoopManagerAccess().getRule();
	}
	
	//DSLTypeCLM:
	//	'Synchronized' | 'Coordinated' | 'Independent';
	public DSLTypeCLMElements getDSLTypeCLMAccess() {
		return pDSLTypeCLM;
	}
	
	public ParserRule getDSLTypeCLMRule() {
		return getDSLTypeCLMAccess().getRule();
	}
	
	//DSLControlLoop:
	//	'ControlLoop' name=ID ('with-interface' interface+=ControlLoopInterface (',' interface+=ControlLoopInterface)*)? ';';
	public DSLControlLoopElements getDSLControlLoopAccess() {
		return pDSLControlLoop;
	}
	
	public ParserRule getDSLControlLoopRule() {
		return getDSLControlLoopAccess().getRule();
	}
	
	//DSLMonitor:
	//	'Monitor' name=ID ('with-interface' interface+=MonitorInterface (',' interface+=MonitorInterface)*)? ';';
	public DSLMonitorElements getDSLMonitorAccess() {
		return pDSLMonitor;
	}
	
	public ParserRule getDSLMonitorRule() {
		return getDSLMonitorAccess().getRule();
	}
	
	//DSLAnalyzer:
	//	'Analyzer' name=ID ('with-interface' interface+=AnalyzerInterface (',' interface+=AnalyzerInterface)*)? ';';
	public DSLAnalyzerElements getDSLAnalyzerAccess() {
		return pDSLAnalyzer;
	}
	
	public ParserRule getDSLAnalyzerRule() {
		return getDSLAnalyzerAccess().getRule();
	}
	
	//DSLPlanner:
	//	'Planner' name=ID ('with-interface' interface+=PlannerInterface (',' interface+=PlannerInterface)*)? ';';
	public DSLPlannerElements getDSLPlannerAccess() {
		return pDSLPlanner;
	}
	
	public ParserRule getDSLPlannerRule() {
		return getDSLPlannerAccess().getRule();
	}
	
	//DSLExecutor:
	//	'Executor' name=ID ('with-interface' interface+=ExecutorInterface (',' interface+=ExecutorInterface)*)? ';';
	public DSLExecutorElements getDSLExecutorAccess() {
		return pDSLExecutor;
	}
	
	public ParserRule getDSLExecutorRule() {
		return getDSLExecutorAccess().getRule();
	}
	
	//DSLKnowledge:
	//	'Knowledge' name=ID ('with-interface' interface+=KnowledgeInterface (',' interface+=KnowledgeInterface)*)? ';';
	public DSLKnowledgeElements getDSLKnowledgeAccess() {
		return pDSLKnowledge;
	}
	
	public ParserRule getDSLKnowledgeRule() {
		return getDSLKnowledgeAccess().getRule();
	}
	
	//DSLSensor:
	//	'Sensor' name=ID ('with-interface' interface+=SensorInterface (',' interface+=SensorInterface)*)? ';';
	public DSLSensorElements getDSLSensorAccess() {
		return pDSLSensor;
	}
	
	public ParserRule getDSLSensorRule() {
		return getDSLSensorAccess().getRule();
	}
	
	//DSLEffector:
	//	'Effector' name=ID ('with-interface' interface+=EffectorInterface (',' interface+=EffectorInterface)*)? ';';
	public DSLEffectorElements getDSLEffectorAccess() {
		return pDSLEffector;
	}
	
	public ParserRule getDSLEffectorRule() {
		return getDSLEffectorAccess().getRule();
	}
	
	//DSLProbe:
	//	'Probe' name=ID ('with-interface' probeinterfaces+=ProbeInterface ("," probeinterfaces+=ProbeInterface)*)? ';';
	public DSLProbeElements getDSLProbeAccess() {
		return pDSLProbe;
	}
	
	public ParserRule getDSLProbeRule() {
		return getDSLProbeAccess().getRule();
	}
	
	//DSLGauge:
	//	'Gauge' name=ID ('with-interface' interface+=GaugeInterface (',' interface+=GaugeInterface)*)? ';';
	public DSLGaugeElements getDSLGaugeAccess() {
		return pDSLGauge;
	}
	
	public ParserRule getDSLGaugeRule() {
		return getDSLGaugeAccess().getRule();
	}
	
	//DSLReferenceInput:
	//	'ReferenceInput' name=ID ('with-interface' interface+=ReferenceInputInterface (','
	//	interface+=ReferenceInputInterface)*)? ';';
	public DSLReferenceInputElements getDSLReferenceInputAccess() {
		return pDSLReferenceInput;
	}
	
	public ParserRule getDSLReferenceInputRule() {
		return getDSLReferenceInputAccess().getRule();
	}
	
	//DSLMeasuredOutput:
	//	'MeasuredOutput' name=ID ('with-interface' interface+=MeasuredOutputInterface (','
	//	interface+=MeasuredOutputInterface)*)? ';';
	public DSLMeasuredOutputElements getDSLMeasuredOutputAccess() {
		return pDSLMeasuredOutput;
	}
	
	public ParserRule getDSLMeasuredOutputRule() {
		return getDSLMeasuredOutputAccess().getRule();
	}
	
	//MeasuredOutputInterface:
	//	name=ID;
	public MeasuredOutputInterfaceElements getMeasuredOutputInterfaceAccess() {
		return pMeasuredOutputInterface;
	}
	
	public ParserRule getMeasuredOutputInterfaceRule() {
		return getMeasuredOutputInterfaceAccess().getRule();
	}
	
	//GaugeInterface:
	//	name=ID;
	public GaugeInterfaceElements getGaugeInterfaceAccess() {
		return pGaugeInterface;
	}
	
	public ParserRule getGaugeInterfaceRule() {
		return getGaugeInterfaceAccess().getRule();
	}
	
	//EffectorInterface:
	//	name=ID;
	public EffectorInterfaceElements getEffectorInterfaceAccess() {
		return pEffectorInterface;
	}
	
	public ParserRule getEffectorInterfaceRule() {
		return getEffectorInterfaceAccess().getRule();
	}
	
	//ProbeInterface:
	//	name+=ID;
	public ProbeInterfaceElements getProbeInterfaceAccess() {
		return pProbeInterface;
	}
	
	public ParserRule getProbeInterfaceRule() {
		return getProbeInterfaceAccess().getRule();
	}
	
	//SensorInterface:
	//	name=ID;
	public SensorInterfaceElements getSensorInterfaceAccess() {
		return pSensorInterface;
	}
	
	public ParserRule getSensorInterfaceRule() {
		return getSensorInterfaceAccess().getRule();
	}
	
	//MonitorInterface:
	//	name=ID;
	public MonitorInterfaceElements getMonitorInterfaceAccess() {
		return pMonitorInterface;
	}
	
	public ParserRule getMonitorInterfaceRule() {
		return getMonitorInterfaceAccess().getRule();
	}
	
	//AnalyzerInterface:
	//	name=ID;
	public AnalyzerInterfaceElements getAnalyzerInterfaceAccess() {
		return pAnalyzerInterface;
	}
	
	public ParserRule getAnalyzerInterfaceRule() {
		return getAnalyzerInterfaceAccess().getRule();
	}
	
	//PlannerInterface:
	//	name=ID;
	public PlannerInterfaceElements getPlannerInterfaceAccess() {
		return pPlannerInterface;
	}
	
	public ParserRule getPlannerInterfaceRule() {
		return getPlannerInterfaceAccess().getRule();
	}
	
	//ExecutorInterface:
	//	name=ID;
	public ExecutorInterfaceElements getExecutorInterfaceAccess() {
		return pExecutorInterface;
	}
	
	public ParserRule getExecutorInterfaceRule() {
		return getExecutorInterfaceAccess().getRule();
	}
	
	//KnowledgeInterface:
	//	name=ID;
	public KnowledgeInterfaceElements getKnowledgeInterfaceAccess() {
		return pKnowledgeInterface;
	}
	
	public ParserRule getKnowledgeInterfaceRule() {
		return getKnowledgeInterfaceAccess().getRule();
	}
	
	//ControlLoopInterface:
	//	name=ID;
	public ControlLoopInterfaceElements getControlLoopInterfaceAccess() {
		return pControlLoopInterface;
	}
	
	public ParserRule getControlLoopInterfaceRule() {
		return getControlLoopInterfaceAccess().getRule();
	}
	
	//ControlLoopManagerInterface:
	//	name=ID;
	public ControlLoopManagerInterfaceElements getControlLoopManagerInterfaceAccess() {
		return pControlLoopManagerInterface;
	}
	
	public ParserRule getControlLoopManagerInterfaceRule() {
		return getControlLoopManagerInterfaceAccess().getRule();
	}
	
	//ReferenceInputInterface:
	//	name=ID;
	public ReferenceInputInterfaceElements getReferenceInputInterfaceAccess() {
		return pReferenceInputInterface;
	}
	
	public ParserRule getReferenceInputInterfaceRule() {
		return getReferenceInputInterfaceAccess().getRule();
	}
	
	//ManagedInterface:
	//	name=ID;
	public ManagedInterfaceElements getManagedInterfaceAccess() {
		return pManagedInterface;
	}
	
	public ParserRule getManagedInterfaceRule() {
		return getManagedInterfaceAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
