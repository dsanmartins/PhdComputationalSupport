/*
 * generated by Xtext 2.10.0
 */
package br.ufscar.sas.xtext.sasdsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SasDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ArchitectureDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.ArchitectureDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAbstractionsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAbstractionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAbstractionsDSLAbstractionParserRuleCall_2_0 = (RuleCall)cAbstractionsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cCompositionsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cCompositionsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cCompositionsDSLCompositionParserRuleCall_6_0 = (RuleCall)cCompositionsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cRestrictionsKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cLeftCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cRestrictionsAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cRestrictionsDSLRestrictionParserRuleCall_10_0 = (RuleCall)cRestrictionsAssignment_10.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//ArchitectureDefinition:
		//	'Abstractions' '{' abstractions+=DSLAbstraction+ '}'
		//	'Compositions' '{' compositions+=DSLComposition* '}'
		//	'Restrictions' '{' restrictions+=DSLRestriction* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Abstractions' '{' abstractions+=DSLAbstraction+ '}' 'Compositions' '{' compositions+=DSLComposition* '}' 'Restrictions'
		//'{' restrictions+=DSLRestriction* '}'
		public Group getGroup() { return cGroup; }
		
		//'Abstractions'
		public Keyword getAbstractionsKeyword_0() { return cAbstractionsKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//abstractions+=DSLAbstraction+
		public Assignment getAbstractionsAssignment_2() { return cAbstractionsAssignment_2; }
		
		//DSLAbstraction
		public RuleCall getAbstractionsDSLAbstractionParserRuleCall_2_0() { return cAbstractionsDSLAbstractionParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
		
		//'Compositions'
		public Keyword getCompositionsKeyword_4() { return cCompositionsKeyword_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//compositions+=DSLComposition*
		public Assignment getCompositionsAssignment_6() { return cCompositionsAssignment_6; }
		
		//DSLComposition
		public RuleCall getCompositionsDSLCompositionParserRuleCall_6_0() { return cCompositionsDSLCompositionParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
		
		//'Restrictions'
		public Keyword getRestrictionsKeyword_8() { return cRestrictionsKeyword_8; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_9() { return cLeftCurlyBracketKeyword_9; }
		
		//restrictions+=DSLRestriction*
		public Assignment getRestrictionsAssignment_10() { return cRestrictionsAssignment_10; }
		
		//DSLRestriction
		public RuleCall getRestrictionsDSLRestrictionParserRuleCall_10_0() { return cRestrictionsDSLRestrictionParserRuleCall_10_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}
	public class DSLAbstractionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLAbstraction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDSLManagingParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDSLManagedParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDSLControlLoopManagerParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDSLControlLoopParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDSLMonitorParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cDSLAnalyzerParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cDSLPlannerParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cDSLExecutorParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cDSLKnowledgeParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cDSLSensorParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cDSLEffectorParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cDSLReferenceInputParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cDSLMeasuredOutputParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		
		//DSLAbstraction:
		//	DSLManaging | DSLManaged | DSLControlLoopManager | DSLControlLoop | DSLMonitor | DSLAnalyzer | DSLPlanner |
		//	DSLExecutor | DSLKnowledge | DSLSensor | DSLEffector | DSLReferenceInput | DSLMeasuredOutput;
		@Override public ParserRule getRule() { return rule; }
		
		//DSLManaging | DSLManaged | DSLControlLoopManager | DSLControlLoop | DSLMonitor | DSLAnalyzer | DSLPlanner | DSLExecutor
		//| DSLKnowledge | DSLSensor | DSLEffector | DSLReferenceInput | DSLMeasuredOutput
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DSLManaging
		public RuleCall getDSLManagingParserRuleCall_0() { return cDSLManagingParserRuleCall_0; }
		
		//DSLManaged
		public RuleCall getDSLManagedParserRuleCall_1() { return cDSLManagedParserRuleCall_1; }
		
		//DSLControlLoopManager
		public RuleCall getDSLControlLoopManagerParserRuleCall_2() { return cDSLControlLoopManagerParserRuleCall_2; }
		
		//DSLControlLoop
		public RuleCall getDSLControlLoopParserRuleCall_3() { return cDSLControlLoopParserRuleCall_3; }
		
		//DSLMonitor
		public RuleCall getDSLMonitorParserRuleCall_4() { return cDSLMonitorParserRuleCall_4; }
		
		//DSLAnalyzer
		public RuleCall getDSLAnalyzerParserRuleCall_5() { return cDSLAnalyzerParserRuleCall_5; }
		
		//DSLPlanner
		public RuleCall getDSLPlannerParserRuleCall_6() { return cDSLPlannerParserRuleCall_6; }
		
		//DSLExecutor
		public RuleCall getDSLExecutorParserRuleCall_7() { return cDSLExecutorParserRuleCall_7; }
		
		//DSLKnowledge
		public RuleCall getDSLKnowledgeParserRuleCall_8() { return cDSLKnowledgeParserRuleCall_8; }
		
		//DSLSensor
		public RuleCall getDSLSensorParserRuleCall_9() { return cDSLSensorParserRuleCall_9; }
		
		//DSLEffector
		public RuleCall getDSLEffectorParserRuleCall_10() { return cDSLEffectorParserRuleCall_10; }
		
		//DSLReferenceInput
		public RuleCall getDSLReferenceInputParserRuleCall_11() { return cDSLReferenceInputParserRuleCall_11; }
		
		//DSLMeasuredOutput
		public RuleCall getDSLMeasuredOutputParserRuleCall_12() { return cDSLMeasuredOutputParserRuleCall_12; }
	}
	public class DSLCompositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLComposition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDSLSensorBelongsToParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDSLReferenceInputBelongsToParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDSLEffectorBelongsToParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDSLMonitorBelongsTo1ParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDSLMonitorBelongsTo2ParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cDSLAnalyzerBelongsTo1ParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cDSLAnalyzerBelongsTo2ParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cDSLPlannerBelongsTo1ParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cDSLPlannerBelongsTo2ParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cDSLExecutorBelongsTo1ParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cDSLExecutorBelongsTo2ParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cDSLClBelongsTo1ParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cDSLClBelongsTo2ParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cDSLClmBelongsToParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cDSLMeasuredOuputBelongsToParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cDSLKnowledgeBelongsToParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		
		//DSLComposition:
		//	DSLSensorBelongsTo | DSLReferenceInputBelongsTo | DSLEffectorBelongsTo | DSLMonitorBelongsTo1 | DSLMonitorBelongsTo2 |
		//	DSLAnalyzerBelongsTo1 | DSLAnalyzerBelongsTo2 | DSLPlannerBelongsTo1 | DSLPlannerBelongsTo2 | DSLExecutorBelongsTo1 |
		//	DSLExecutorBelongsTo2 | DSLClBelongsTo1 | DSLClBelongsTo2 | DSLClmBelongsTo | DSLMeasuredOuputBelongsTo |
		//	DSLKnowledgeBelongsTo;
		@Override public ParserRule getRule() { return rule; }
		
		//DSLSensorBelongsTo | DSLReferenceInputBelongsTo | DSLEffectorBelongsTo | DSLMonitorBelongsTo1 | DSLMonitorBelongsTo2 |
		//DSLAnalyzerBelongsTo1 | DSLAnalyzerBelongsTo2 | DSLPlannerBelongsTo1 | DSLPlannerBelongsTo2 | DSLExecutorBelongsTo1 |
		//DSLExecutorBelongsTo2 | DSLClBelongsTo1 | DSLClBelongsTo2 | DSLClmBelongsTo | DSLMeasuredOuputBelongsTo |
		//DSLKnowledgeBelongsTo
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DSLSensorBelongsTo
		public RuleCall getDSLSensorBelongsToParserRuleCall_0() { return cDSLSensorBelongsToParserRuleCall_0; }
		
		//DSLReferenceInputBelongsTo
		public RuleCall getDSLReferenceInputBelongsToParserRuleCall_1() { return cDSLReferenceInputBelongsToParserRuleCall_1; }
		
		//DSLEffectorBelongsTo
		public RuleCall getDSLEffectorBelongsToParserRuleCall_2() { return cDSLEffectorBelongsToParserRuleCall_2; }
		
		//DSLMonitorBelongsTo1
		public RuleCall getDSLMonitorBelongsTo1ParserRuleCall_3() { return cDSLMonitorBelongsTo1ParserRuleCall_3; }
		
		//DSLMonitorBelongsTo2
		public RuleCall getDSLMonitorBelongsTo2ParserRuleCall_4() { return cDSLMonitorBelongsTo2ParserRuleCall_4; }
		
		//DSLAnalyzerBelongsTo1
		public RuleCall getDSLAnalyzerBelongsTo1ParserRuleCall_5() { return cDSLAnalyzerBelongsTo1ParserRuleCall_5; }
		
		//DSLAnalyzerBelongsTo2
		public RuleCall getDSLAnalyzerBelongsTo2ParserRuleCall_6() { return cDSLAnalyzerBelongsTo2ParserRuleCall_6; }
		
		//DSLPlannerBelongsTo1
		public RuleCall getDSLPlannerBelongsTo1ParserRuleCall_7() { return cDSLPlannerBelongsTo1ParserRuleCall_7; }
		
		//DSLPlannerBelongsTo2
		public RuleCall getDSLPlannerBelongsTo2ParserRuleCall_8() { return cDSLPlannerBelongsTo2ParserRuleCall_8; }
		
		//DSLExecutorBelongsTo1
		public RuleCall getDSLExecutorBelongsTo1ParserRuleCall_9() { return cDSLExecutorBelongsTo1ParserRuleCall_9; }
		
		//DSLExecutorBelongsTo2
		public RuleCall getDSLExecutorBelongsTo2ParserRuleCall_10() { return cDSLExecutorBelongsTo2ParserRuleCall_10; }
		
		//DSLClBelongsTo1
		public RuleCall getDSLClBelongsTo1ParserRuleCall_11() { return cDSLClBelongsTo1ParserRuleCall_11; }
		
		//DSLClBelongsTo2
		public RuleCall getDSLClBelongsTo2ParserRuleCall_12() { return cDSLClBelongsTo2ParserRuleCall_12; }
		
		//DSLClmBelongsTo
		public RuleCall getDSLClmBelongsToParserRuleCall_13() { return cDSLClmBelongsToParserRuleCall_13; }
		
		//DSLMeasuredOuputBelongsTo
		public RuleCall getDSLMeasuredOuputBelongsToParserRuleCall_14() { return cDSLMeasuredOuputBelongsToParserRuleCall_14; }
		
		//DSLKnowledgeBelongsTo
		public RuleCall getDSLKnowledgeBelongsToParserRuleCall_15() { return cDSLKnowledgeBelongsToParserRuleCall_15; }
	}
	public class DSLRestrictionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLRestriction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDSLRestrictionMonitorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDSLRestrictionPlannerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDSLRestrictionExecutorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDSLRestrictionKnowledgeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDSLRestrictionManagedParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cDSLRestrictionSensorParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cDSLRestrictionEffectorParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//DSLRestriction:
		//	DSLRestrictionMonitor | DSLRestrictionPlanner | DSLRestrictionExecutor | DSLRestrictionKnowledge |
		//	DSLRestrictionManaged | DSLRestrictionSensor | DSLRestrictionEffector;
		@Override public ParserRule getRule() { return rule; }
		
		//DSLRestrictionMonitor | DSLRestrictionPlanner | DSLRestrictionExecutor | DSLRestrictionKnowledge | DSLRestrictionManaged
		//| DSLRestrictionSensor | DSLRestrictionEffector
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DSLRestrictionMonitor
		public RuleCall getDSLRestrictionMonitorParserRuleCall_0() { return cDSLRestrictionMonitorParserRuleCall_0; }
		
		//DSLRestrictionPlanner
		public RuleCall getDSLRestrictionPlannerParserRuleCall_1() { return cDSLRestrictionPlannerParserRuleCall_1; }
		
		//DSLRestrictionExecutor
		public RuleCall getDSLRestrictionExecutorParserRuleCall_2() { return cDSLRestrictionExecutorParserRuleCall_2; }
		
		//DSLRestrictionKnowledge
		public RuleCall getDSLRestrictionKnowledgeParserRuleCall_3() { return cDSLRestrictionKnowledgeParserRuleCall_3; }
		
		//DSLRestrictionManaged
		public RuleCall getDSLRestrictionManagedParserRuleCall_4() { return cDSLRestrictionManagedParserRuleCall_4; }
		
		//DSLRestrictionSensor
		public RuleCall getDSLRestrictionSensorParserRuleCall_5() { return cDSLRestrictionSensorParserRuleCall_5; }
		
		//DSLRestrictionEffector
		public RuleCall getDSLRestrictionEffectorParserRuleCall_6() { return cDSLRestrictionEffectorParserRuleCall_6; }
	}
	public class DSLRestrictionEffectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLRestrictionEffector");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cExecutorKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cTAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cTDSLExecutorCrossReference_0_1_0 = (CrossReference)cTAssignment_0_1.eContents().get(0);
		private final RuleCall cTDSLExecutorIDTerminalRuleCall_0_1_0_1 = (RuleCall)cTDSLExecutorCrossReference_0_1_0.eContents().get(1);
		private final Keyword cMustNotAccessEffectorKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cEffectorAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final CrossReference cEffectorDSLEffectorCrossReference_0_3_0 = (CrossReference)cEffectorAssignment_0_3.eContents().get(0);
		private final RuleCall cEffectorDSLEffectorIDTerminalRuleCall_0_3_0_1 = (RuleCall)cEffectorDSLEffectorCrossReference_0_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cExecutorKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cTDSLExecutorCrossReference_1_1_0 = (CrossReference)cTAssignment_1_1.eContents().get(0);
		private final RuleCall cTDSLExecutorIDTerminalRuleCall_1_1_0_1 = (RuleCall)cTDSLExecutorCrossReference_1_1_0.eContents().get(1);
		private final Keyword cMustAccessEffectorKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cEffectorAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final CrossReference cEffectorDSLEffectorCrossReference_1_3_0 = (CrossReference)cEffectorAssignment_1_3.eContents().get(0);
		private final RuleCall cEffectorDSLEffectorIDTerminalRuleCall_1_3_0_1 = (RuleCall)cEffectorDSLEffectorCrossReference_1_3_0.eContents().get(1);
		private final Keyword cThroughInterfaceKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cEffectorinterfaceAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final CrossReference cEffectorinterfaceEffectorInterfaceCrossReference_1_5_0 = (CrossReference)cEffectorinterfaceAssignment_1_5.eContents().get(0);
		private final RuleCall cEffectorinterfaceEffectorInterfaceIDTerminalRuleCall_1_5_0_1 = (RuleCall)cEffectorinterfaceEffectorInterfaceCrossReference_1_5_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		
		//DSLRestrictionEffector:
		//	'executor' t=[DSLExecutor] 'must-not-access-effector' effector=[DSLEffector] ';' | 'executor' t=[DSLExecutor]
		//	'must-access-effector' effector=[DSLEffector] 'through-interface' effectorinterface=[EffectorInterface] ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'executor' t=[DSLExecutor] 'must-not-access-effector' effector=[DSLEffector] ';' | 'executor' t=[DSLExecutor]
		//'must-access-effector' effector=[DSLEffector] 'through-interface' effectorinterface=[EffectorInterface] ';'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'executor' t=[DSLExecutor] 'must-not-access-effector' effector=[DSLEffector] ';'
		public Group getGroup_0() { return cGroup_0; }
		
		//'executor'
		public Keyword getExecutorKeyword_0_0() { return cExecutorKeyword_0_0; }
		
		//t=[DSLExecutor]
		public Assignment getTAssignment_0_1() { return cTAssignment_0_1; }
		
		//[DSLExecutor]
		public CrossReference getTDSLExecutorCrossReference_0_1_0() { return cTDSLExecutorCrossReference_0_1_0; }
		
		//ID
		public RuleCall getTDSLExecutorIDTerminalRuleCall_0_1_0_1() { return cTDSLExecutorIDTerminalRuleCall_0_1_0_1; }
		
		//'must-not-access-effector'
		public Keyword getMustNotAccessEffectorKeyword_0_2() { return cMustNotAccessEffectorKeyword_0_2; }
		
		//effector=[DSLEffector]
		public Assignment getEffectorAssignment_0_3() { return cEffectorAssignment_0_3; }
		
		//[DSLEffector]
		public CrossReference getEffectorDSLEffectorCrossReference_0_3_0() { return cEffectorDSLEffectorCrossReference_0_3_0; }
		
		//ID
		public RuleCall getEffectorDSLEffectorIDTerminalRuleCall_0_3_0_1() { return cEffectorDSLEffectorIDTerminalRuleCall_0_3_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_0_4() { return cSemicolonKeyword_0_4; }
		
		//'executor' t=[DSLExecutor] 'must-access-effector' effector=[DSLEffector] 'through-interface'
		//effectorinterface=[EffectorInterface] ';'
		public Group getGroup_1() { return cGroup_1; }
		
		//'executor'
		public Keyword getExecutorKeyword_1_0() { return cExecutorKeyword_1_0; }
		
		//t=[DSLExecutor]
		public Assignment getTAssignment_1_1() { return cTAssignment_1_1; }
		
		//[DSLExecutor]
		public CrossReference getTDSLExecutorCrossReference_1_1_0() { return cTDSLExecutorCrossReference_1_1_0; }
		
		//ID
		public RuleCall getTDSLExecutorIDTerminalRuleCall_1_1_0_1() { return cTDSLExecutorIDTerminalRuleCall_1_1_0_1; }
		
		//'must-access-effector'
		public Keyword getMustAccessEffectorKeyword_1_2() { return cMustAccessEffectorKeyword_1_2; }
		
		//effector=[DSLEffector]
		public Assignment getEffectorAssignment_1_3() { return cEffectorAssignment_1_3; }
		
		//[DSLEffector]
		public CrossReference getEffectorDSLEffectorCrossReference_1_3_0() { return cEffectorDSLEffectorCrossReference_1_3_0; }
		
		//ID
		public RuleCall getEffectorDSLEffectorIDTerminalRuleCall_1_3_0_1() { return cEffectorDSLEffectorIDTerminalRuleCall_1_3_0_1; }
		
		//'through-interface'
		public Keyword getThroughInterfaceKeyword_1_4() { return cThroughInterfaceKeyword_1_4; }
		
		//effectorinterface=[EffectorInterface]
		public Assignment getEffectorinterfaceAssignment_1_5() { return cEffectorinterfaceAssignment_1_5; }
		
		//[EffectorInterface]
		public CrossReference getEffectorinterfaceEffectorInterfaceCrossReference_1_5_0() { return cEffectorinterfaceEffectorInterfaceCrossReference_1_5_0; }
		
		//ID
		public RuleCall getEffectorinterfaceEffectorInterfaceIDTerminalRuleCall_1_5_0_1() { return cEffectorinterfaceEffectorInterfaceIDTerminalRuleCall_1_5_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_1_6() { return cSemicolonKeyword_1_6; }
	}
	public class DSLRestrictionSensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLRestrictionSensor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cMonitorKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cTAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cTDSLMonitorCrossReference_0_1_0 = (CrossReference)cTAssignment_0_1.eContents().get(0);
		private final RuleCall cTDSLMonitorIDTerminalRuleCall_0_1_0_1 = (RuleCall)cTDSLMonitorCrossReference_0_1_0.eContents().get(1);
		private final Keyword cMustNotAccessSensorKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cSensorAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final CrossReference cSensorDSLSensorCrossReference_0_3_0 = (CrossReference)cSensorAssignment_0_3.eContents().get(0);
		private final RuleCall cSensorDSLSensorIDTerminalRuleCall_0_3_0_1 = (RuleCall)cSensorDSLSensorCrossReference_0_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cMonitorKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cTDSLMonitorCrossReference_1_1_0 = (CrossReference)cTAssignment_1_1.eContents().get(0);
		private final RuleCall cTDSLMonitorIDTerminalRuleCall_1_1_0_1 = (RuleCall)cTDSLMonitorCrossReference_1_1_0.eContents().get(1);
		private final Keyword cMustAccessSensorKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cSensorAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final CrossReference cSensorDSLSensorCrossReference_1_3_0 = (CrossReference)cSensorAssignment_1_3.eContents().get(0);
		private final RuleCall cSensorDSLSensorIDTerminalRuleCall_1_3_0_1 = (RuleCall)cSensorDSLSensorCrossReference_1_3_0.eContents().get(1);
		private final Keyword cThroughInterfaceKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cSensorinterfaceAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final CrossReference cSensorinterfaceSensorInterfaceCrossReference_1_5_0 = (CrossReference)cSensorinterfaceAssignment_1_5.eContents().get(0);
		private final RuleCall cSensorinterfaceSensorInterfaceIDTerminalRuleCall_1_5_0_1 = (RuleCall)cSensorinterfaceSensorInterfaceCrossReference_1_5_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		
		//DSLRestrictionSensor:
		//	'monitor' t=[DSLMonitor] 'must-not-access-sensor' sensor=[DSLSensor] ';' | 'monitor' t=[DSLMonitor]
		//	'must-access-sensor' sensor=[DSLSensor] 'through-interface' sensorinterface=[SensorInterface] ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'monitor' t=[DSLMonitor] 'must-not-access-sensor' sensor=[DSLSensor] ';' | 'monitor' t=[DSLMonitor] 'must-access-sensor'
		//sensor=[DSLSensor] 'through-interface' sensorinterface=[SensorInterface] ';'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'monitor' t=[DSLMonitor] 'must-not-access-sensor' sensor=[DSLSensor] ';'
		public Group getGroup_0() { return cGroup_0; }
		
		//'monitor'
		public Keyword getMonitorKeyword_0_0() { return cMonitorKeyword_0_0; }
		
		//t=[DSLMonitor]
		public Assignment getTAssignment_0_1() { return cTAssignment_0_1; }
		
		//[DSLMonitor]
		public CrossReference getTDSLMonitorCrossReference_0_1_0() { return cTDSLMonitorCrossReference_0_1_0; }
		
		//ID
		public RuleCall getTDSLMonitorIDTerminalRuleCall_0_1_0_1() { return cTDSLMonitorIDTerminalRuleCall_0_1_0_1; }
		
		//'must-not-access-sensor'
		public Keyword getMustNotAccessSensorKeyword_0_2() { return cMustNotAccessSensorKeyword_0_2; }
		
		//sensor=[DSLSensor]
		public Assignment getSensorAssignment_0_3() { return cSensorAssignment_0_3; }
		
		//[DSLSensor]
		public CrossReference getSensorDSLSensorCrossReference_0_3_0() { return cSensorDSLSensorCrossReference_0_3_0; }
		
		//ID
		public RuleCall getSensorDSLSensorIDTerminalRuleCall_0_3_0_1() { return cSensorDSLSensorIDTerminalRuleCall_0_3_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_0_4() { return cSemicolonKeyword_0_4; }
		
		//'monitor' t=[DSLMonitor] 'must-access-sensor' sensor=[DSLSensor] 'through-interface' sensorinterface=[SensorInterface]
		//';'
		public Group getGroup_1() { return cGroup_1; }
		
		//'monitor'
		public Keyword getMonitorKeyword_1_0() { return cMonitorKeyword_1_0; }
		
		//t=[DSLMonitor]
		public Assignment getTAssignment_1_1() { return cTAssignment_1_1; }
		
		//[DSLMonitor]
		public CrossReference getTDSLMonitorCrossReference_1_1_0() { return cTDSLMonitorCrossReference_1_1_0; }
		
		//ID
		public RuleCall getTDSLMonitorIDTerminalRuleCall_1_1_0_1() { return cTDSLMonitorIDTerminalRuleCall_1_1_0_1; }
		
		//'must-access-sensor'
		public Keyword getMustAccessSensorKeyword_1_2() { return cMustAccessSensorKeyword_1_2; }
		
		//sensor=[DSLSensor]
		public Assignment getSensorAssignment_1_3() { return cSensorAssignment_1_3; }
		
		//[DSLSensor]
		public CrossReference getSensorDSLSensorCrossReference_1_3_0() { return cSensorDSLSensorCrossReference_1_3_0; }
		
		//ID
		public RuleCall getSensorDSLSensorIDTerminalRuleCall_1_3_0_1() { return cSensorDSLSensorIDTerminalRuleCall_1_3_0_1; }
		
		//'through-interface'
		public Keyword getThroughInterfaceKeyword_1_4() { return cThroughInterfaceKeyword_1_4; }
		
		//sensorinterface=[SensorInterface]
		public Assignment getSensorinterfaceAssignment_1_5() { return cSensorinterfaceAssignment_1_5; }
		
		//[SensorInterface]
		public CrossReference getSensorinterfaceSensorInterfaceCrossReference_1_5_0() { return cSensorinterfaceSensorInterfaceCrossReference_1_5_0; }
		
		//ID
		public RuleCall getSensorinterfaceSensorInterfaceIDTerminalRuleCall_1_5_0_1() { return cSensorinterfaceSensorInterfaceIDTerminalRuleCall_1_5_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_1_6() { return cSemicolonKeyword_1_6; }
	}
	public class DSLRestrictionMonitorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLRestrictionMonitor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cAnalyzerKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cTAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cTDSLAnalyzerCrossReference_0_1_0 = (CrossReference)cTAssignment_0_1.eContents().get(0);
		private final RuleCall cTDSLAnalyzerIDTerminalRuleCall_0_1_0_1 = (RuleCall)cTDSLAnalyzerCrossReference_0_1_0.eContents().get(1);
		private final Keyword cMustNotAccessMonitorKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cMonitorAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final CrossReference cMonitorDSLMonitorCrossReference_0_3_0 = (CrossReference)cMonitorAssignment_0_3.eContents().get(0);
		private final RuleCall cMonitorDSLMonitorIDTerminalRuleCall_0_3_0_1 = (RuleCall)cMonitorDSLMonitorCrossReference_0_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cAnalyzerKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cTDSLAnalyzerCrossReference_1_1_0 = (CrossReference)cTAssignment_1_1.eContents().get(0);
		private final RuleCall cTDSLAnalyzerIDTerminalRuleCall_1_1_0_1 = (RuleCall)cTDSLAnalyzerCrossReference_1_1_0.eContents().get(1);
		private final Keyword cMustAccessMonitorKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cMonitorAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final CrossReference cMonitorDSLMonitorCrossReference_1_3_0 = (CrossReference)cMonitorAssignment_1_3.eContents().get(0);
		private final RuleCall cMonitorDSLMonitorIDTerminalRuleCall_1_3_0_1 = (RuleCall)cMonitorDSLMonitorCrossReference_1_3_0.eContents().get(1);
		private final Keyword cThroughInterfaceKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cMonitorinterfaceAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final CrossReference cMonitorinterfaceMonitorInterfaceCrossReference_1_5_0 = (CrossReference)cMonitorinterfaceAssignment_1_5.eContents().get(0);
		private final RuleCall cMonitorinterfaceMonitorInterfaceIDTerminalRuleCall_1_5_0_1 = (RuleCall)cMonitorinterfaceMonitorInterfaceCrossReference_1_5_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		
		//DSLRestrictionMonitor:
		//	'analyzer' t=[DSLAnalyzer] 'must-not-access-monitor' monitor=[DSLMonitor] ';' | 'analyzer' t=[DSLAnalyzer]
		//	'must-access-monitor' monitor=[DSLMonitor] 'through-interface' monitorinterface=[MonitorInterface] ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'analyzer' t=[DSLAnalyzer] 'must-not-access-monitor' monitor=[DSLMonitor] ';' | 'analyzer' t=[DSLAnalyzer]
		//'must-access-monitor' monitor=[DSLMonitor] 'through-interface' monitorinterface=[MonitorInterface] ';'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'analyzer' t=[DSLAnalyzer] 'must-not-access-monitor' monitor=[DSLMonitor] ';'
		public Group getGroup_0() { return cGroup_0; }
		
		//'analyzer'
		public Keyword getAnalyzerKeyword_0_0() { return cAnalyzerKeyword_0_0; }
		
		//t=[DSLAnalyzer]
		public Assignment getTAssignment_0_1() { return cTAssignment_0_1; }
		
		//[DSLAnalyzer]
		public CrossReference getTDSLAnalyzerCrossReference_0_1_0() { return cTDSLAnalyzerCrossReference_0_1_0; }
		
		//ID
		public RuleCall getTDSLAnalyzerIDTerminalRuleCall_0_1_0_1() { return cTDSLAnalyzerIDTerminalRuleCall_0_1_0_1; }
		
		//'must-not-access-monitor'
		public Keyword getMustNotAccessMonitorKeyword_0_2() { return cMustNotAccessMonitorKeyword_0_2; }
		
		//monitor=[DSLMonitor]
		public Assignment getMonitorAssignment_0_3() { return cMonitorAssignment_0_3; }
		
		//[DSLMonitor]
		public CrossReference getMonitorDSLMonitorCrossReference_0_3_0() { return cMonitorDSLMonitorCrossReference_0_3_0; }
		
		//ID
		public RuleCall getMonitorDSLMonitorIDTerminalRuleCall_0_3_0_1() { return cMonitorDSLMonitorIDTerminalRuleCall_0_3_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_0_4() { return cSemicolonKeyword_0_4; }
		
		//'analyzer' t=[DSLAnalyzer] 'must-access-monitor' monitor=[DSLMonitor] 'through-interface'
		//monitorinterface=[MonitorInterface] ';'
		public Group getGroup_1() { return cGroup_1; }
		
		//'analyzer'
		public Keyword getAnalyzerKeyword_1_0() { return cAnalyzerKeyword_1_0; }
		
		//t=[DSLAnalyzer]
		public Assignment getTAssignment_1_1() { return cTAssignment_1_1; }
		
		//[DSLAnalyzer]
		public CrossReference getTDSLAnalyzerCrossReference_1_1_0() { return cTDSLAnalyzerCrossReference_1_1_0; }
		
		//ID
		public RuleCall getTDSLAnalyzerIDTerminalRuleCall_1_1_0_1() { return cTDSLAnalyzerIDTerminalRuleCall_1_1_0_1; }
		
		//'must-access-monitor'
		public Keyword getMustAccessMonitorKeyword_1_2() { return cMustAccessMonitorKeyword_1_2; }
		
		//monitor=[DSLMonitor]
		public Assignment getMonitorAssignment_1_3() { return cMonitorAssignment_1_3; }
		
		//[DSLMonitor]
		public CrossReference getMonitorDSLMonitorCrossReference_1_3_0() { return cMonitorDSLMonitorCrossReference_1_3_0; }
		
		//ID
		public RuleCall getMonitorDSLMonitorIDTerminalRuleCall_1_3_0_1() { return cMonitorDSLMonitorIDTerminalRuleCall_1_3_0_1; }
		
		//'through-interface'
		public Keyword getThroughInterfaceKeyword_1_4() { return cThroughInterfaceKeyword_1_4; }
		
		//monitorinterface=[MonitorInterface]
		public Assignment getMonitorinterfaceAssignment_1_5() { return cMonitorinterfaceAssignment_1_5; }
		
		//[MonitorInterface]
		public CrossReference getMonitorinterfaceMonitorInterfaceCrossReference_1_5_0() { return cMonitorinterfaceMonitorInterfaceCrossReference_1_5_0; }
		
		//ID
		public RuleCall getMonitorinterfaceMonitorInterfaceIDTerminalRuleCall_1_5_0_1() { return cMonitorinterfaceMonitorInterfaceIDTerminalRuleCall_1_5_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_1_6() { return cSemicolonKeyword_1_6; }
	}
	public class DSLRestrictionPlannerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLRestrictionPlanner");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cAnalyzerKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cTAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cTDSLAnalyzerCrossReference_0_1_0 = (CrossReference)cTAssignment_0_1.eContents().get(0);
		private final RuleCall cTDSLAnalyzerIDTerminalRuleCall_0_1_0_1 = (RuleCall)cTDSLAnalyzerCrossReference_0_1_0.eContents().get(1);
		private final Keyword cMustNotAccessPlannerKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cPlannerAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final CrossReference cPlannerDSLPlannerCrossReference_0_3_0 = (CrossReference)cPlannerAssignment_0_3.eContents().get(0);
		private final RuleCall cPlannerDSLPlannerIDTerminalRuleCall_0_3_0_1 = (RuleCall)cPlannerDSLPlannerCrossReference_0_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cAnalyzerKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cTDSLAnalyzerCrossReference_1_1_0 = (CrossReference)cTAssignment_1_1.eContents().get(0);
		private final RuleCall cTDSLAnalyzerIDTerminalRuleCall_1_1_0_1 = (RuleCall)cTDSLAnalyzerCrossReference_1_1_0.eContents().get(1);
		private final Keyword cMustAccessPlannerKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cPlannerAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final CrossReference cPlannerDSLPlannerCrossReference_1_3_0 = (CrossReference)cPlannerAssignment_1_3.eContents().get(0);
		private final RuleCall cPlannerDSLPlannerIDTerminalRuleCall_1_3_0_1 = (RuleCall)cPlannerDSLPlannerCrossReference_1_3_0.eContents().get(1);
		private final Keyword cThroughInterfaceKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cPlannerinterfaceAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final CrossReference cPlannerinterfacePlannerInterfaceCrossReference_1_5_0 = (CrossReference)cPlannerinterfaceAssignment_1_5.eContents().get(0);
		private final RuleCall cPlannerinterfacePlannerInterfaceIDTerminalRuleCall_1_5_0_1 = (RuleCall)cPlannerinterfacePlannerInterfaceCrossReference_1_5_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		
		//DSLRestrictionPlanner:
		//	'analyzer' t=[DSLAnalyzer] 'must-not-access-planner' planner=[DSLPlanner] ';' | 'analyzer' t=[DSLAnalyzer]
		//	'must-access-planner' planner=[DSLPlanner] 'through-interface' plannerinterface=[PlannerInterface] ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'analyzer' t=[DSLAnalyzer] 'must-not-access-planner' planner=[DSLPlanner] ';' | 'analyzer' t=[DSLAnalyzer]
		//'must-access-planner' planner=[DSLPlanner] 'through-interface' plannerinterface=[PlannerInterface] ';'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'analyzer' t=[DSLAnalyzer] 'must-not-access-planner' planner=[DSLPlanner] ';'
		public Group getGroup_0() { return cGroup_0; }
		
		//'analyzer'
		public Keyword getAnalyzerKeyword_0_0() { return cAnalyzerKeyword_0_0; }
		
		//t=[DSLAnalyzer]
		public Assignment getTAssignment_0_1() { return cTAssignment_0_1; }
		
		//[DSLAnalyzer]
		public CrossReference getTDSLAnalyzerCrossReference_0_1_0() { return cTDSLAnalyzerCrossReference_0_1_0; }
		
		//ID
		public RuleCall getTDSLAnalyzerIDTerminalRuleCall_0_1_0_1() { return cTDSLAnalyzerIDTerminalRuleCall_0_1_0_1; }
		
		//'must-not-access-planner'
		public Keyword getMustNotAccessPlannerKeyword_0_2() { return cMustNotAccessPlannerKeyword_0_2; }
		
		//planner=[DSLPlanner]
		public Assignment getPlannerAssignment_0_3() { return cPlannerAssignment_0_3; }
		
		//[DSLPlanner]
		public CrossReference getPlannerDSLPlannerCrossReference_0_3_0() { return cPlannerDSLPlannerCrossReference_0_3_0; }
		
		//ID
		public RuleCall getPlannerDSLPlannerIDTerminalRuleCall_0_3_0_1() { return cPlannerDSLPlannerIDTerminalRuleCall_0_3_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_0_4() { return cSemicolonKeyword_0_4; }
		
		//'analyzer' t=[DSLAnalyzer] 'must-access-planner' planner=[DSLPlanner] 'through-interface'
		//plannerinterface=[PlannerInterface] ';'
		public Group getGroup_1() { return cGroup_1; }
		
		//'analyzer'
		public Keyword getAnalyzerKeyword_1_0() { return cAnalyzerKeyword_1_0; }
		
		//t=[DSLAnalyzer]
		public Assignment getTAssignment_1_1() { return cTAssignment_1_1; }
		
		//[DSLAnalyzer]
		public CrossReference getTDSLAnalyzerCrossReference_1_1_0() { return cTDSLAnalyzerCrossReference_1_1_0; }
		
		//ID
		public RuleCall getTDSLAnalyzerIDTerminalRuleCall_1_1_0_1() { return cTDSLAnalyzerIDTerminalRuleCall_1_1_0_1; }
		
		//'must-access-planner'
		public Keyword getMustAccessPlannerKeyword_1_2() { return cMustAccessPlannerKeyword_1_2; }
		
		//planner=[DSLPlanner]
		public Assignment getPlannerAssignment_1_3() { return cPlannerAssignment_1_3; }
		
		//[DSLPlanner]
		public CrossReference getPlannerDSLPlannerCrossReference_1_3_0() { return cPlannerDSLPlannerCrossReference_1_3_0; }
		
		//ID
		public RuleCall getPlannerDSLPlannerIDTerminalRuleCall_1_3_0_1() { return cPlannerDSLPlannerIDTerminalRuleCall_1_3_0_1; }
		
		//'through-interface'
		public Keyword getThroughInterfaceKeyword_1_4() { return cThroughInterfaceKeyword_1_4; }
		
		//plannerinterface=[PlannerInterface]
		public Assignment getPlannerinterfaceAssignment_1_5() { return cPlannerinterfaceAssignment_1_5; }
		
		//[PlannerInterface]
		public CrossReference getPlannerinterfacePlannerInterfaceCrossReference_1_5_0() { return cPlannerinterfacePlannerInterfaceCrossReference_1_5_0; }
		
		//ID
		public RuleCall getPlannerinterfacePlannerInterfaceIDTerminalRuleCall_1_5_0_1() { return cPlannerinterfacePlannerInterfaceIDTerminalRuleCall_1_5_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_1_6() { return cSemicolonKeyword_1_6; }
	}
	public class DSLRestrictionExecutorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLRestrictionExecutor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cAnalyzerKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cTAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cTDSLAnalyzerCrossReference_0_1_0 = (CrossReference)cTAssignment_0_1.eContents().get(0);
		private final RuleCall cTDSLAnalyzerIDTerminalRuleCall_0_1_0_1 = (RuleCall)cTDSLAnalyzerCrossReference_0_1_0.eContents().get(1);
		private final Keyword cMustNotAccessExecutorKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cExecutorAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final CrossReference cExecutorDSLExecutorCrossReference_0_3_0 = (CrossReference)cExecutorAssignment_0_3.eContents().get(0);
		private final RuleCall cExecutorDSLExecutorIDTerminalRuleCall_0_3_0_1 = (RuleCall)cExecutorDSLExecutorCrossReference_0_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cAnalyzerKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cTDSLAnalyzerCrossReference_1_1_0 = (CrossReference)cTAssignment_1_1.eContents().get(0);
		private final RuleCall cTDSLAnalyzerIDTerminalRuleCall_1_1_0_1 = (RuleCall)cTDSLAnalyzerCrossReference_1_1_0.eContents().get(1);
		private final Keyword cMustAccessExecutorKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cExecutorAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final CrossReference cExecutorDSLExecutorCrossReference_1_3_0 = (CrossReference)cExecutorAssignment_1_3.eContents().get(0);
		private final RuleCall cExecutorDSLExecutorIDTerminalRuleCall_1_3_0_1 = (RuleCall)cExecutorDSLExecutorCrossReference_1_3_0.eContents().get(1);
		private final Keyword cThroughInterfaceKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cExecutorinterfaceAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final CrossReference cExecutorinterfaceExecutorInterfaceCrossReference_1_5_0 = (CrossReference)cExecutorinterfaceAssignment_1_5.eContents().get(0);
		private final RuleCall cExecutorinterfaceExecutorInterfaceIDTerminalRuleCall_1_5_0_1 = (RuleCall)cExecutorinterfaceExecutorInterfaceCrossReference_1_5_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		
		//DSLRestrictionExecutor:
		//	'analyzer' t=[DSLAnalyzer] 'must-not-access-executor' executor=[DSLExecutor] ';' | 'analyzer' t=[DSLAnalyzer]
		//	'must-access-executor' executor=[DSLExecutor] 'through-interface' executorinterface=[ExecutorInterface] ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'analyzer' t=[DSLAnalyzer] 'must-not-access-executor' executor=[DSLExecutor] ';' | 'analyzer' t=[DSLAnalyzer]
		//'must-access-executor' executor=[DSLExecutor] 'through-interface' executorinterface=[ExecutorInterface] ';'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'analyzer' t=[DSLAnalyzer] 'must-not-access-executor' executor=[DSLExecutor] ';'
		public Group getGroup_0() { return cGroup_0; }
		
		//'analyzer'
		public Keyword getAnalyzerKeyword_0_0() { return cAnalyzerKeyword_0_0; }
		
		//t=[DSLAnalyzer]
		public Assignment getTAssignment_0_1() { return cTAssignment_0_1; }
		
		//[DSLAnalyzer]
		public CrossReference getTDSLAnalyzerCrossReference_0_1_0() { return cTDSLAnalyzerCrossReference_0_1_0; }
		
		//ID
		public RuleCall getTDSLAnalyzerIDTerminalRuleCall_0_1_0_1() { return cTDSLAnalyzerIDTerminalRuleCall_0_1_0_1; }
		
		//'must-not-access-executor'
		public Keyword getMustNotAccessExecutorKeyword_0_2() { return cMustNotAccessExecutorKeyword_0_2; }
		
		//executor=[DSLExecutor]
		public Assignment getExecutorAssignment_0_3() { return cExecutorAssignment_0_3; }
		
		//[DSLExecutor]
		public CrossReference getExecutorDSLExecutorCrossReference_0_3_0() { return cExecutorDSLExecutorCrossReference_0_3_0; }
		
		//ID
		public RuleCall getExecutorDSLExecutorIDTerminalRuleCall_0_3_0_1() { return cExecutorDSLExecutorIDTerminalRuleCall_0_3_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_0_4() { return cSemicolonKeyword_0_4; }
		
		//'analyzer' t=[DSLAnalyzer] 'must-access-executor' executor=[DSLExecutor] 'through-interface'
		//executorinterface=[ExecutorInterface] ';'
		public Group getGroup_1() { return cGroup_1; }
		
		//'analyzer'
		public Keyword getAnalyzerKeyword_1_0() { return cAnalyzerKeyword_1_0; }
		
		//t=[DSLAnalyzer]
		public Assignment getTAssignment_1_1() { return cTAssignment_1_1; }
		
		//[DSLAnalyzer]
		public CrossReference getTDSLAnalyzerCrossReference_1_1_0() { return cTDSLAnalyzerCrossReference_1_1_0; }
		
		//ID
		public RuleCall getTDSLAnalyzerIDTerminalRuleCall_1_1_0_1() { return cTDSLAnalyzerIDTerminalRuleCall_1_1_0_1; }
		
		//'must-access-executor'
		public Keyword getMustAccessExecutorKeyword_1_2() { return cMustAccessExecutorKeyword_1_2; }
		
		//executor=[DSLExecutor]
		public Assignment getExecutorAssignment_1_3() { return cExecutorAssignment_1_3; }
		
		//[DSLExecutor]
		public CrossReference getExecutorDSLExecutorCrossReference_1_3_0() { return cExecutorDSLExecutorCrossReference_1_3_0; }
		
		//ID
		public RuleCall getExecutorDSLExecutorIDTerminalRuleCall_1_3_0_1() { return cExecutorDSLExecutorIDTerminalRuleCall_1_3_0_1; }
		
		//'through-interface'
		public Keyword getThroughInterfaceKeyword_1_4() { return cThroughInterfaceKeyword_1_4; }
		
		//executorinterface=[ExecutorInterface]
		public Assignment getExecutorinterfaceAssignment_1_5() { return cExecutorinterfaceAssignment_1_5; }
		
		//[ExecutorInterface]
		public CrossReference getExecutorinterfaceExecutorInterfaceCrossReference_1_5_0() { return cExecutorinterfaceExecutorInterfaceCrossReference_1_5_0; }
		
		//ID
		public RuleCall getExecutorinterfaceExecutorInterfaceIDTerminalRuleCall_1_5_0_1() { return cExecutorinterfaceExecutorInterfaceIDTerminalRuleCall_1_5_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_1_6() { return cSemicolonKeyword_1_6; }
	}
	public class DSLRestrictionKnowledgeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLRestrictionKnowledge");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cAnalyzerKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cTAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cTDSLAnalyzerCrossReference_0_1_0 = (CrossReference)cTAssignment_0_1.eContents().get(0);
		private final RuleCall cTDSLAnalyzerIDTerminalRuleCall_0_1_0_1 = (RuleCall)cTDSLAnalyzerCrossReference_0_1_0.eContents().get(1);
		private final Keyword cMustNotAccessKnowledgeKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cKnowledgeAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final CrossReference cKnowledgeDSLKnowledgeCrossReference_0_3_0 = (CrossReference)cKnowledgeAssignment_0_3.eContents().get(0);
		private final RuleCall cKnowledgeDSLKnowledgeIDTerminalRuleCall_0_3_0_1 = (RuleCall)cKnowledgeDSLKnowledgeCrossReference_0_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cAnalyzerKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cTDSLAnalyzerCrossReference_1_1_0 = (CrossReference)cTAssignment_1_1.eContents().get(0);
		private final RuleCall cTDSLAnalyzerIDTerminalRuleCall_1_1_0_1 = (RuleCall)cTDSLAnalyzerCrossReference_1_1_0.eContents().get(1);
		private final Keyword cMustAccessKnowledgeKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cKnowledgeAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final CrossReference cKnowledgeDSLKnowledgeCrossReference_1_3_0 = (CrossReference)cKnowledgeAssignment_1_3.eContents().get(0);
		private final RuleCall cKnowledgeDSLKnowledgeIDTerminalRuleCall_1_3_0_1 = (RuleCall)cKnowledgeDSLKnowledgeCrossReference_1_3_0.eContents().get(1);
		private final Keyword cThroughInterfaceKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cKnowledgeinterfaceAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final CrossReference cKnowledgeinterfaceKnowledgeInterfaceCrossReference_1_5_0 = (CrossReference)cKnowledgeinterfaceAssignment_1_5.eContents().get(0);
		private final RuleCall cKnowledgeinterfaceKnowledgeInterfaceIDTerminalRuleCall_1_5_0_1 = (RuleCall)cKnowledgeinterfaceKnowledgeInterfaceCrossReference_1_5_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cPlannerKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cTDSLPlannerCrossReference_2_1_0 = (CrossReference)cTAssignment_2_1.eContents().get(0);
		private final RuleCall cTDSLPlannerIDTerminalRuleCall_2_1_0_1 = (RuleCall)cTDSLPlannerCrossReference_2_1_0.eContents().get(1);
		private final Keyword cMustNotAccessKnowledgeKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cKnowledgeAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final CrossReference cKnowledgeDSLKnowledgeCrossReference_2_3_0 = (CrossReference)cKnowledgeAssignment_2_3.eContents().get(0);
		private final RuleCall cKnowledgeDSLKnowledgeIDTerminalRuleCall_2_3_0_1 = (RuleCall)cKnowledgeDSLKnowledgeCrossReference_2_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cPlannerKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cTDSLPlannerCrossReference_3_1_0 = (CrossReference)cTAssignment_3_1.eContents().get(0);
		private final RuleCall cTDSLPlannerIDTerminalRuleCall_3_1_0_1 = (RuleCall)cTDSLPlannerCrossReference_3_1_0.eContents().get(1);
		private final Keyword cMustAccessKnowledgeKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cKnowledgeAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final CrossReference cKnowledgeDSLKnowledgeCrossReference_3_3_0 = (CrossReference)cKnowledgeAssignment_3_3.eContents().get(0);
		private final RuleCall cKnowledgeDSLKnowledgeIDTerminalRuleCall_3_3_0_1 = (RuleCall)cKnowledgeDSLKnowledgeCrossReference_3_3_0.eContents().get(1);
		private final Keyword cThroughInterfaceKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Assignment cKnowledgeinterfaceAssignment_3_5 = (Assignment)cGroup_3.eContents().get(5);
		private final CrossReference cKnowledgeinterfaceKnowledgeInterfaceCrossReference_3_5_0 = (CrossReference)cKnowledgeinterfaceAssignment_3_5.eContents().get(0);
		private final RuleCall cKnowledgeinterfaceKnowledgeInterfaceIDTerminalRuleCall_3_5_0_1 = (RuleCall)cKnowledgeinterfaceKnowledgeInterfaceCrossReference_3_5_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3_6 = (Keyword)cGroup_3.eContents().get(6);
		
		//DSLRestrictionKnowledge:
		//	'analyzer' t=[DSLAnalyzer] 'must-not-access-knowledge' knowledge=[DSLKnowledge] ';' | 'analyzer' t=[DSLAnalyzer]
		//	'must-access-knowledge' knowledge=[DSLKnowledge] 'through-interface' knowledgeinterface=[KnowledgeInterface] ';' |
		//	'planner' t=[DSLPlanner] 'must-not-access-knowledge' knowledge=[DSLKnowledge] ';' | 'planner' t=[DSLPlanner]
		//	'must-access-knowledge' knowledge=[DSLKnowledge] 'through-interface' knowledgeinterface=[KnowledgeInterface] ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'analyzer' t=[DSLAnalyzer] 'must-not-access-knowledge' knowledge=[DSLKnowledge] ';' | 'analyzer' t=[DSLAnalyzer]
		//'must-access-knowledge' knowledge=[DSLKnowledge] 'through-interface' knowledgeinterface=[KnowledgeInterface] ';' |
		//'planner' t=[DSLPlanner] 'must-not-access-knowledge' knowledge=[DSLKnowledge] ';' | 'planner' t=[DSLPlanner]
		//'must-access-knowledge' knowledge=[DSLKnowledge] 'through-interface' knowledgeinterface=[KnowledgeInterface] ';'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'analyzer' t=[DSLAnalyzer] 'must-not-access-knowledge' knowledge=[DSLKnowledge] ';'
		public Group getGroup_0() { return cGroup_0; }
		
		//'analyzer'
		public Keyword getAnalyzerKeyword_0_0() { return cAnalyzerKeyword_0_0; }
		
		//t=[DSLAnalyzer]
		public Assignment getTAssignment_0_1() { return cTAssignment_0_1; }
		
		//[DSLAnalyzer]
		public CrossReference getTDSLAnalyzerCrossReference_0_1_0() { return cTDSLAnalyzerCrossReference_0_1_0; }
		
		//ID
		public RuleCall getTDSLAnalyzerIDTerminalRuleCall_0_1_0_1() { return cTDSLAnalyzerIDTerminalRuleCall_0_1_0_1; }
		
		//'must-not-access-knowledge'
		public Keyword getMustNotAccessKnowledgeKeyword_0_2() { return cMustNotAccessKnowledgeKeyword_0_2; }
		
		//knowledge=[DSLKnowledge]
		public Assignment getKnowledgeAssignment_0_3() { return cKnowledgeAssignment_0_3; }
		
		//[DSLKnowledge]
		public CrossReference getKnowledgeDSLKnowledgeCrossReference_0_3_0() { return cKnowledgeDSLKnowledgeCrossReference_0_3_0; }
		
		//ID
		public RuleCall getKnowledgeDSLKnowledgeIDTerminalRuleCall_0_3_0_1() { return cKnowledgeDSLKnowledgeIDTerminalRuleCall_0_3_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_0_4() { return cSemicolonKeyword_0_4; }
		
		//'analyzer' t=[DSLAnalyzer] 'must-access-knowledge' knowledge=[DSLKnowledge] 'through-interface'
		//knowledgeinterface=[KnowledgeInterface] ';'
		public Group getGroup_1() { return cGroup_1; }
		
		//'analyzer'
		public Keyword getAnalyzerKeyword_1_0() { return cAnalyzerKeyword_1_0; }
		
		//t=[DSLAnalyzer]
		public Assignment getTAssignment_1_1() { return cTAssignment_1_1; }
		
		//[DSLAnalyzer]
		public CrossReference getTDSLAnalyzerCrossReference_1_1_0() { return cTDSLAnalyzerCrossReference_1_1_0; }
		
		//ID
		public RuleCall getTDSLAnalyzerIDTerminalRuleCall_1_1_0_1() { return cTDSLAnalyzerIDTerminalRuleCall_1_1_0_1; }
		
		//'must-access-knowledge'
		public Keyword getMustAccessKnowledgeKeyword_1_2() { return cMustAccessKnowledgeKeyword_1_2; }
		
		//knowledge=[DSLKnowledge]
		public Assignment getKnowledgeAssignment_1_3() { return cKnowledgeAssignment_1_3; }
		
		//[DSLKnowledge]
		public CrossReference getKnowledgeDSLKnowledgeCrossReference_1_3_0() { return cKnowledgeDSLKnowledgeCrossReference_1_3_0; }
		
		//ID
		public RuleCall getKnowledgeDSLKnowledgeIDTerminalRuleCall_1_3_0_1() { return cKnowledgeDSLKnowledgeIDTerminalRuleCall_1_3_0_1; }
		
		//'through-interface'
		public Keyword getThroughInterfaceKeyword_1_4() { return cThroughInterfaceKeyword_1_4; }
		
		//knowledgeinterface=[KnowledgeInterface]
		public Assignment getKnowledgeinterfaceAssignment_1_5() { return cKnowledgeinterfaceAssignment_1_5; }
		
		//[KnowledgeInterface]
		public CrossReference getKnowledgeinterfaceKnowledgeInterfaceCrossReference_1_5_0() { return cKnowledgeinterfaceKnowledgeInterfaceCrossReference_1_5_0; }
		
		//ID
		public RuleCall getKnowledgeinterfaceKnowledgeInterfaceIDTerminalRuleCall_1_5_0_1() { return cKnowledgeinterfaceKnowledgeInterfaceIDTerminalRuleCall_1_5_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_1_6() { return cSemicolonKeyword_1_6; }
		
		//'planner' t=[DSLPlanner] 'must-not-access-knowledge' knowledge=[DSLKnowledge] ';'
		public Group getGroup_2() { return cGroup_2; }
		
		//'planner'
		public Keyword getPlannerKeyword_2_0() { return cPlannerKeyword_2_0; }
		
		//t=[DSLPlanner]
		public Assignment getTAssignment_2_1() { return cTAssignment_2_1; }
		
		//[DSLPlanner]
		public CrossReference getTDSLPlannerCrossReference_2_1_0() { return cTDSLPlannerCrossReference_2_1_0; }
		
		//ID
		public RuleCall getTDSLPlannerIDTerminalRuleCall_2_1_0_1() { return cTDSLPlannerIDTerminalRuleCall_2_1_0_1; }
		
		//'must-not-access-knowledge'
		public Keyword getMustNotAccessKnowledgeKeyword_2_2() { return cMustNotAccessKnowledgeKeyword_2_2; }
		
		//knowledge=[DSLKnowledge]
		public Assignment getKnowledgeAssignment_2_3() { return cKnowledgeAssignment_2_3; }
		
		//[DSLKnowledge]
		public CrossReference getKnowledgeDSLKnowledgeCrossReference_2_3_0() { return cKnowledgeDSLKnowledgeCrossReference_2_3_0; }
		
		//ID
		public RuleCall getKnowledgeDSLKnowledgeIDTerminalRuleCall_2_3_0_1() { return cKnowledgeDSLKnowledgeIDTerminalRuleCall_2_3_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_2_4() { return cSemicolonKeyword_2_4; }
		
		//'planner' t=[DSLPlanner] 'must-access-knowledge' knowledge=[DSLKnowledge] 'through-interface'
		//knowledgeinterface=[KnowledgeInterface] ';'
		public Group getGroup_3() { return cGroup_3; }
		
		//'planner'
		public Keyword getPlannerKeyword_3_0() { return cPlannerKeyword_3_0; }
		
		//t=[DSLPlanner]
		public Assignment getTAssignment_3_1() { return cTAssignment_3_1; }
		
		//[DSLPlanner]
		public CrossReference getTDSLPlannerCrossReference_3_1_0() { return cTDSLPlannerCrossReference_3_1_0; }
		
		//ID
		public RuleCall getTDSLPlannerIDTerminalRuleCall_3_1_0_1() { return cTDSLPlannerIDTerminalRuleCall_3_1_0_1; }
		
		//'must-access-knowledge'
		public Keyword getMustAccessKnowledgeKeyword_3_2() { return cMustAccessKnowledgeKeyword_3_2; }
		
		//knowledge=[DSLKnowledge]
		public Assignment getKnowledgeAssignment_3_3() { return cKnowledgeAssignment_3_3; }
		
		//[DSLKnowledge]
		public CrossReference getKnowledgeDSLKnowledgeCrossReference_3_3_0() { return cKnowledgeDSLKnowledgeCrossReference_3_3_0; }
		
		//ID
		public RuleCall getKnowledgeDSLKnowledgeIDTerminalRuleCall_3_3_0_1() { return cKnowledgeDSLKnowledgeIDTerminalRuleCall_3_3_0_1; }
		
		//'through-interface'
		public Keyword getThroughInterfaceKeyword_3_4() { return cThroughInterfaceKeyword_3_4; }
		
		//knowledgeinterface=[KnowledgeInterface]
		public Assignment getKnowledgeinterfaceAssignment_3_5() { return cKnowledgeinterfaceAssignment_3_5; }
		
		//[KnowledgeInterface]
		public CrossReference getKnowledgeinterfaceKnowledgeInterfaceCrossReference_3_5_0() { return cKnowledgeinterfaceKnowledgeInterfaceCrossReference_3_5_0; }
		
		//ID
		public RuleCall getKnowledgeinterfaceKnowledgeInterfaceIDTerminalRuleCall_3_5_0_1() { return cKnowledgeinterfaceKnowledgeInterfaceIDTerminalRuleCall_3_5_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_3_6() { return cSemicolonKeyword_3_6; }
	}
	public class DSLRestrictionManagedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLRestrictionManaged");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cManagingKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cTAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cTDSLManagingCrossReference_0_1_0 = (CrossReference)cTAssignment_0_1.eContents().get(0);
		private final RuleCall cTDSLManagingIDTerminalRuleCall_0_1_0_1 = (RuleCall)cTDSLManagingCrossReference_0_1_0.eContents().get(1);
		private final Keyword cMustNotAccessManagedKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cManagedAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final CrossReference cManagedDSLManagedCrossReference_0_3_0 = (CrossReference)cManagedAssignment_0_3.eContents().get(0);
		private final RuleCall cManagedDSLManagedIDTerminalRuleCall_0_3_0_1 = (RuleCall)cManagedDSLManagedCrossReference_0_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cManagingKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cTDSLManagingCrossReference_1_1_0 = (CrossReference)cTAssignment_1_1.eContents().get(0);
		private final RuleCall cTDSLManagingIDTerminalRuleCall_1_1_0_1 = (RuleCall)cTDSLManagingCrossReference_1_1_0.eContents().get(1);
		private final Keyword cMustAccessManagedKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cManagedAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final CrossReference cManagedDSLManagedCrossReference_1_3_0 = (CrossReference)cManagedAssignment_1_3.eContents().get(0);
		private final RuleCall cManagedDSLManagedIDTerminalRuleCall_1_3_0_1 = (RuleCall)cManagedDSLManagedCrossReference_1_3_0.eContents().get(1);
		private final Keyword cThroughInterfaceKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cManagedinterfaceAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final CrossReference cManagedinterfaceManagedInterfaceCrossReference_1_5_0 = (CrossReference)cManagedinterfaceAssignment_1_5.eContents().get(0);
		private final RuleCall cManagedinterfaceManagedInterfaceIDTerminalRuleCall_1_5_0_1 = (RuleCall)cManagedinterfaceManagedInterfaceCrossReference_1_5_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		
		//DSLRestrictionManaged:
		//	'managing' t=[DSLManaging] 'must-not-access-managed' managed=[DSLManaged] ';' | 'managing' t=[DSLManaging]
		//	'must-access-managed' managed=[DSLManaged] 'through-interface' managedinterface=[ManagedInterface] ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'managing' t=[DSLManaging] 'must-not-access-managed' managed=[DSLManaged] ';' | 'managing' t=[DSLManaging]
		//'must-access-managed' managed=[DSLManaged] 'through-interface' managedinterface=[ManagedInterface] ';'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'managing' t=[DSLManaging] 'must-not-access-managed' managed=[DSLManaged] ';'
		public Group getGroup_0() { return cGroup_0; }
		
		//'managing'
		public Keyword getManagingKeyword_0_0() { return cManagingKeyword_0_0; }
		
		//t=[DSLManaging]
		public Assignment getTAssignment_0_1() { return cTAssignment_0_1; }
		
		//[DSLManaging]
		public CrossReference getTDSLManagingCrossReference_0_1_0() { return cTDSLManagingCrossReference_0_1_0; }
		
		//ID
		public RuleCall getTDSLManagingIDTerminalRuleCall_0_1_0_1() { return cTDSLManagingIDTerminalRuleCall_0_1_0_1; }
		
		//'must-not-access-managed'
		public Keyword getMustNotAccessManagedKeyword_0_2() { return cMustNotAccessManagedKeyword_0_2; }
		
		//managed=[DSLManaged]
		public Assignment getManagedAssignment_0_3() { return cManagedAssignment_0_3; }
		
		//[DSLManaged]
		public CrossReference getManagedDSLManagedCrossReference_0_3_0() { return cManagedDSLManagedCrossReference_0_3_0; }
		
		//ID
		public RuleCall getManagedDSLManagedIDTerminalRuleCall_0_3_0_1() { return cManagedDSLManagedIDTerminalRuleCall_0_3_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_0_4() { return cSemicolonKeyword_0_4; }
		
		//'managing' t=[DSLManaging] 'must-access-managed' managed=[DSLManaged] 'through-interface'
		//managedinterface=[ManagedInterface] ';'
		public Group getGroup_1() { return cGroup_1; }
		
		//'managing'
		public Keyword getManagingKeyword_1_0() { return cManagingKeyword_1_0; }
		
		//t=[DSLManaging]
		public Assignment getTAssignment_1_1() { return cTAssignment_1_1; }
		
		//[DSLManaging]
		public CrossReference getTDSLManagingCrossReference_1_1_0() { return cTDSLManagingCrossReference_1_1_0; }
		
		//ID
		public RuleCall getTDSLManagingIDTerminalRuleCall_1_1_0_1() { return cTDSLManagingIDTerminalRuleCall_1_1_0_1; }
		
		//'must-access-managed'
		public Keyword getMustAccessManagedKeyword_1_2() { return cMustAccessManagedKeyword_1_2; }
		
		//managed=[DSLManaged]
		public Assignment getManagedAssignment_1_3() { return cManagedAssignment_1_3; }
		
		//[DSLManaged]
		public CrossReference getManagedDSLManagedCrossReference_1_3_0() { return cManagedDSLManagedCrossReference_1_3_0; }
		
		//ID
		public RuleCall getManagedDSLManagedIDTerminalRuleCall_1_3_0_1() { return cManagedDSLManagedIDTerminalRuleCall_1_3_0_1; }
		
		//'through-interface'
		public Keyword getThroughInterfaceKeyword_1_4() { return cThroughInterfaceKeyword_1_4; }
		
		//managedinterface=[ManagedInterface]
		public Assignment getManagedinterfaceAssignment_1_5() { return cManagedinterfaceAssignment_1_5; }
		
		//[ManagedInterface]
		public CrossReference getManagedinterfaceManagedInterfaceCrossReference_1_5_0() { return cManagedinterfaceManagedInterfaceCrossReference_1_5_0; }
		
		//ID
		public RuleCall getManagedinterfaceManagedInterfaceIDTerminalRuleCall_1_5_0_1() { return cManagedinterfaceManagedInterfaceIDTerminalRuleCall_1_5_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_1_6() { return cSemicolonKeyword_1_6; }
	}
	public class DSLSensorBelongsToElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLSensorBelongsTo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSensorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSensorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cSensorDSLSensorCrossReference_1_0 = (CrossReference)cSensorAssignment_1.eContents().get(0);
		private final RuleCall cSensorDSLSensorIDTerminalRuleCall_1_0_1 = (RuleCall)cSensorDSLSensorCrossReference_1_0.eContents().get(1);
		private final Keyword cMustBeInManagedKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cManagedAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cManagedDSLManagedCrossReference_3_0 = (CrossReference)cManagedAssignment_3.eContents().get(0);
		private final RuleCall cManagedDSLManagedIDTerminalRuleCall_3_0_1 = (RuleCall)cManagedDSLManagedCrossReference_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DSLSensorBelongsTo:
		//	'sensor' sensor=[DSLSensor] 'must-be-in-managed' managed=[DSLManaged] ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'sensor' sensor=[DSLSensor] 'must-be-in-managed' managed=[DSLManaged] ';'
		public Group getGroup() { return cGroup; }
		
		//'sensor'
		public Keyword getSensorKeyword_0() { return cSensorKeyword_0; }
		
		//sensor=[DSLSensor]
		public Assignment getSensorAssignment_1() { return cSensorAssignment_1; }
		
		//[DSLSensor]
		public CrossReference getSensorDSLSensorCrossReference_1_0() { return cSensorDSLSensorCrossReference_1_0; }
		
		//ID
		public RuleCall getSensorDSLSensorIDTerminalRuleCall_1_0_1() { return cSensorDSLSensorIDTerminalRuleCall_1_0_1; }
		
		//'must-be-in-managed'
		public Keyword getMustBeInManagedKeyword_2() { return cMustBeInManagedKeyword_2; }
		
		//managed=[DSLManaged]
		public Assignment getManagedAssignment_3() { return cManagedAssignment_3; }
		
		//[DSLManaged]
		public CrossReference getManagedDSLManagedCrossReference_3_0() { return cManagedDSLManagedCrossReference_3_0; }
		
		//ID
		public RuleCall getManagedDSLManagedIDTerminalRuleCall_3_0_1() { return cManagedDSLManagedIDTerminalRuleCall_3_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class DSLReferenceInputBelongsToElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLReferenceInputBelongsTo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReferenceInputKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReferenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cReferenceDSLReferenceInputCrossReference_1_0 = (CrossReference)cReferenceAssignment_1.eContents().get(0);
		private final RuleCall cReferenceDSLReferenceInputIDTerminalRuleCall_1_0_1 = (RuleCall)cReferenceDSLReferenceInputCrossReference_1_0.eContents().get(1);
		private final Keyword cMustBeInKnowledgeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cKnowledgeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cKnowledgeDSLKnowledgeCrossReference_3_0 = (CrossReference)cKnowledgeAssignment_3.eContents().get(0);
		private final RuleCall cKnowledgeDSLKnowledgeIDTerminalRuleCall_3_0_1 = (RuleCall)cKnowledgeDSLKnowledgeCrossReference_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DSLReferenceInputBelongsTo:
		//	'reference-input' reference=[DSLReferenceInput] 'must-be-in-knowledge' knowledge=[DSLKnowledge] ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'reference-input' reference=[DSLReferenceInput] 'must-be-in-knowledge' knowledge=[DSLKnowledge] ';'
		public Group getGroup() { return cGroup; }
		
		//'reference-input'
		public Keyword getReferenceInputKeyword_0() { return cReferenceInputKeyword_0; }
		
		//reference=[DSLReferenceInput]
		public Assignment getReferenceAssignment_1() { return cReferenceAssignment_1; }
		
		//[DSLReferenceInput]
		public CrossReference getReferenceDSLReferenceInputCrossReference_1_0() { return cReferenceDSLReferenceInputCrossReference_1_0; }
		
		//ID
		public RuleCall getReferenceDSLReferenceInputIDTerminalRuleCall_1_0_1() { return cReferenceDSLReferenceInputIDTerminalRuleCall_1_0_1; }
		
		//'must-be-in-knowledge'
		public Keyword getMustBeInKnowledgeKeyword_2() { return cMustBeInKnowledgeKeyword_2; }
		
		//knowledge=[DSLKnowledge]
		public Assignment getKnowledgeAssignment_3() { return cKnowledgeAssignment_3; }
		
		//[DSLKnowledge]
		public CrossReference getKnowledgeDSLKnowledgeCrossReference_3_0() { return cKnowledgeDSLKnowledgeCrossReference_3_0; }
		
		//ID
		public RuleCall getKnowledgeDSLKnowledgeIDTerminalRuleCall_3_0_1() { return cKnowledgeDSLKnowledgeIDTerminalRuleCall_3_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class DSLEffectorBelongsToElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLEffectorBelongsTo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEffectorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEffectorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cEffectorDSLEffectorCrossReference_1_0 = (CrossReference)cEffectorAssignment_1.eContents().get(0);
		private final RuleCall cEffectorDSLEffectorIDTerminalRuleCall_1_0_1 = (RuleCall)cEffectorDSLEffectorCrossReference_1_0.eContents().get(1);
		private final Keyword cMustBeInManagedKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cManagedAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cManagedDSLManagedCrossReference_3_0 = (CrossReference)cManagedAssignment_3.eContents().get(0);
		private final RuleCall cManagedDSLManagedIDTerminalRuleCall_3_0_1 = (RuleCall)cManagedDSLManagedCrossReference_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DSLEffectorBelongsTo:
		//	'effector' effector=[DSLEffector] 'must-be-in-managed' managed=[DSLManaged] ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'effector' effector=[DSLEffector] 'must-be-in-managed' managed=[DSLManaged] ';'
		public Group getGroup() { return cGroup; }
		
		//'effector'
		public Keyword getEffectorKeyword_0() { return cEffectorKeyword_0; }
		
		//effector=[DSLEffector]
		public Assignment getEffectorAssignment_1() { return cEffectorAssignment_1; }
		
		//[DSLEffector]
		public CrossReference getEffectorDSLEffectorCrossReference_1_0() { return cEffectorDSLEffectorCrossReference_1_0; }
		
		//ID
		public RuleCall getEffectorDSLEffectorIDTerminalRuleCall_1_0_1() { return cEffectorDSLEffectorIDTerminalRuleCall_1_0_1; }
		
		//'must-be-in-managed'
		public Keyword getMustBeInManagedKeyword_2() { return cMustBeInManagedKeyword_2; }
		
		//managed=[DSLManaged]
		public Assignment getManagedAssignment_3() { return cManagedAssignment_3; }
		
		//[DSLManaged]
		public CrossReference getManagedDSLManagedCrossReference_3_0() { return cManagedDSLManagedCrossReference_3_0; }
		
		//ID
		public RuleCall getManagedDSLManagedIDTerminalRuleCall_3_0_1() { return cManagedDSLManagedIDTerminalRuleCall_3_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class DSLMonitorBelongsTo1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLMonitorBelongsTo1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMonitorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMonitorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cMonitorDSLMonitorCrossReference_1_0 = (CrossReference)cMonitorAssignment_1.eContents().get(0);
		private final RuleCall cMonitorDSLMonitorIDTerminalRuleCall_1_0_1 = (RuleCall)cMonitorDSLMonitorCrossReference_1_0.eContents().get(1);
		private final Keyword cMustBeInControlLoopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cClAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cClDSLControlLoopCrossReference_3_0 = (CrossReference)cClAssignment_3.eContents().get(0);
		private final RuleCall cClDSLControlLoopIDTerminalRuleCall_3_0_1 = (RuleCall)cClDSLControlLoopCrossReference_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DSLMonitorBelongsTo1:
		//	'monitor' monitor=[DSLMonitor] 'must-be-in-control-loop' cl=[DSLControlLoop] ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'monitor' monitor=[DSLMonitor] 'must-be-in-control-loop' cl=[DSLControlLoop] ';'
		public Group getGroup() { return cGroup; }
		
		//'monitor'
		public Keyword getMonitorKeyword_0() { return cMonitorKeyword_0; }
		
		//monitor=[DSLMonitor]
		public Assignment getMonitorAssignment_1() { return cMonitorAssignment_1; }
		
		//[DSLMonitor]
		public CrossReference getMonitorDSLMonitorCrossReference_1_0() { return cMonitorDSLMonitorCrossReference_1_0; }
		
		//ID
		public RuleCall getMonitorDSLMonitorIDTerminalRuleCall_1_0_1() { return cMonitorDSLMonitorIDTerminalRuleCall_1_0_1; }
		
		//'must-be-in-control-loop'
		public Keyword getMustBeInControlLoopKeyword_2() { return cMustBeInControlLoopKeyword_2; }
		
		//cl=[DSLControlLoop]
		public Assignment getClAssignment_3() { return cClAssignment_3; }
		
		//[DSLControlLoop]
		public CrossReference getClDSLControlLoopCrossReference_3_0() { return cClDSLControlLoopCrossReference_3_0; }
		
		//ID
		public RuleCall getClDSLControlLoopIDTerminalRuleCall_3_0_1() { return cClDSLControlLoopIDTerminalRuleCall_3_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class DSLMonitorBelongsTo2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLMonitorBelongsTo2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMonitorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMonitorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cMonitorDSLMonitorCrossReference_1_0 = (CrossReference)cMonitorAssignment_1.eContents().get(0);
		private final RuleCall cMonitorDSLMonitorIDTerminalRuleCall_1_0_1 = (RuleCall)cMonitorDSLMonitorCrossReference_1_0.eContents().get(1);
		private final Keyword cMustBeInManagingKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cManagingAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cManagingDSLManagingCrossReference_3_0 = (CrossReference)cManagingAssignment_3.eContents().get(0);
		private final RuleCall cManagingDSLManagingIDTerminalRuleCall_3_0_1 = (RuleCall)cManagingDSLManagingCrossReference_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DSLMonitorBelongsTo2:
		//	'monitor' monitor=[DSLMonitor] 'must-be-in-managing' managing=[DSLManaging] ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'monitor' monitor=[DSLMonitor] 'must-be-in-managing' managing=[DSLManaging] ';'
		public Group getGroup() { return cGroup; }
		
		//'monitor'
		public Keyword getMonitorKeyword_0() { return cMonitorKeyword_0; }
		
		//monitor=[DSLMonitor]
		public Assignment getMonitorAssignment_1() { return cMonitorAssignment_1; }
		
		//[DSLMonitor]
		public CrossReference getMonitorDSLMonitorCrossReference_1_0() { return cMonitorDSLMonitorCrossReference_1_0; }
		
		//ID
		public RuleCall getMonitorDSLMonitorIDTerminalRuleCall_1_0_1() { return cMonitorDSLMonitorIDTerminalRuleCall_1_0_1; }
		
		//'must-be-in-managing'
		public Keyword getMustBeInManagingKeyword_2() { return cMustBeInManagingKeyword_2; }
		
		//managing=[DSLManaging]
		public Assignment getManagingAssignment_3() { return cManagingAssignment_3; }
		
		//[DSLManaging]
		public CrossReference getManagingDSLManagingCrossReference_3_0() { return cManagingDSLManagingCrossReference_3_0; }
		
		//ID
		public RuleCall getManagingDSLManagingIDTerminalRuleCall_3_0_1() { return cManagingDSLManagingIDTerminalRuleCall_3_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class DSLAnalyzerBelongsTo1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLAnalyzerBelongsTo1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAnalyzerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAnalyzerAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cAnalyzerDSLAnalyzerCrossReference_1_0 = (CrossReference)cAnalyzerAssignment_1.eContents().get(0);
		private final RuleCall cAnalyzerDSLAnalyzerIDTerminalRuleCall_1_0_1 = (RuleCall)cAnalyzerDSLAnalyzerCrossReference_1_0.eContents().get(1);
		private final Keyword cMustBeInControlLoopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cClAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cClDSLControlLoopCrossReference_3_0 = (CrossReference)cClAssignment_3.eContents().get(0);
		private final RuleCall cClDSLControlLoopIDTerminalRuleCall_3_0_1 = (RuleCall)cClDSLControlLoopCrossReference_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DSLAnalyzerBelongsTo1:
		//	'analyzer' analyzer=[DSLAnalyzer] 'must-be-in-control-loop' cl=[DSLControlLoop] ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'analyzer' analyzer=[DSLAnalyzer] 'must-be-in-control-loop' cl=[DSLControlLoop] ';'
		public Group getGroup() { return cGroup; }
		
		//'analyzer'
		public Keyword getAnalyzerKeyword_0() { return cAnalyzerKeyword_0; }
		
		//analyzer=[DSLAnalyzer]
		public Assignment getAnalyzerAssignment_1() { return cAnalyzerAssignment_1; }
		
		//[DSLAnalyzer]
		public CrossReference getAnalyzerDSLAnalyzerCrossReference_1_0() { return cAnalyzerDSLAnalyzerCrossReference_1_0; }
		
		//ID
		public RuleCall getAnalyzerDSLAnalyzerIDTerminalRuleCall_1_0_1() { return cAnalyzerDSLAnalyzerIDTerminalRuleCall_1_0_1; }
		
		//'must-be-in-control-loop'
		public Keyword getMustBeInControlLoopKeyword_2() { return cMustBeInControlLoopKeyword_2; }
		
		//cl=[DSLControlLoop]
		public Assignment getClAssignment_3() { return cClAssignment_3; }
		
		//[DSLControlLoop]
		public CrossReference getClDSLControlLoopCrossReference_3_0() { return cClDSLControlLoopCrossReference_3_0; }
		
		//ID
		public RuleCall getClDSLControlLoopIDTerminalRuleCall_3_0_1() { return cClDSLControlLoopIDTerminalRuleCall_3_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class DSLAnalyzerBelongsTo2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLAnalyzerBelongsTo2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAnalyzerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAnalyzerAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cAnalyzerDSLAnalyzerCrossReference_1_0 = (CrossReference)cAnalyzerAssignment_1.eContents().get(0);
		private final RuleCall cAnalyzerDSLAnalyzerIDTerminalRuleCall_1_0_1 = (RuleCall)cAnalyzerDSLAnalyzerCrossReference_1_0.eContents().get(1);
		private final Keyword cMustBeInManagingKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cManagingAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cManagingDSLManagingCrossReference_3_0 = (CrossReference)cManagingAssignment_3.eContents().get(0);
		private final RuleCall cManagingDSLManagingIDTerminalRuleCall_3_0_1 = (RuleCall)cManagingDSLManagingCrossReference_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DSLAnalyzerBelongsTo2:
		//	'analyzer' analyzer=[DSLAnalyzer] 'must-be-in-managing' managing=[DSLManaging] ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'analyzer' analyzer=[DSLAnalyzer] 'must-be-in-managing' managing=[DSLManaging] ';'
		public Group getGroup() { return cGroup; }
		
		//'analyzer'
		public Keyword getAnalyzerKeyword_0() { return cAnalyzerKeyword_0; }
		
		//analyzer=[DSLAnalyzer]
		public Assignment getAnalyzerAssignment_1() { return cAnalyzerAssignment_1; }
		
		//[DSLAnalyzer]
		public CrossReference getAnalyzerDSLAnalyzerCrossReference_1_0() { return cAnalyzerDSLAnalyzerCrossReference_1_0; }
		
		//ID
		public RuleCall getAnalyzerDSLAnalyzerIDTerminalRuleCall_1_0_1() { return cAnalyzerDSLAnalyzerIDTerminalRuleCall_1_0_1; }
		
		//'must-be-in-managing'
		public Keyword getMustBeInManagingKeyword_2() { return cMustBeInManagingKeyword_2; }
		
		//managing=[DSLManaging]
		public Assignment getManagingAssignment_3() { return cManagingAssignment_3; }
		
		//[DSLManaging]
		public CrossReference getManagingDSLManagingCrossReference_3_0() { return cManagingDSLManagingCrossReference_3_0; }
		
		//ID
		public RuleCall getManagingDSLManagingIDTerminalRuleCall_3_0_1() { return cManagingDSLManagingIDTerminalRuleCall_3_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class DSLPlannerBelongsTo1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLPlannerBelongsTo1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPlannerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPlannerAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cPlannerDSLPlannerCrossReference_1_0 = (CrossReference)cPlannerAssignment_1.eContents().get(0);
		private final RuleCall cPlannerDSLPlannerIDTerminalRuleCall_1_0_1 = (RuleCall)cPlannerDSLPlannerCrossReference_1_0.eContents().get(1);
		private final Keyword cMustBeInControlLoopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cClAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cClDSLControlLoopCrossReference_3_0 = (CrossReference)cClAssignment_3.eContents().get(0);
		private final RuleCall cClDSLControlLoopIDTerminalRuleCall_3_0_1 = (RuleCall)cClDSLControlLoopCrossReference_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DSLPlannerBelongsTo1:
		//	'planner' planner=[DSLPlanner] 'must-be-in-control-loop' cl=[DSLControlLoop] ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'planner' planner=[DSLPlanner] 'must-be-in-control-loop' cl=[DSLControlLoop] ';'
		public Group getGroup() { return cGroup; }
		
		//'planner'
		public Keyword getPlannerKeyword_0() { return cPlannerKeyword_0; }
		
		//planner=[DSLPlanner]
		public Assignment getPlannerAssignment_1() { return cPlannerAssignment_1; }
		
		//[DSLPlanner]
		public CrossReference getPlannerDSLPlannerCrossReference_1_0() { return cPlannerDSLPlannerCrossReference_1_0; }
		
		//ID
		public RuleCall getPlannerDSLPlannerIDTerminalRuleCall_1_0_1() { return cPlannerDSLPlannerIDTerminalRuleCall_1_0_1; }
		
		//'must-be-in-control-loop'
		public Keyword getMustBeInControlLoopKeyword_2() { return cMustBeInControlLoopKeyword_2; }
		
		//cl=[DSLControlLoop]
		public Assignment getClAssignment_3() { return cClAssignment_3; }
		
		//[DSLControlLoop]
		public CrossReference getClDSLControlLoopCrossReference_3_0() { return cClDSLControlLoopCrossReference_3_0; }
		
		//ID
		public RuleCall getClDSLControlLoopIDTerminalRuleCall_3_0_1() { return cClDSLControlLoopIDTerminalRuleCall_3_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class DSLPlannerBelongsTo2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLPlannerBelongsTo2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPlannerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPlannerAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cPlannerDSLPlannerCrossReference_1_0 = (CrossReference)cPlannerAssignment_1.eContents().get(0);
		private final RuleCall cPlannerDSLPlannerIDTerminalRuleCall_1_0_1 = (RuleCall)cPlannerDSLPlannerCrossReference_1_0.eContents().get(1);
		private final Keyword cMustBeInManagingKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cManagingAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cManagingDSLManagingCrossReference_3_0 = (CrossReference)cManagingAssignment_3.eContents().get(0);
		private final RuleCall cManagingDSLManagingIDTerminalRuleCall_3_0_1 = (RuleCall)cManagingDSLManagingCrossReference_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DSLPlannerBelongsTo2:
		//	'planner' planner=[DSLPlanner] 'must-be-in-managing' managing=[DSLManaging] ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'planner' planner=[DSLPlanner] 'must-be-in-managing' managing=[DSLManaging] ';'
		public Group getGroup() { return cGroup; }
		
		//'planner'
		public Keyword getPlannerKeyword_0() { return cPlannerKeyword_0; }
		
		//planner=[DSLPlanner]
		public Assignment getPlannerAssignment_1() { return cPlannerAssignment_1; }
		
		//[DSLPlanner]
		public CrossReference getPlannerDSLPlannerCrossReference_1_0() { return cPlannerDSLPlannerCrossReference_1_0; }
		
		//ID
		public RuleCall getPlannerDSLPlannerIDTerminalRuleCall_1_0_1() { return cPlannerDSLPlannerIDTerminalRuleCall_1_0_1; }
		
		//'must-be-in-managing'
		public Keyword getMustBeInManagingKeyword_2() { return cMustBeInManagingKeyword_2; }
		
		//managing=[DSLManaging]
		public Assignment getManagingAssignment_3() { return cManagingAssignment_3; }
		
		//[DSLManaging]
		public CrossReference getManagingDSLManagingCrossReference_3_0() { return cManagingDSLManagingCrossReference_3_0; }
		
		//ID
		public RuleCall getManagingDSLManagingIDTerminalRuleCall_3_0_1() { return cManagingDSLManagingIDTerminalRuleCall_3_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class DSLExecutorBelongsTo1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLExecutorBelongsTo1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExecutorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExecutorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cExecutorDSLExecutorCrossReference_1_0 = (CrossReference)cExecutorAssignment_1.eContents().get(0);
		private final RuleCall cExecutorDSLExecutorIDTerminalRuleCall_1_0_1 = (RuleCall)cExecutorDSLExecutorCrossReference_1_0.eContents().get(1);
		private final Keyword cMustBeInControlLoopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cClAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cClDSLControlLoopCrossReference_3_0 = (CrossReference)cClAssignment_3.eContents().get(0);
		private final RuleCall cClDSLControlLoopIDTerminalRuleCall_3_0_1 = (RuleCall)cClDSLControlLoopCrossReference_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DSLExecutorBelongsTo1:
		//	'executor' executor=[DSLExecutor] 'must-be-in-control-loop' cl=[DSLControlLoop] ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'executor' executor=[DSLExecutor] 'must-be-in-control-loop' cl=[DSLControlLoop] ';'
		public Group getGroup() { return cGroup; }
		
		//'executor'
		public Keyword getExecutorKeyword_0() { return cExecutorKeyword_0; }
		
		//executor=[DSLExecutor]
		public Assignment getExecutorAssignment_1() { return cExecutorAssignment_1; }
		
		//[DSLExecutor]
		public CrossReference getExecutorDSLExecutorCrossReference_1_0() { return cExecutorDSLExecutorCrossReference_1_0; }
		
		//ID
		public RuleCall getExecutorDSLExecutorIDTerminalRuleCall_1_0_1() { return cExecutorDSLExecutorIDTerminalRuleCall_1_0_1; }
		
		//'must-be-in-control-loop'
		public Keyword getMustBeInControlLoopKeyword_2() { return cMustBeInControlLoopKeyword_2; }
		
		//cl=[DSLControlLoop]
		public Assignment getClAssignment_3() { return cClAssignment_3; }
		
		//[DSLControlLoop]
		public CrossReference getClDSLControlLoopCrossReference_3_0() { return cClDSLControlLoopCrossReference_3_0; }
		
		//ID
		public RuleCall getClDSLControlLoopIDTerminalRuleCall_3_0_1() { return cClDSLControlLoopIDTerminalRuleCall_3_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class DSLExecutorBelongsTo2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLExecutorBelongsTo2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExecutorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExecutorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cExecutorDSLExecutorCrossReference_1_0 = (CrossReference)cExecutorAssignment_1.eContents().get(0);
		private final RuleCall cExecutorDSLExecutorIDTerminalRuleCall_1_0_1 = (RuleCall)cExecutorDSLExecutorCrossReference_1_0.eContents().get(1);
		private final Keyword cMustBeInManagingKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cManagingAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cManagingDSLManagingCrossReference_3_0 = (CrossReference)cManagingAssignment_3.eContents().get(0);
		private final RuleCall cManagingDSLManagingIDTerminalRuleCall_3_0_1 = (RuleCall)cManagingDSLManagingCrossReference_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DSLExecutorBelongsTo2:
		//	'executor' executor=[DSLExecutor] 'must-be-in-managing' managing=[DSLManaging] ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'executor' executor=[DSLExecutor] 'must-be-in-managing' managing=[DSLManaging] ';'
		public Group getGroup() { return cGroup; }
		
		//'executor'
		public Keyword getExecutorKeyword_0() { return cExecutorKeyword_0; }
		
		//executor=[DSLExecutor]
		public Assignment getExecutorAssignment_1() { return cExecutorAssignment_1; }
		
		//[DSLExecutor]
		public CrossReference getExecutorDSLExecutorCrossReference_1_0() { return cExecutorDSLExecutorCrossReference_1_0; }
		
		//ID
		public RuleCall getExecutorDSLExecutorIDTerminalRuleCall_1_0_1() { return cExecutorDSLExecutorIDTerminalRuleCall_1_0_1; }
		
		//'must-be-in-managing'
		public Keyword getMustBeInManagingKeyword_2() { return cMustBeInManagingKeyword_2; }
		
		//managing=[DSLManaging]
		public Assignment getManagingAssignment_3() { return cManagingAssignment_3; }
		
		//[DSLManaging]
		public CrossReference getManagingDSLManagingCrossReference_3_0() { return cManagingDSLManagingCrossReference_3_0; }
		
		//ID
		public RuleCall getManagingDSLManagingIDTerminalRuleCall_3_0_1() { return cManagingDSLManagingIDTerminalRuleCall_3_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class DSLClBelongsTo1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLClBelongsTo1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cControlLoopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cClAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cClDSLControlLoopCrossReference_1_0 = (CrossReference)cClAssignment_1.eContents().get(0);
		private final RuleCall cClDSLControlLoopIDTerminalRuleCall_1_0_1 = (RuleCall)cClDSLControlLoopCrossReference_1_0.eContents().get(1);
		private final Keyword cMustBeInControlLoopManagerKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cClmAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cClmDSLControlLoopManagerCrossReference_3_0 = (CrossReference)cClmAssignment_3.eContents().get(0);
		private final RuleCall cClmDSLControlLoopManagerIDTerminalRuleCall_3_0_1 = (RuleCall)cClmDSLControlLoopManagerCrossReference_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DSLClBelongsTo1:
		//	'control-loop' cl=[DSLControlLoop] 'must-be-in-control-loop-manager' clm=[DSLControlLoopManager] ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'control-loop' cl=[DSLControlLoop] 'must-be-in-control-loop-manager' clm=[DSLControlLoopManager] ';'
		public Group getGroup() { return cGroup; }
		
		//'control-loop'
		public Keyword getControlLoopKeyword_0() { return cControlLoopKeyword_0; }
		
		//cl=[DSLControlLoop]
		public Assignment getClAssignment_1() { return cClAssignment_1; }
		
		//[DSLControlLoop]
		public CrossReference getClDSLControlLoopCrossReference_1_0() { return cClDSLControlLoopCrossReference_1_0; }
		
		//ID
		public RuleCall getClDSLControlLoopIDTerminalRuleCall_1_0_1() { return cClDSLControlLoopIDTerminalRuleCall_1_0_1; }
		
		//'must-be-in-control-loop-manager'
		public Keyword getMustBeInControlLoopManagerKeyword_2() { return cMustBeInControlLoopManagerKeyword_2; }
		
		//clm=[DSLControlLoopManager]
		public Assignment getClmAssignment_3() { return cClmAssignment_3; }
		
		//[DSLControlLoopManager]
		public CrossReference getClmDSLControlLoopManagerCrossReference_3_0() { return cClmDSLControlLoopManagerCrossReference_3_0; }
		
		//ID
		public RuleCall getClmDSLControlLoopManagerIDTerminalRuleCall_3_0_1() { return cClmDSLControlLoopManagerIDTerminalRuleCall_3_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class DSLClBelongsTo2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLClBelongsTo2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cControlLoopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cClAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cClDSLControlLoopCrossReference_1_0 = (CrossReference)cClAssignment_1.eContents().get(0);
		private final RuleCall cClDSLControlLoopIDTerminalRuleCall_1_0_1 = (RuleCall)cClDSLControlLoopCrossReference_1_0.eContents().get(1);
		private final Keyword cMustBeInManagingKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cManagingAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cManagingDSLManagingCrossReference_3_0 = (CrossReference)cManagingAssignment_3.eContents().get(0);
		private final RuleCall cManagingDSLManagingIDTerminalRuleCall_3_0_1 = (RuleCall)cManagingDSLManagingCrossReference_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DSLClBelongsTo2:
		//	'control-loop' cl=[DSLControlLoop] 'must-be-in-managing' managing=[DSLManaging] ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'control-loop' cl=[DSLControlLoop] 'must-be-in-managing' managing=[DSLManaging] ';'
		public Group getGroup() { return cGroup; }
		
		//'control-loop'
		public Keyword getControlLoopKeyword_0() { return cControlLoopKeyword_0; }
		
		//cl=[DSLControlLoop]
		public Assignment getClAssignment_1() { return cClAssignment_1; }
		
		//[DSLControlLoop]
		public CrossReference getClDSLControlLoopCrossReference_1_0() { return cClDSLControlLoopCrossReference_1_0; }
		
		//ID
		public RuleCall getClDSLControlLoopIDTerminalRuleCall_1_0_1() { return cClDSLControlLoopIDTerminalRuleCall_1_0_1; }
		
		//'must-be-in-managing'
		public Keyword getMustBeInManagingKeyword_2() { return cMustBeInManagingKeyword_2; }
		
		//managing=[DSLManaging]
		public Assignment getManagingAssignment_3() { return cManagingAssignment_3; }
		
		//[DSLManaging]
		public CrossReference getManagingDSLManagingCrossReference_3_0() { return cManagingDSLManagingCrossReference_3_0; }
		
		//ID
		public RuleCall getManagingDSLManagingIDTerminalRuleCall_3_0_1() { return cManagingDSLManagingIDTerminalRuleCall_3_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class DSLClmBelongsToElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLClmBelongsTo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cControlLoopManagerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cClAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cClDSLControlLoopManagerCrossReference_1_0 = (CrossReference)cClAssignment_1.eContents().get(0);
		private final RuleCall cClDSLControlLoopManagerIDTerminalRuleCall_1_0_1 = (RuleCall)cClDSLControlLoopManagerCrossReference_1_0.eContents().get(1);
		private final Keyword cMustBeInManagingKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cManagingAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cManagingDSLManagingCrossReference_3_0 = (CrossReference)cManagingAssignment_3.eContents().get(0);
		private final RuleCall cManagingDSLManagingIDTerminalRuleCall_3_0_1 = (RuleCall)cManagingDSLManagingCrossReference_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DSLClmBelongsTo:
		//	'control-loop-manager' cl=[DSLControlLoopManager] 'must-be-in-managing' managing=[DSLManaging] ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'control-loop-manager' cl=[DSLControlLoopManager] 'must-be-in-managing' managing=[DSLManaging] ';'
		public Group getGroup() { return cGroup; }
		
		//'control-loop-manager'
		public Keyword getControlLoopManagerKeyword_0() { return cControlLoopManagerKeyword_0; }
		
		//cl=[DSLControlLoopManager]
		public Assignment getClAssignment_1() { return cClAssignment_1; }
		
		//[DSLControlLoopManager]
		public CrossReference getClDSLControlLoopManagerCrossReference_1_0() { return cClDSLControlLoopManagerCrossReference_1_0; }
		
		//ID
		public RuleCall getClDSLControlLoopManagerIDTerminalRuleCall_1_0_1() { return cClDSLControlLoopManagerIDTerminalRuleCall_1_0_1; }
		
		//'must-be-in-managing'
		public Keyword getMustBeInManagingKeyword_2() { return cMustBeInManagingKeyword_2; }
		
		//managing=[DSLManaging]
		public Assignment getManagingAssignment_3() { return cManagingAssignment_3; }
		
		//[DSLManaging]
		public CrossReference getManagingDSLManagingCrossReference_3_0() { return cManagingDSLManagingCrossReference_3_0; }
		
		//ID
		public RuleCall getManagingDSLManagingIDTerminalRuleCall_3_0_1() { return cManagingDSLManagingIDTerminalRuleCall_3_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class DSLMeasuredOuputBelongsToElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLMeasuredOuputBelongsTo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMeasuredOutputKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMeasuredAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cMeasuredDSLMeasuredOutputCrossReference_1_0 = (CrossReference)cMeasuredAssignment_1.eContents().get(0);
		private final RuleCall cMeasuredDSLMeasuredOutputIDTerminalRuleCall_1_0_1 = (RuleCall)cMeasuredDSLMeasuredOutputCrossReference_1_0.eContents().get(1);
		private final Keyword cMustBeInManagedKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cManagedAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cManagedDSLManagedCrossReference_3_0 = (CrossReference)cManagedAssignment_3.eContents().get(0);
		private final RuleCall cManagedDSLManagedIDTerminalRuleCall_3_0_1 = (RuleCall)cManagedDSLManagedCrossReference_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DSLMeasuredOuputBelongsTo:
		//	'measured-output' measured=[DSLMeasuredOutput] 'must-be-in-managed' managed=[DSLManaged] ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'measured-output' measured=[DSLMeasuredOutput] 'must-be-in-managed' managed=[DSLManaged] ';'
		public Group getGroup() { return cGroup; }
		
		//'measured-output'
		public Keyword getMeasuredOutputKeyword_0() { return cMeasuredOutputKeyword_0; }
		
		//measured=[DSLMeasuredOutput]
		public Assignment getMeasuredAssignment_1() { return cMeasuredAssignment_1; }
		
		//[DSLMeasuredOutput]
		public CrossReference getMeasuredDSLMeasuredOutputCrossReference_1_0() { return cMeasuredDSLMeasuredOutputCrossReference_1_0; }
		
		//ID
		public RuleCall getMeasuredDSLMeasuredOutputIDTerminalRuleCall_1_0_1() { return cMeasuredDSLMeasuredOutputIDTerminalRuleCall_1_0_1; }
		
		//'must-be-in-managed'
		public Keyword getMustBeInManagedKeyword_2() { return cMustBeInManagedKeyword_2; }
		
		//managed=[DSLManaged]
		public Assignment getManagedAssignment_3() { return cManagedAssignment_3; }
		
		//[DSLManaged]
		public CrossReference getManagedDSLManagedCrossReference_3_0() { return cManagedDSLManagedCrossReference_3_0; }
		
		//ID
		public RuleCall getManagedDSLManagedIDTerminalRuleCall_3_0_1() { return cManagedDSLManagedIDTerminalRuleCall_3_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class DSLKnowledgeBelongsToElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLKnowledgeBelongsTo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cKnowledgeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cKnowledgeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cKnowledgeDSLKnowledgeCrossReference_1_0 = (CrossReference)cKnowledgeAssignment_1.eContents().get(0);
		private final RuleCall cKnowledgeDSLKnowledgeIDTerminalRuleCall_1_0_1 = (RuleCall)cKnowledgeDSLKnowledgeCrossReference_1_0.eContents().get(1);
		private final Keyword cMustBeInManagingKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cManagingAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cManagingDSLManagingCrossReference_3_0 = (CrossReference)cManagingAssignment_3.eContents().get(0);
		private final RuleCall cManagingDSLManagingIDTerminalRuleCall_3_0_1 = (RuleCall)cManagingDSLManagingCrossReference_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DSLKnowledgeBelongsTo:
		//	'knowledge' knowledge=[DSLKnowledge] 'must-be-in-managing' managing=[DSLManaging] ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'knowledge' knowledge=[DSLKnowledge] 'must-be-in-managing' managing=[DSLManaging] ';'
		public Group getGroup() { return cGroup; }
		
		//'knowledge'
		public Keyword getKnowledgeKeyword_0() { return cKnowledgeKeyword_0; }
		
		//knowledge=[DSLKnowledge]
		public Assignment getKnowledgeAssignment_1() { return cKnowledgeAssignment_1; }
		
		//[DSLKnowledge]
		public CrossReference getKnowledgeDSLKnowledgeCrossReference_1_0() { return cKnowledgeDSLKnowledgeCrossReference_1_0; }
		
		//ID
		public RuleCall getKnowledgeDSLKnowledgeIDTerminalRuleCall_1_0_1() { return cKnowledgeDSLKnowledgeIDTerminalRuleCall_1_0_1; }
		
		//'must-be-in-managing'
		public Keyword getMustBeInManagingKeyword_2() { return cMustBeInManagingKeyword_2; }
		
		//managing=[DSLManaging]
		public Assignment getManagingAssignment_3() { return cManagingAssignment_3; }
		
		//[DSLManaging]
		public CrossReference getManagingDSLManagingCrossReference_3_0() { return cManagingDSLManagingCrossReference_3_0; }
		
		//ID
		public RuleCall getManagingDSLManagingIDTerminalRuleCall_3_0_1() { return cManagingDSLManagingIDTerminalRuleCall_3_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class DSLManagingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLManaging");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cManagingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//DSLManaging:
		//	'Managing' name=ID ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'Managing' name=ID ';'
		public Group getGroup() { return cGroup; }
		
		//'Managing'
		public Keyword getManagingKeyword_0() { return cManagingKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class DSLManagedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLManaged");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cManagedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cWithInterfaceKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cManagedinterfacesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cManagedinterfacesManagedInterfaceParserRuleCall_2_1_0 = (RuleCall)cManagedinterfacesAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cManagedinterfacesAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cManagedinterfacesManagedInterfaceParserRuleCall_2_2_1_0 = (RuleCall)cManagedinterfacesAssignment_2_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DSLManaged:
		//	'Managed' name=ID ('with-interface' managedinterfaces+=ManagedInterface (',' managedinterfaces+=ManagedInterface)*)?
		//	';';
		@Override public ParserRule getRule() { return rule; }
		
		//'Managed' name=ID ('with-interface' managedinterfaces+=ManagedInterface (',' managedinterfaces+=ManagedInterface)*)? ';'
		public Group getGroup() { return cGroup; }
		
		//'Managed'
		public Keyword getManagedKeyword_0() { return cManagedKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('with-interface' managedinterfaces+=ManagedInterface (',' managedinterfaces+=ManagedInterface)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'with-interface'
		public Keyword getWithInterfaceKeyword_2_0() { return cWithInterfaceKeyword_2_0; }
		
		//managedinterfaces+=ManagedInterface
		public Assignment getManagedinterfacesAssignment_2_1() { return cManagedinterfacesAssignment_2_1; }
		
		//ManagedInterface
		public RuleCall getManagedinterfacesManagedInterfaceParserRuleCall_2_1_0() { return cManagedinterfacesManagedInterfaceParserRuleCall_2_1_0; }
		
		//(',' managedinterfaces+=ManagedInterface)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//managedinterfaces+=ManagedInterface
		public Assignment getManagedinterfacesAssignment_2_2_1() { return cManagedinterfacesAssignment_2_2_1; }
		
		//ManagedInterface
		public RuleCall getManagedinterfacesManagedInterfaceParserRuleCall_2_2_1_0() { return cManagedinterfacesManagedInterfaceParserRuleCall_2_2_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class DSLControlLoopManagerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLControlLoopManager");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cControlLoopManagerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cTypeOfKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cDSLTypeCLMParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cWithInterfaceKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cClminterfacesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cClminterfacesControlLoopManagerInterfaceParserRuleCall_4_1_0 = (RuleCall)cClminterfacesAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cClminterfacesAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cClminterfacesControlLoopManagerInterfaceParserRuleCall_4_2_1_0 = (RuleCall)cClminterfacesAssignment_4_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//DSLControlLoopManager:
		//	'ControlLoopManager' name=ID 'typeOf' DSLTypeCLM ('with-interface' clminterfaces+=ControlLoopManagerInterface (','
		//	clminterfaces+=ControlLoopManagerInterface)*)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'ControlLoopManager' name=ID 'typeOf' DSLTypeCLM ('with-interface' clminterfaces+=ControlLoopManagerInterface (','
		//clminterfaces+=ControlLoopManagerInterface)*)? ';'
		public Group getGroup() { return cGroup; }
		
		//'ControlLoopManager'
		public Keyword getControlLoopManagerKeyword_0() { return cControlLoopManagerKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'typeOf'
		public Keyword getTypeOfKeyword_2() { return cTypeOfKeyword_2; }
		
		//DSLTypeCLM
		public RuleCall getDSLTypeCLMParserRuleCall_3() { return cDSLTypeCLMParserRuleCall_3; }
		
		//('with-interface' clminterfaces+=ControlLoopManagerInterface (',' clminterfaces+=ControlLoopManagerInterface)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'with-interface'
		public Keyword getWithInterfaceKeyword_4_0() { return cWithInterfaceKeyword_4_0; }
		
		//clminterfaces+=ControlLoopManagerInterface
		public Assignment getClminterfacesAssignment_4_1() { return cClminterfacesAssignment_4_1; }
		
		//ControlLoopManagerInterface
		public RuleCall getClminterfacesControlLoopManagerInterfaceParserRuleCall_4_1_0() { return cClminterfacesControlLoopManagerInterfaceParserRuleCall_4_1_0; }
		
		//(',' clminterfaces+=ControlLoopManagerInterface)*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//','
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }
		
		//clminterfaces+=ControlLoopManagerInterface
		public Assignment getClminterfacesAssignment_4_2_1() { return cClminterfacesAssignment_4_2_1; }
		
		//ControlLoopManagerInterface
		public RuleCall getClminterfacesControlLoopManagerInterfaceParserRuleCall_4_2_1_0() { return cClminterfacesControlLoopManagerInterfaceParserRuleCall_4_2_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class DSLTypeCLMElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLTypeCLM");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSynchronizedKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cCoordinatedKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cIndependentKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//DSLTypeCLM:
		//	'Synchronized' | 'Coordinated' | 'Independent';
		@Override public ParserRule getRule() { return rule; }
		
		//'Synchronized' | 'Coordinated' | 'Independent'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Synchronized'
		public Keyword getSynchronizedKeyword_0() { return cSynchronizedKeyword_0; }
		
		//'Coordinated'
		public Keyword getCoordinatedKeyword_1() { return cCoordinatedKeyword_1; }
		
		//'Independent'
		public Keyword getIndependentKeyword_2() { return cIndependentKeyword_2; }
	}
	public class DSLControlLoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLControlLoop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cControlLoopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cWithInterfaceKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cClinterfacesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cClinterfacesControlLoopInterfaceParserRuleCall_2_1_0 = (RuleCall)cClinterfacesAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cClinterfacesAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cClinterfacesControlLoopInterfaceParserRuleCall_2_2_1_0 = (RuleCall)cClinterfacesAssignment_2_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DSLControlLoop:
		//	'ControlLoop' name=ID ('with-interface' clinterfaces+=ControlLoopInterface (',' clinterfaces+=ControlLoopInterface)*)?
		//	';';
		@Override public ParserRule getRule() { return rule; }
		
		//'ControlLoop' name=ID ('with-interface' clinterfaces+=ControlLoopInterface (',' clinterfaces+=ControlLoopInterface)*)?
		//';'
		public Group getGroup() { return cGroup; }
		
		//'ControlLoop'
		public Keyword getControlLoopKeyword_0() { return cControlLoopKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('with-interface' clinterfaces+=ControlLoopInterface (',' clinterfaces+=ControlLoopInterface)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'with-interface'
		public Keyword getWithInterfaceKeyword_2_0() { return cWithInterfaceKeyword_2_0; }
		
		//clinterfaces+=ControlLoopInterface
		public Assignment getClinterfacesAssignment_2_1() { return cClinterfacesAssignment_2_1; }
		
		//ControlLoopInterface
		public RuleCall getClinterfacesControlLoopInterfaceParserRuleCall_2_1_0() { return cClinterfacesControlLoopInterfaceParserRuleCall_2_1_0; }
		
		//(',' clinterfaces+=ControlLoopInterface)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//clinterfaces+=ControlLoopInterface
		public Assignment getClinterfacesAssignment_2_2_1() { return cClinterfacesAssignment_2_2_1; }
		
		//ControlLoopInterface
		public RuleCall getClinterfacesControlLoopInterfaceParserRuleCall_2_2_1_0() { return cClinterfacesControlLoopInterfaceParserRuleCall_2_2_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class DSLMonitorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLMonitor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMonitorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cWithInterfaceKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cMonitorinterfacesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cMonitorinterfacesMonitorInterfaceParserRuleCall_2_1_0 = (RuleCall)cMonitorinterfacesAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cMonitorinterfacesAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cMonitorinterfacesMonitorInterfaceParserRuleCall_2_2_1_0 = (RuleCall)cMonitorinterfacesAssignment_2_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DSLMonitor:
		//	'Monitor' name=ID ('with-interface' monitorinterfaces+=MonitorInterface (',' monitorinterfaces+=MonitorInterface)*)?
		//	';';
		@Override public ParserRule getRule() { return rule; }
		
		//'Monitor' name=ID ('with-interface' monitorinterfaces+=MonitorInterface (',' monitorinterfaces+=MonitorInterface)*)? ';'
		public Group getGroup() { return cGroup; }
		
		//'Monitor'
		public Keyword getMonitorKeyword_0() { return cMonitorKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('with-interface' monitorinterfaces+=MonitorInterface (',' monitorinterfaces+=MonitorInterface)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'with-interface'
		public Keyword getWithInterfaceKeyword_2_0() { return cWithInterfaceKeyword_2_0; }
		
		//monitorinterfaces+=MonitorInterface
		public Assignment getMonitorinterfacesAssignment_2_1() { return cMonitorinterfacesAssignment_2_1; }
		
		//MonitorInterface
		public RuleCall getMonitorinterfacesMonitorInterfaceParserRuleCall_2_1_0() { return cMonitorinterfacesMonitorInterfaceParserRuleCall_2_1_0; }
		
		//(',' monitorinterfaces+=MonitorInterface)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//monitorinterfaces+=MonitorInterface
		public Assignment getMonitorinterfacesAssignment_2_2_1() { return cMonitorinterfacesAssignment_2_2_1; }
		
		//MonitorInterface
		public RuleCall getMonitorinterfacesMonitorInterfaceParserRuleCall_2_2_1_0() { return cMonitorinterfacesMonitorInterfaceParserRuleCall_2_2_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class DSLAnalyzerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLAnalyzer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAnalyzerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cWithInterfaceKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAnlyzerinterfacesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAnlyzerinterfacesAnalyzerInterfaceParserRuleCall_2_1_0 = (RuleCall)cAnlyzerinterfacesAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cAnlyzerinterfacesAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cAnlyzerinterfacesAnalyzerInterfaceParserRuleCall_2_2_1_0 = (RuleCall)cAnlyzerinterfacesAssignment_2_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DSLAnalyzer:
		//	'Analyzer' name=ID ('with-interface' anlyzerinterfaces+=AnalyzerInterface (','
		//	anlyzerinterfaces+=AnalyzerInterface)*)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'Analyzer' name=ID ('with-interface' anlyzerinterfaces+=AnalyzerInterface (',' anlyzerinterfaces+=AnalyzerInterface)*)?
		//';'
		public Group getGroup() { return cGroup; }
		
		//'Analyzer'
		public Keyword getAnalyzerKeyword_0() { return cAnalyzerKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('with-interface' anlyzerinterfaces+=AnalyzerInterface (',' anlyzerinterfaces+=AnalyzerInterface)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'with-interface'
		public Keyword getWithInterfaceKeyword_2_0() { return cWithInterfaceKeyword_2_0; }
		
		//anlyzerinterfaces+=AnalyzerInterface
		public Assignment getAnlyzerinterfacesAssignment_2_1() { return cAnlyzerinterfacesAssignment_2_1; }
		
		//AnalyzerInterface
		public RuleCall getAnlyzerinterfacesAnalyzerInterfaceParserRuleCall_2_1_0() { return cAnlyzerinterfacesAnalyzerInterfaceParserRuleCall_2_1_0; }
		
		//(',' anlyzerinterfaces+=AnalyzerInterface)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//anlyzerinterfaces+=AnalyzerInterface
		public Assignment getAnlyzerinterfacesAssignment_2_2_1() { return cAnlyzerinterfacesAssignment_2_2_1; }
		
		//AnalyzerInterface
		public RuleCall getAnlyzerinterfacesAnalyzerInterfaceParserRuleCall_2_2_1_0() { return cAnlyzerinterfacesAnalyzerInterfaceParserRuleCall_2_2_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class DSLPlannerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLPlanner");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPlannerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cWithInterfaceKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPlannerinterfacesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPlannerinterfacesPlannerInterfaceParserRuleCall_2_1_0 = (RuleCall)cPlannerinterfacesAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cPlannerinterfacesAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cPlannerinterfacesPlannerInterfaceParserRuleCall_2_2_1_0 = (RuleCall)cPlannerinterfacesAssignment_2_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DSLPlanner:
		//	'Planner' name=ID ('with-interface' plannerinterfaces+=PlannerInterface (',' plannerinterfaces+=PlannerInterface)*)?
		//	';';
		@Override public ParserRule getRule() { return rule; }
		
		//'Planner' name=ID ('with-interface' plannerinterfaces+=PlannerInterface (',' plannerinterfaces+=PlannerInterface)*)? ';'
		public Group getGroup() { return cGroup; }
		
		//'Planner'
		public Keyword getPlannerKeyword_0() { return cPlannerKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('with-interface' plannerinterfaces+=PlannerInterface (',' plannerinterfaces+=PlannerInterface)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'with-interface'
		public Keyword getWithInterfaceKeyword_2_0() { return cWithInterfaceKeyword_2_0; }
		
		//plannerinterfaces+=PlannerInterface
		public Assignment getPlannerinterfacesAssignment_2_1() { return cPlannerinterfacesAssignment_2_1; }
		
		//PlannerInterface
		public RuleCall getPlannerinterfacesPlannerInterfaceParserRuleCall_2_1_0() { return cPlannerinterfacesPlannerInterfaceParserRuleCall_2_1_0; }
		
		//(',' plannerinterfaces+=PlannerInterface)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//plannerinterfaces+=PlannerInterface
		public Assignment getPlannerinterfacesAssignment_2_2_1() { return cPlannerinterfacesAssignment_2_2_1; }
		
		//PlannerInterface
		public RuleCall getPlannerinterfacesPlannerInterfaceParserRuleCall_2_2_1_0() { return cPlannerinterfacesPlannerInterfaceParserRuleCall_2_2_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class DSLExecutorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLExecutor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExecutorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cWithInterfaceKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExecutorinterfacesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExecutorinterfacesExecutorInterfaceParserRuleCall_2_1_0 = (RuleCall)cExecutorinterfacesAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cExecutorinterfacesAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cExecutorinterfacesExecutorInterfaceParserRuleCall_2_2_1_0 = (RuleCall)cExecutorinterfacesAssignment_2_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DSLExecutor:
		//	'Executor' name=ID ('with-interface' executorinterfaces+=ExecutorInterface (','
		//	executorinterfaces+=ExecutorInterface)*)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'Executor' name=ID ('with-interface' executorinterfaces+=ExecutorInterface (','
		//executorinterfaces+=ExecutorInterface)*)? ';'
		public Group getGroup() { return cGroup; }
		
		//'Executor'
		public Keyword getExecutorKeyword_0() { return cExecutorKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('with-interface' executorinterfaces+=ExecutorInterface (',' executorinterfaces+=ExecutorInterface)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'with-interface'
		public Keyword getWithInterfaceKeyword_2_0() { return cWithInterfaceKeyword_2_0; }
		
		//executorinterfaces+=ExecutorInterface
		public Assignment getExecutorinterfacesAssignment_2_1() { return cExecutorinterfacesAssignment_2_1; }
		
		//ExecutorInterface
		public RuleCall getExecutorinterfacesExecutorInterfaceParserRuleCall_2_1_0() { return cExecutorinterfacesExecutorInterfaceParserRuleCall_2_1_0; }
		
		//(',' executorinterfaces+=ExecutorInterface)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//executorinterfaces+=ExecutorInterface
		public Assignment getExecutorinterfacesAssignment_2_2_1() { return cExecutorinterfacesAssignment_2_2_1; }
		
		//ExecutorInterface
		public RuleCall getExecutorinterfacesExecutorInterfaceParserRuleCall_2_2_1_0() { return cExecutorinterfacesExecutorInterfaceParserRuleCall_2_2_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class DSLKnowledgeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLKnowledge");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cKnowledgeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cWithInterfaceKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cKnowledgeinterfacesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cKnowledgeinterfacesKnowledgeInterfaceParserRuleCall_2_1_0 = (RuleCall)cKnowledgeinterfacesAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cKnowledgeinterfacesAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cKnowledgeinterfacesKnowledgeInterfaceParserRuleCall_2_2_1_0 = (RuleCall)cKnowledgeinterfacesAssignment_2_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DSLKnowledge:
		//	'Knowledge' name=ID ('with-interface' knowledgeinterfaces+=KnowledgeInterface (','
		//	knowledgeinterfaces+=KnowledgeInterface)*)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'Knowledge' name=ID ('with-interface' knowledgeinterfaces+=KnowledgeInterface (','
		//knowledgeinterfaces+=KnowledgeInterface)*)? ';'
		public Group getGroup() { return cGroup; }
		
		//'Knowledge'
		public Keyword getKnowledgeKeyword_0() { return cKnowledgeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('with-interface' knowledgeinterfaces+=KnowledgeInterface (',' knowledgeinterfaces+=KnowledgeInterface)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'with-interface'
		public Keyword getWithInterfaceKeyword_2_0() { return cWithInterfaceKeyword_2_0; }
		
		//knowledgeinterfaces+=KnowledgeInterface
		public Assignment getKnowledgeinterfacesAssignment_2_1() { return cKnowledgeinterfacesAssignment_2_1; }
		
		//KnowledgeInterface
		public RuleCall getKnowledgeinterfacesKnowledgeInterfaceParserRuleCall_2_1_0() { return cKnowledgeinterfacesKnowledgeInterfaceParserRuleCall_2_1_0; }
		
		//(',' knowledgeinterfaces+=KnowledgeInterface)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//knowledgeinterfaces+=KnowledgeInterface
		public Assignment getKnowledgeinterfacesAssignment_2_2_1() { return cKnowledgeinterfacesAssignment_2_2_1; }
		
		//KnowledgeInterface
		public RuleCall getKnowledgeinterfacesKnowledgeInterfaceParserRuleCall_2_2_1_0() { return cKnowledgeinterfacesKnowledgeInterfaceParserRuleCall_2_2_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class DSLSensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLSensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSensorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cWithInterfaceKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSensorinterfacesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSensorinterfacesSensorInterfaceParserRuleCall_2_1_0 = (RuleCall)cSensorinterfacesAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cSensorinterfacesAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cSensorinterfacesSensorInterfaceParserRuleCall_2_2_1_0 = (RuleCall)cSensorinterfacesAssignment_2_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DSLSensor:
		//	'Sensor' name=ID ('with-interface' sensorinterfaces+=SensorInterface (',' sensorinterfaces+=SensorInterface)*)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'Sensor' name=ID ('with-interface' sensorinterfaces+=SensorInterface (',' sensorinterfaces+=SensorInterface)*)? ';'
		public Group getGroup() { return cGroup; }
		
		//'Sensor'
		public Keyword getSensorKeyword_0() { return cSensorKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('with-interface' sensorinterfaces+=SensorInterface (',' sensorinterfaces+=SensorInterface)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'with-interface'
		public Keyword getWithInterfaceKeyword_2_0() { return cWithInterfaceKeyword_2_0; }
		
		//sensorinterfaces+=SensorInterface
		public Assignment getSensorinterfacesAssignment_2_1() { return cSensorinterfacesAssignment_2_1; }
		
		//SensorInterface
		public RuleCall getSensorinterfacesSensorInterfaceParserRuleCall_2_1_0() { return cSensorinterfacesSensorInterfaceParserRuleCall_2_1_0; }
		
		//(',' sensorinterfaces+=SensorInterface)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//sensorinterfaces+=SensorInterface
		public Assignment getSensorinterfacesAssignment_2_2_1() { return cSensorinterfacesAssignment_2_2_1; }
		
		//SensorInterface
		public RuleCall getSensorinterfacesSensorInterfaceParserRuleCall_2_2_1_0() { return cSensorinterfacesSensorInterfaceParserRuleCall_2_2_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class DSLEffectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLEffector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEffectorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cWithInterfaceKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cEffectorinterfacesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cEffectorinterfacesEffectorInterfaceParserRuleCall_2_1_0 = (RuleCall)cEffectorinterfacesAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cEffectorinterfacesAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cEffectorinterfacesEffectorInterfaceParserRuleCall_2_2_1_0 = (RuleCall)cEffectorinterfacesAssignment_2_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DSLEffector:
		//	'Effector' name=ID ('with-interface' effectorinterfaces+=EffectorInterface (','
		//	effectorinterfaces+=EffectorInterface)*)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'Effector' name=ID ('with-interface' effectorinterfaces+=EffectorInterface (','
		//effectorinterfaces+=EffectorInterface)*)? ';'
		public Group getGroup() { return cGroup; }
		
		//'Effector'
		public Keyword getEffectorKeyword_0() { return cEffectorKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('with-interface' effectorinterfaces+=EffectorInterface (',' effectorinterfaces+=EffectorInterface)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'with-interface'
		public Keyword getWithInterfaceKeyword_2_0() { return cWithInterfaceKeyword_2_0; }
		
		//effectorinterfaces+=EffectorInterface
		public Assignment getEffectorinterfacesAssignment_2_1() { return cEffectorinterfacesAssignment_2_1; }
		
		//EffectorInterface
		public RuleCall getEffectorinterfacesEffectorInterfaceParserRuleCall_2_1_0() { return cEffectorinterfacesEffectorInterfaceParserRuleCall_2_1_0; }
		
		//(',' effectorinterfaces+=EffectorInterface)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//effectorinterfaces+=EffectorInterface
		public Assignment getEffectorinterfacesAssignment_2_2_1() { return cEffectorinterfacesAssignment_2_2_1; }
		
		//EffectorInterface
		public RuleCall getEffectorinterfacesEffectorInterfaceParserRuleCall_2_2_1_0() { return cEffectorinterfacesEffectorInterfaceParserRuleCall_2_2_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class DSLReferenceInputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLReferenceInput");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReferenceInputKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//DSLReferenceInput:
		//	'ReferenceInput' name=ID ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'ReferenceInput' name=ID ';'
		public Group getGroup() { return cGroup; }
		
		//'ReferenceInput'
		public Keyword getReferenceInputKeyword_0() { return cReferenceInputKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class DSLMeasuredOutputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLMeasuredOutput");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMeasuredOutputKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//DSLMeasuredOutput:
		//	'MeasuredOutput' name=ID ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'MeasuredOutput' name=ID ';'
		public Group getGroup() { return cGroup; }
		
		//'MeasuredOutput'
		public Keyword getMeasuredOutputKeyword_0() { return cMeasuredOutputKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class EffectorInterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.EffectorInterface");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//EffectorInterface:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class SensorInterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.SensorInterface");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//SensorInterface:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class MonitorInterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.MonitorInterface");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//MonitorInterface:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class AnalyzerInterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.AnalyzerInterface");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//AnalyzerInterface:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class PlannerInterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.PlannerInterface");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//PlannerInterface:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class ExecutorInterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.ExecutorInterface");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//ExecutorInterface:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class KnowledgeInterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.KnowledgeInterface");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//KnowledgeInterface:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class ControlLoopInterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.ControlLoopInterface");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//ControlLoopInterface:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class ControlLoopManagerInterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.ControlLoopManagerInterface");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//ControlLoopManagerInterface:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class ManagedInterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.ManagedInterface");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//ManagedInterface:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	
	
	private final ArchitectureDefinitionElements pArchitectureDefinition;
	private final DSLAbstractionElements pDSLAbstraction;
	private final DSLCompositionElements pDSLComposition;
	private final DSLRestrictionElements pDSLRestriction;
	private final DSLRestrictionEffectorElements pDSLRestrictionEffector;
	private final DSLRestrictionSensorElements pDSLRestrictionSensor;
	private final DSLRestrictionMonitorElements pDSLRestrictionMonitor;
	private final DSLRestrictionPlannerElements pDSLRestrictionPlanner;
	private final DSLRestrictionExecutorElements pDSLRestrictionExecutor;
	private final DSLRestrictionKnowledgeElements pDSLRestrictionKnowledge;
	private final DSLRestrictionManagedElements pDSLRestrictionManaged;
	private final DSLSensorBelongsToElements pDSLSensorBelongsTo;
	private final DSLReferenceInputBelongsToElements pDSLReferenceInputBelongsTo;
	private final DSLEffectorBelongsToElements pDSLEffectorBelongsTo;
	private final DSLMonitorBelongsTo1Elements pDSLMonitorBelongsTo1;
	private final DSLMonitorBelongsTo2Elements pDSLMonitorBelongsTo2;
	private final DSLAnalyzerBelongsTo1Elements pDSLAnalyzerBelongsTo1;
	private final DSLAnalyzerBelongsTo2Elements pDSLAnalyzerBelongsTo2;
	private final DSLPlannerBelongsTo1Elements pDSLPlannerBelongsTo1;
	private final DSLPlannerBelongsTo2Elements pDSLPlannerBelongsTo2;
	private final DSLExecutorBelongsTo1Elements pDSLExecutorBelongsTo1;
	private final DSLExecutorBelongsTo2Elements pDSLExecutorBelongsTo2;
	private final DSLClBelongsTo1Elements pDSLClBelongsTo1;
	private final DSLClBelongsTo2Elements pDSLClBelongsTo2;
	private final DSLClmBelongsToElements pDSLClmBelongsTo;
	private final DSLMeasuredOuputBelongsToElements pDSLMeasuredOuputBelongsTo;
	private final DSLKnowledgeBelongsToElements pDSLKnowledgeBelongsTo;
	private final DSLManagingElements pDSLManaging;
	private final DSLManagedElements pDSLManaged;
	private final DSLControlLoopManagerElements pDSLControlLoopManager;
	private final DSLTypeCLMElements pDSLTypeCLM;
	private final DSLControlLoopElements pDSLControlLoop;
	private final DSLMonitorElements pDSLMonitor;
	private final DSLAnalyzerElements pDSLAnalyzer;
	private final DSLPlannerElements pDSLPlanner;
	private final DSLExecutorElements pDSLExecutor;
	private final DSLKnowledgeElements pDSLKnowledge;
	private final DSLSensorElements pDSLSensor;
	private final DSLEffectorElements pDSLEffector;
	private final DSLReferenceInputElements pDSLReferenceInput;
	private final DSLMeasuredOutputElements pDSLMeasuredOutput;
	private final EffectorInterfaceElements pEffectorInterface;
	private final SensorInterfaceElements pSensorInterface;
	private final MonitorInterfaceElements pMonitorInterface;
	private final AnalyzerInterfaceElements pAnalyzerInterface;
	private final PlannerInterfaceElements pPlannerInterface;
	private final ExecutorInterfaceElements pExecutorInterface;
	private final KnowledgeInterfaceElements pKnowledgeInterface;
	private final ControlLoopInterfaceElements pControlLoopInterface;
	private final ControlLoopManagerInterfaceElements pControlLoopManagerInterface;
	private final ManagedInterfaceElements pManagedInterface;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SasDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pArchitectureDefinition = new ArchitectureDefinitionElements();
		this.pDSLAbstraction = new DSLAbstractionElements();
		this.pDSLComposition = new DSLCompositionElements();
		this.pDSLRestriction = new DSLRestrictionElements();
		this.pDSLRestrictionEffector = new DSLRestrictionEffectorElements();
		this.pDSLRestrictionSensor = new DSLRestrictionSensorElements();
		this.pDSLRestrictionMonitor = new DSLRestrictionMonitorElements();
		this.pDSLRestrictionPlanner = new DSLRestrictionPlannerElements();
		this.pDSLRestrictionExecutor = new DSLRestrictionExecutorElements();
		this.pDSLRestrictionKnowledge = new DSLRestrictionKnowledgeElements();
		this.pDSLRestrictionManaged = new DSLRestrictionManagedElements();
		this.pDSLSensorBelongsTo = new DSLSensorBelongsToElements();
		this.pDSLReferenceInputBelongsTo = new DSLReferenceInputBelongsToElements();
		this.pDSLEffectorBelongsTo = new DSLEffectorBelongsToElements();
		this.pDSLMonitorBelongsTo1 = new DSLMonitorBelongsTo1Elements();
		this.pDSLMonitorBelongsTo2 = new DSLMonitorBelongsTo2Elements();
		this.pDSLAnalyzerBelongsTo1 = new DSLAnalyzerBelongsTo1Elements();
		this.pDSLAnalyzerBelongsTo2 = new DSLAnalyzerBelongsTo2Elements();
		this.pDSLPlannerBelongsTo1 = new DSLPlannerBelongsTo1Elements();
		this.pDSLPlannerBelongsTo2 = new DSLPlannerBelongsTo2Elements();
		this.pDSLExecutorBelongsTo1 = new DSLExecutorBelongsTo1Elements();
		this.pDSLExecutorBelongsTo2 = new DSLExecutorBelongsTo2Elements();
		this.pDSLClBelongsTo1 = new DSLClBelongsTo1Elements();
		this.pDSLClBelongsTo2 = new DSLClBelongsTo2Elements();
		this.pDSLClmBelongsTo = new DSLClmBelongsToElements();
		this.pDSLMeasuredOuputBelongsTo = new DSLMeasuredOuputBelongsToElements();
		this.pDSLKnowledgeBelongsTo = new DSLKnowledgeBelongsToElements();
		this.pDSLManaging = new DSLManagingElements();
		this.pDSLManaged = new DSLManagedElements();
		this.pDSLControlLoopManager = new DSLControlLoopManagerElements();
		this.pDSLTypeCLM = new DSLTypeCLMElements();
		this.pDSLControlLoop = new DSLControlLoopElements();
		this.pDSLMonitor = new DSLMonitorElements();
		this.pDSLAnalyzer = new DSLAnalyzerElements();
		this.pDSLPlanner = new DSLPlannerElements();
		this.pDSLExecutor = new DSLExecutorElements();
		this.pDSLKnowledge = new DSLKnowledgeElements();
		this.pDSLSensor = new DSLSensorElements();
		this.pDSLEffector = new DSLEffectorElements();
		this.pDSLReferenceInput = new DSLReferenceInputElements();
		this.pDSLMeasuredOutput = new DSLMeasuredOutputElements();
		this.pEffectorInterface = new EffectorInterfaceElements();
		this.pSensorInterface = new SensorInterfaceElements();
		this.pMonitorInterface = new MonitorInterfaceElements();
		this.pAnalyzerInterface = new AnalyzerInterfaceElements();
		this.pPlannerInterface = new PlannerInterfaceElements();
		this.pExecutorInterface = new ExecutorInterfaceElements();
		this.pKnowledgeInterface = new KnowledgeInterfaceElements();
		this.pControlLoopInterface = new ControlLoopInterfaceElements();
		this.pControlLoopManagerInterface = new ControlLoopManagerInterfaceElements();
		this.pManagedInterface = new ManagedInterfaceElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("br.ufscar.sas.xtext.sasdsl.SasDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//ArchitectureDefinition:
	//	'Abstractions' '{' abstractions+=DSLAbstraction+ '}'
	//	'Compositions' '{' compositions+=DSLComposition* '}'
	//	'Restrictions' '{' restrictions+=DSLRestriction* '}';
	public ArchitectureDefinitionElements getArchitectureDefinitionAccess() {
		return pArchitectureDefinition;
	}
	
	public ParserRule getArchitectureDefinitionRule() {
		return getArchitectureDefinitionAccess().getRule();
	}
	
	//DSLAbstraction:
	//	DSLManaging | DSLManaged | DSLControlLoopManager | DSLControlLoop | DSLMonitor | DSLAnalyzer | DSLPlanner |
	//	DSLExecutor | DSLKnowledge | DSLSensor | DSLEffector | DSLReferenceInput | DSLMeasuredOutput;
	public DSLAbstractionElements getDSLAbstractionAccess() {
		return pDSLAbstraction;
	}
	
	public ParserRule getDSLAbstractionRule() {
		return getDSLAbstractionAccess().getRule();
	}
	
	//DSLComposition:
	//	DSLSensorBelongsTo | DSLReferenceInputBelongsTo | DSLEffectorBelongsTo | DSLMonitorBelongsTo1 | DSLMonitorBelongsTo2 |
	//	DSLAnalyzerBelongsTo1 | DSLAnalyzerBelongsTo2 | DSLPlannerBelongsTo1 | DSLPlannerBelongsTo2 | DSLExecutorBelongsTo1 |
	//	DSLExecutorBelongsTo2 | DSLClBelongsTo1 | DSLClBelongsTo2 | DSLClmBelongsTo | DSLMeasuredOuputBelongsTo |
	//	DSLKnowledgeBelongsTo;
	public DSLCompositionElements getDSLCompositionAccess() {
		return pDSLComposition;
	}
	
	public ParserRule getDSLCompositionRule() {
		return getDSLCompositionAccess().getRule();
	}
	
	//DSLRestriction:
	//	DSLRestrictionMonitor | DSLRestrictionPlanner | DSLRestrictionExecutor | DSLRestrictionKnowledge |
	//	DSLRestrictionManaged | DSLRestrictionSensor | DSLRestrictionEffector;
	public DSLRestrictionElements getDSLRestrictionAccess() {
		return pDSLRestriction;
	}
	
	public ParserRule getDSLRestrictionRule() {
		return getDSLRestrictionAccess().getRule();
	}
	
	//DSLRestrictionEffector:
	//	'executor' t=[DSLExecutor] 'must-not-access-effector' effector=[DSLEffector] ';' | 'executor' t=[DSLExecutor]
	//	'must-access-effector' effector=[DSLEffector] 'through-interface' effectorinterface=[EffectorInterface] ';';
	public DSLRestrictionEffectorElements getDSLRestrictionEffectorAccess() {
		return pDSLRestrictionEffector;
	}
	
	public ParserRule getDSLRestrictionEffectorRule() {
		return getDSLRestrictionEffectorAccess().getRule();
	}
	
	//DSLRestrictionSensor:
	//	'monitor' t=[DSLMonitor] 'must-not-access-sensor' sensor=[DSLSensor] ';' | 'monitor' t=[DSLMonitor]
	//	'must-access-sensor' sensor=[DSLSensor] 'through-interface' sensorinterface=[SensorInterface] ';';
	public DSLRestrictionSensorElements getDSLRestrictionSensorAccess() {
		return pDSLRestrictionSensor;
	}
	
	public ParserRule getDSLRestrictionSensorRule() {
		return getDSLRestrictionSensorAccess().getRule();
	}
	
	//DSLRestrictionMonitor:
	//	'analyzer' t=[DSLAnalyzer] 'must-not-access-monitor' monitor=[DSLMonitor] ';' | 'analyzer' t=[DSLAnalyzer]
	//	'must-access-monitor' monitor=[DSLMonitor] 'through-interface' monitorinterface=[MonitorInterface] ';';
	public DSLRestrictionMonitorElements getDSLRestrictionMonitorAccess() {
		return pDSLRestrictionMonitor;
	}
	
	public ParserRule getDSLRestrictionMonitorRule() {
		return getDSLRestrictionMonitorAccess().getRule();
	}
	
	//DSLRestrictionPlanner:
	//	'analyzer' t=[DSLAnalyzer] 'must-not-access-planner' planner=[DSLPlanner] ';' | 'analyzer' t=[DSLAnalyzer]
	//	'must-access-planner' planner=[DSLPlanner] 'through-interface' plannerinterface=[PlannerInterface] ';';
	public DSLRestrictionPlannerElements getDSLRestrictionPlannerAccess() {
		return pDSLRestrictionPlanner;
	}
	
	public ParserRule getDSLRestrictionPlannerRule() {
		return getDSLRestrictionPlannerAccess().getRule();
	}
	
	//DSLRestrictionExecutor:
	//	'analyzer' t=[DSLAnalyzer] 'must-not-access-executor' executor=[DSLExecutor] ';' | 'analyzer' t=[DSLAnalyzer]
	//	'must-access-executor' executor=[DSLExecutor] 'through-interface' executorinterface=[ExecutorInterface] ';';
	public DSLRestrictionExecutorElements getDSLRestrictionExecutorAccess() {
		return pDSLRestrictionExecutor;
	}
	
	public ParserRule getDSLRestrictionExecutorRule() {
		return getDSLRestrictionExecutorAccess().getRule();
	}
	
	//DSLRestrictionKnowledge:
	//	'analyzer' t=[DSLAnalyzer] 'must-not-access-knowledge' knowledge=[DSLKnowledge] ';' | 'analyzer' t=[DSLAnalyzer]
	//	'must-access-knowledge' knowledge=[DSLKnowledge] 'through-interface' knowledgeinterface=[KnowledgeInterface] ';' |
	//	'planner' t=[DSLPlanner] 'must-not-access-knowledge' knowledge=[DSLKnowledge] ';' | 'planner' t=[DSLPlanner]
	//	'must-access-knowledge' knowledge=[DSLKnowledge] 'through-interface' knowledgeinterface=[KnowledgeInterface] ';';
	public DSLRestrictionKnowledgeElements getDSLRestrictionKnowledgeAccess() {
		return pDSLRestrictionKnowledge;
	}
	
	public ParserRule getDSLRestrictionKnowledgeRule() {
		return getDSLRestrictionKnowledgeAccess().getRule();
	}
	
	//DSLRestrictionManaged:
	//	'managing' t=[DSLManaging] 'must-not-access-managed' managed=[DSLManaged] ';' | 'managing' t=[DSLManaging]
	//	'must-access-managed' managed=[DSLManaged] 'through-interface' managedinterface=[ManagedInterface] ';';
	public DSLRestrictionManagedElements getDSLRestrictionManagedAccess() {
		return pDSLRestrictionManaged;
	}
	
	public ParserRule getDSLRestrictionManagedRule() {
		return getDSLRestrictionManagedAccess().getRule();
	}
	
	//DSLSensorBelongsTo:
	//	'sensor' sensor=[DSLSensor] 'must-be-in-managed' managed=[DSLManaged] ';';
	public DSLSensorBelongsToElements getDSLSensorBelongsToAccess() {
		return pDSLSensorBelongsTo;
	}
	
	public ParserRule getDSLSensorBelongsToRule() {
		return getDSLSensorBelongsToAccess().getRule();
	}
	
	//DSLReferenceInputBelongsTo:
	//	'reference-input' reference=[DSLReferenceInput] 'must-be-in-knowledge' knowledge=[DSLKnowledge] ';';
	public DSLReferenceInputBelongsToElements getDSLReferenceInputBelongsToAccess() {
		return pDSLReferenceInputBelongsTo;
	}
	
	public ParserRule getDSLReferenceInputBelongsToRule() {
		return getDSLReferenceInputBelongsToAccess().getRule();
	}
	
	//DSLEffectorBelongsTo:
	//	'effector' effector=[DSLEffector] 'must-be-in-managed' managed=[DSLManaged] ';';
	public DSLEffectorBelongsToElements getDSLEffectorBelongsToAccess() {
		return pDSLEffectorBelongsTo;
	}
	
	public ParserRule getDSLEffectorBelongsToRule() {
		return getDSLEffectorBelongsToAccess().getRule();
	}
	
	//DSLMonitorBelongsTo1:
	//	'monitor' monitor=[DSLMonitor] 'must-be-in-control-loop' cl=[DSLControlLoop] ';';
	public DSLMonitorBelongsTo1Elements getDSLMonitorBelongsTo1Access() {
		return pDSLMonitorBelongsTo1;
	}
	
	public ParserRule getDSLMonitorBelongsTo1Rule() {
		return getDSLMonitorBelongsTo1Access().getRule();
	}
	
	//DSLMonitorBelongsTo2:
	//	'monitor' monitor=[DSLMonitor] 'must-be-in-managing' managing=[DSLManaging] ';';
	public DSLMonitorBelongsTo2Elements getDSLMonitorBelongsTo2Access() {
		return pDSLMonitorBelongsTo2;
	}
	
	public ParserRule getDSLMonitorBelongsTo2Rule() {
		return getDSLMonitorBelongsTo2Access().getRule();
	}
	
	//DSLAnalyzerBelongsTo1:
	//	'analyzer' analyzer=[DSLAnalyzer] 'must-be-in-control-loop' cl=[DSLControlLoop] ';';
	public DSLAnalyzerBelongsTo1Elements getDSLAnalyzerBelongsTo1Access() {
		return pDSLAnalyzerBelongsTo1;
	}
	
	public ParserRule getDSLAnalyzerBelongsTo1Rule() {
		return getDSLAnalyzerBelongsTo1Access().getRule();
	}
	
	//DSLAnalyzerBelongsTo2:
	//	'analyzer' analyzer=[DSLAnalyzer] 'must-be-in-managing' managing=[DSLManaging] ';';
	public DSLAnalyzerBelongsTo2Elements getDSLAnalyzerBelongsTo2Access() {
		return pDSLAnalyzerBelongsTo2;
	}
	
	public ParserRule getDSLAnalyzerBelongsTo2Rule() {
		return getDSLAnalyzerBelongsTo2Access().getRule();
	}
	
	//DSLPlannerBelongsTo1:
	//	'planner' planner=[DSLPlanner] 'must-be-in-control-loop' cl=[DSLControlLoop] ';';
	public DSLPlannerBelongsTo1Elements getDSLPlannerBelongsTo1Access() {
		return pDSLPlannerBelongsTo1;
	}
	
	public ParserRule getDSLPlannerBelongsTo1Rule() {
		return getDSLPlannerBelongsTo1Access().getRule();
	}
	
	//DSLPlannerBelongsTo2:
	//	'planner' planner=[DSLPlanner] 'must-be-in-managing' managing=[DSLManaging] ';';
	public DSLPlannerBelongsTo2Elements getDSLPlannerBelongsTo2Access() {
		return pDSLPlannerBelongsTo2;
	}
	
	public ParserRule getDSLPlannerBelongsTo2Rule() {
		return getDSLPlannerBelongsTo2Access().getRule();
	}
	
	//DSLExecutorBelongsTo1:
	//	'executor' executor=[DSLExecutor] 'must-be-in-control-loop' cl=[DSLControlLoop] ';';
	public DSLExecutorBelongsTo1Elements getDSLExecutorBelongsTo1Access() {
		return pDSLExecutorBelongsTo1;
	}
	
	public ParserRule getDSLExecutorBelongsTo1Rule() {
		return getDSLExecutorBelongsTo1Access().getRule();
	}
	
	//DSLExecutorBelongsTo2:
	//	'executor' executor=[DSLExecutor] 'must-be-in-managing' managing=[DSLManaging] ';';
	public DSLExecutorBelongsTo2Elements getDSLExecutorBelongsTo2Access() {
		return pDSLExecutorBelongsTo2;
	}
	
	public ParserRule getDSLExecutorBelongsTo2Rule() {
		return getDSLExecutorBelongsTo2Access().getRule();
	}
	
	//DSLClBelongsTo1:
	//	'control-loop' cl=[DSLControlLoop] 'must-be-in-control-loop-manager' clm=[DSLControlLoopManager] ';';
	public DSLClBelongsTo1Elements getDSLClBelongsTo1Access() {
		return pDSLClBelongsTo1;
	}
	
	public ParserRule getDSLClBelongsTo1Rule() {
		return getDSLClBelongsTo1Access().getRule();
	}
	
	//DSLClBelongsTo2:
	//	'control-loop' cl=[DSLControlLoop] 'must-be-in-managing' managing=[DSLManaging] ';';
	public DSLClBelongsTo2Elements getDSLClBelongsTo2Access() {
		return pDSLClBelongsTo2;
	}
	
	public ParserRule getDSLClBelongsTo2Rule() {
		return getDSLClBelongsTo2Access().getRule();
	}
	
	//DSLClmBelongsTo:
	//	'control-loop-manager' cl=[DSLControlLoopManager] 'must-be-in-managing' managing=[DSLManaging] ';';
	public DSLClmBelongsToElements getDSLClmBelongsToAccess() {
		return pDSLClmBelongsTo;
	}
	
	public ParserRule getDSLClmBelongsToRule() {
		return getDSLClmBelongsToAccess().getRule();
	}
	
	//DSLMeasuredOuputBelongsTo:
	//	'measured-output' measured=[DSLMeasuredOutput] 'must-be-in-managed' managed=[DSLManaged] ';';
	public DSLMeasuredOuputBelongsToElements getDSLMeasuredOuputBelongsToAccess() {
		return pDSLMeasuredOuputBelongsTo;
	}
	
	public ParserRule getDSLMeasuredOuputBelongsToRule() {
		return getDSLMeasuredOuputBelongsToAccess().getRule();
	}
	
	//DSLKnowledgeBelongsTo:
	//	'knowledge' knowledge=[DSLKnowledge] 'must-be-in-managing' managing=[DSLManaging] ';';
	public DSLKnowledgeBelongsToElements getDSLKnowledgeBelongsToAccess() {
		return pDSLKnowledgeBelongsTo;
	}
	
	public ParserRule getDSLKnowledgeBelongsToRule() {
		return getDSLKnowledgeBelongsToAccess().getRule();
	}
	
	//DSLManaging:
	//	'Managing' name=ID ';';
	public DSLManagingElements getDSLManagingAccess() {
		return pDSLManaging;
	}
	
	public ParserRule getDSLManagingRule() {
		return getDSLManagingAccess().getRule();
	}
	
	//DSLManaged:
	//	'Managed' name=ID ('with-interface' managedinterfaces+=ManagedInterface (',' managedinterfaces+=ManagedInterface)*)?
	//	';';
	public DSLManagedElements getDSLManagedAccess() {
		return pDSLManaged;
	}
	
	public ParserRule getDSLManagedRule() {
		return getDSLManagedAccess().getRule();
	}
	
	//DSLControlLoopManager:
	//	'ControlLoopManager' name=ID 'typeOf' DSLTypeCLM ('with-interface' clminterfaces+=ControlLoopManagerInterface (','
	//	clminterfaces+=ControlLoopManagerInterface)*)? ';';
	public DSLControlLoopManagerElements getDSLControlLoopManagerAccess() {
		return pDSLControlLoopManager;
	}
	
	public ParserRule getDSLControlLoopManagerRule() {
		return getDSLControlLoopManagerAccess().getRule();
	}
	
	//DSLTypeCLM:
	//	'Synchronized' | 'Coordinated' | 'Independent';
	public DSLTypeCLMElements getDSLTypeCLMAccess() {
		return pDSLTypeCLM;
	}
	
	public ParserRule getDSLTypeCLMRule() {
		return getDSLTypeCLMAccess().getRule();
	}
	
	//DSLControlLoop:
	//	'ControlLoop' name=ID ('with-interface' clinterfaces+=ControlLoopInterface (',' clinterfaces+=ControlLoopInterface)*)?
	//	';';
	public DSLControlLoopElements getDSLControlLoopAccess() {
		return pDSLControlLoop;
	}
	
	public ParserRule getDSLControlLoopRule() {
		return getDSLControlLoopAccess().getRule();
	}
	
	//DSLMonitor:
	//	'Monitor' name=ID ('with-interface' monitorinterfaces+=MonitorInterface (',' monitorinterfaces+=MonitorInterface)*)?
	//	';';
	public DSLMonitorElements getDSLMonitorAccess() {
		return pDSLMonitor;
	}
	
	public ParserRule getDSLMonitorRule() {
		return getDSLMonitorAccess().getRule();
	}
	
	//DSLAnalyzer:
	//	'Analyzer' name=ID ('with-interface' anlyzerinterfaces+=AnalyzerInterface (','
	//	anlyzerinterfaces+=AnalyzerInterface)*)? ';';
	public DSLAnalyzerElements getDSLAnalyzerAccess() {
		return pDSLAnalyzer;
	}
	
	public ParserRule getDSLAnalyzerRule() {
		return getDSLAnalyzerAccess().getRule();
	}
	
	//DSLPlanner:
	//	'Planner' name=ID ('with-interface' plannerinterfaces+=PlannerInterface (',' plannerinterfaces+=PlannerInterface)*)?
	//	';';
	public DSLPlannerElements getDSLPlannerAccess() {
		return pDSLPlanner;
	}
	
	public ParserRule getDSLPlannerRule() {
		return getDSLPlannerAccess().getRule();
	}
	
	//DSLExecutor:
	//	'Executor' name=ID ('with-interface' executorinterfaces+=ExecutorInterface (','
	//	executorinterfaces+=ExecutorInterface)*)? ';';
	public DSLExecutorElements getDSLExecutorAccess() {
		return pDSLExecutor;
	}
	
	public ParserRule getDSLExecutorRule() {
		return getDSLExecutorAccess().getRule();
	}
	
	//DSLKnowledge:
	//	'Knowledge' name=ID ('with-interface' knowledgeinterfaces+=KnowledgeInterface (','
	//	knowledgeinterfaces+=KnowledgeInterface)*)? ';';
	public DSLKnowledgeElements getDSLKnowledgeAccess() {
		return pDSLKnowledge;
	}
	
	public ParserRule getDSLKnowledgeRule() {
		return getDSLKnowledgeAccess().getRule();
	}
	
	//DSLSensor:
	//	'Sensor' name=ID ('with-interface' sensorinterfaces+=SensorInterface (',' sensorinterfaces+=SensorInterface)*)? ';';
	public DSLSensorElements getDSLSensorAccess() {
		return pDSLSensor;
	}
	
	public ParserRule getDSLSensorRule() {
		return getDSLSensorAccess().getRule();
	}
	
	//DSLEffector:
	//	'Effector' name=ID ('with-interface' effectorinterfaces+=EffectorInterface (','
	//	effectorinterfaces+=EffectorInterface)*)? ';';
	public DSLEffectorElements getDSLEffectorAccess() {
		return pDSLEffector;
	}
	
	public ParserRule getDSLEffectorRule() {
		return getDSLEffectorAccess().getRule();
	}
	
	//DSLReferenceInput:
	//	'ReferenceInput' name=ID ';';
	public DSLReferenceInputElements getDSLReferenceInputAccess() {
		return pDSLReferenceInput;
	}
	
	public ParserRule getDSLReferenceInputRule() {
		return getDSLReferenceInputAccess().getRule();
	}
	
	//DSLMeasuredOutput:
	//	'MeasuredOutput' name=ID ';';
	public DSLMeasuredOutputElements getDSLMeasuredOutputAccess() {
		return pDSLMeasuredOutput;
	}
	
	public ParserRule getDSLMeasuredOutputRule() {
		return getDSLMeasuredOutputAccess().getRule();
	}
	
	//EffectorInterface:
	//	name=ID;
	public EffectorInterfaceElements getEffectorInterfaceAccess() {
		return pEffectorInterface;
	}
	
	public ParserRule getEffectorInterfaceRule() {
		return getEffectorInterfaceAccess().getRule();
	}
	
	//SensorInterface:
	//	name=ID;
	public SensorInterfaceElements getSensorInterfaceAccess() {
		return pSensorInterface;
	}
	
	public ParserRule getSensorInterfaceRule() {
		return getSensorInterfaceAccess().getRule();
	}
	
	//MonitorInterface:
	//	name=ID;
	public MonitorInterfaceElements getMonitorInterfaceAccess() {
		return pMonitorInterface;
	}
	
	public ParserRule getMonitorInterfaceRule() {
		return getMonitorInterfaceAccess().getRule();
	}
	
	//AnalyzerInterface:
	//	name=ID;
	public AnalyzerInterfaceElements getAnalyzerInterfaceAccess() {
		return pAnalyzerInterface;
	}
	
	public ParserRule getAnalyzerInterfaceRule() {
		return getAnalyzerInterfaceAccess().getRule();
	}
	
	//PlannerInterface:
	//	name=ID;
	public PlannerInterfaceElements getPlannerInterfaceAccess() {
		return pPlannerInterface;
	}
	
	public ParserRule getPlannerInterfaceRule() {
		return getPlannerInterfaceAccess().getRule();
	}
	
	//ExecutorInterface:
	//	name=ID;
	public ExecutorInterfaceElements getExecutorInterfaceAccess() {
		return pExecutorInterface;
	}
	
	public ParserRule getExecutorInterfaceRule() {
		return getExecutorInterfaceAccess().getRule();
	}
	
	//KnowledgeInterface:
	//	name=ID;
	public KnowledgeInterfaceElements getKnowledgeInterfaceAccess() {
		return pKnowledgeInterface;
	}
	
	public ParserRule getKnowledgeInterfaceRule() {
		return getKnowledgeInterfaceAccess().getRule();
	}
	
	//ControlLoopInterface:
	//	name=ID;
	public ControlLoopInterfaceElements getControlLoopInterfaceAccess() {
		return pControlLoopInterface;
	}
	
	public ParserRule getControlLoopInterfaceRule() {
		return getControlLoopInterfaceAccess().getRule();
	}
	
	//ControlLoopManagerInterface:
	//	name=ID;
	public ControlLoopManagerInterfaceElements getControlLoopManagerInterfaceAccess() {
		return pControlLoopManagerInterface;
	}
	
	public ParserRule getControlLoopManagerInterfaceRule() {
		return getControlLoopManagerInterfaceAccess().getRule();
	}
	
	//ManagedInterface:
	//	name=ID;
	public ManagedInterfaceElements getManagedInterfaceAccess() {
		return pManagedInterface;
	}
	
	public ParserRule getManagedInterfaceRule() {
		return getManagedInterfaceAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
