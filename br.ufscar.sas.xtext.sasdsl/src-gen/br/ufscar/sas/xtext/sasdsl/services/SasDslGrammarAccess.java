/*
 * generated by Xtext 2.16.0
 */
package br.ufscar.sas.xtext.sasdsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SasDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ArchitectureDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.ArchitectureDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAbstractionsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAbstractionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAbstractionsDSLAbstractionsParserRuleCall_2_0 = (RuleCall)cAbstractionsAssignment_2.eContents().get(0);
		private final Keyword cRestrictionsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDslRestrictionsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDslRestrictionsDSLRestrictionsParserRuleCall_5_0 = (RuleCall)cDslRestrictionsAssignment_5.eContents().get(0);
		
		//ArchitectureDefinition:
		//	'Abstractions' ':' abstractions+=DSLAbstractions+
		//	'Restrictions' ':' dslRestrictions+=DSLRestrictions*;
		@Override public ParserRule getRule() { return rule; }
		
		//'Abstractions' ':' abstractions+=DSLAbstractions+ 'Restrictions' ':' dslRestrictions+=DSLRestrictions*
		public Group getGroup() { return cGroup; }
		
		//'Abstractions'
		public Keyword getAbstractionsKeyword_0() { return cAbstractionsKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//abstractions+=DSLAbstractions+
		public Assignment getAbstractionsAssignment_2() { return cAbstractionsAssignment_2; }
		
		//DSLAbstractions
		public RuleCall getAbstractionsDSLAbstractionsParserRuleCall_2_0() { return cAbstractionsDSLAbstractionsParserRuleCall_2_0; }
		
		//'Restrictions'
		public Keyword getRestrictionsKeyword_3() { return cRestrictionsKeyword_3; }
		
		//':'
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
		
		//dslRestrictions+=DSLRestrictions*
		public Assignment getDslRestrictionsAssignment_5() { return cDslRestrictionsAssignment_5; }
		
		//DSLRestrictions
		public RuleCall getDslRestrictionsDSLRestrictionsParserRuleCall_5_0() { return cDslRestrictionsDSLRestrictionsParserRuleCall_5_0; }
	}
	public class DSLAbstractionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLAbstractions");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDSLManagingParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDSLManagedParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDSLControlLoopManagerParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDSLControlLoopParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDSLMonitorParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cDSLAnalyzerParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cDSLPlannerParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cDSLExecutorParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cDSLKnowledgeParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cDSLSensorParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cDSLEffectorParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cDSLProbeParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cDSLGaugeParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cDSLReferenceInputParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cDSLMeasuredOutputParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		
		//DSLAbstractions:
		//	DSLManaging | DSLManaged | DSLControlLoopManager | DSLControlLoop | DSLMonitor | DSLAnalyzer | DSLPlanner |
		//	DSLExecutor | DSLKnowledge | DSLSensor | DSLEffector | DSLProbe | DSLGauge | DSLReferenceInput | DSLMeasuredOutput;
		@Override public ParserRule getRule() { return rule; }
		
		//DSLManaging | DSLManaged | DSLControlLoopManager | DSLControlLoop | DSLMonitor | DSLAnalyzer | DSLPlanner | DSLExecutor
		//| DSLKnowledge | DSLSensor | DSLEffector | DSLProbe | DSLGauge | DSLReferenceInput | DSLMeasuredOutput
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DSLManaging
		public RuleCall getDSLManagingParserRuleCall_0() { return cDSLManagingParserRuleCall_0; }
		
		//DSLManaged
		public RuleCall getDSLManagedParserRuleCall_1() { return cDSLManagedParserRuleCall_1; }
		
		//DSLControlLoopManager
		public RuleCall getDSLControlLoopManagerParserRuleCall_2() { return cDSLControlLoopManagerParserRuleCall_2; }
		
		//DSLControlLoop
		public RuleCall getDSLControlLoopParserRuleCall_3() { return cDSLControlLoopParserRuleCall_3; }
		
		//DSLMonitor
		public RuleCall getDSLMonitorParserRuleCall_4() { return cDSLMonitorParserRuleCall_4; }
		
		//DSLAnalyzer
		public RuleCall getDSLAnalyzerParserRuleCall_5() { return cDSLAnalyzerParserRuleCall_5; }
		
		//DSLPlanner
		public RuleCall getDSLPlannerParserRuleCall_6() { return cDSLPlannerParserRuleCall_6; }
		
		//DSLExecutor
		public RuleCall getDSLExecutorParserRuleCall_7() { return cDSLExecutorParserRuleCall_7; }
		
		//DSLKnowledge
		public RuleCall getDSLKnowledgeParserRuleCall_8() { return cDSLKnowledgeParserRuleCall_8; }
		
		//DSLSensor
		public RuleCall getDSLSensorParserRuleCall_9() { return cDSLSensorParserRuleCall_9; }
		
		//DSLEffector
		public RuleCall getDSLEffectorParserRuleCall_10() { return cDSLEffectorParserRuleCall_10; }
		
		//DSLProbe
		public RuleCall getDSLProbeParserRuleCall_11() { return cDSLProbeParserRuleCall_11; }
		
		//DSLGauge
		public RuleCall getDSLGaugeParserRuleCall_12() { return cDSLGaugeParserRuleCall_12; }
		
		//DSLReferenceInput
		public RuleCall getDSLReferenceInputParserRuleCall_13() { return cDSLReferenceInputParserRuleCall_13; }
		
		//DSLMeasuredOutput
		public RuleCall getDSLMeasuredOutputParserRuleCall_14() { return cDSLMeasuredOutputParserRuleCall_14; }
	}
	public class DSLManagingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLManaging");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cManagingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cInKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSubSystemAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cSubSystemDSLManagingCrossReference_2_1_0 = (CrossReference)cSubSystemAssignment_2_1.eContents().get(0);
		private final RuleCall cSubSystemDSLManagingIDTerminalRuleCall_2_1_0_1 = (RuleCall)cSubSystemDSLManagingCrossReference_2_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DSLManaging:
		//	'Managing' name=ID ('in' subSystem=[DSLManaging])? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'Managing' name=ID ('in' subSystem=[DSLManaging])? ';'
		public Group getGroup() { return cGroup; }
		
		//'Managing'
		public Keyword getManagingKeyword_0() { return cManagingKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('in' subSystem=[DSLManaging])?
		public Group getGroup_2() { return cGroup_2; }
		
		//'in'
		public Keyword getInKeyword_2_0() { return cInKeyword_2_0; }
		
		//subSystem=[DSLManaging]
		public Assignment getSubSystemAssignment_2_1() { return cSubSystemAssignment_2_1; }
		
		//[DSLManaging]
		public CrossReference getSubSystemDSLManagingCrossReference_2_1_0() { return cSubSystemDSLManagingCrossReference_2_1_0; }
		
		//ID
		public RuleCall getSubSystemDSLManagingIDTerminalRuleCall_2_1_0_1() { return cSubSystemDSLManagingIDTerminalRuleCall_2_1_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class DSLManagedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLManaged");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cManagedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cInKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSubSystemAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cSubSystemDSLManagedCrossReference_2_1_0 = (CrossReference)cSubSystemAssignment_2_1.eContents().get(0);
		private final RuleCall cSubSystemDSLManagedIDTerminalRuleCall_2_1_0_1 = (RuleCall)cSubSystemDSLManagedCrossReference_2_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DSLManaged:
		//	'Managed' name=ID ('in' subSystem=[DSLManaged])? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'Managed' name=ID ('in' subSystem=[DSLManaged])? ';'
		public Group getGroup() { return cGroup; }
		
		//'Managed'
		public Keyword getManagedKeyword_0() { return cManagedKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('in' subSystem=[DSLManaged])?
		public Group getGroup_2() { return cGroup_2; }
		
		//'in'
		public Keyword getInKeyword_2_0() { return cInKeyword_2_0; }
		
		//subSystem=[DSLManaged]
		public Assignment getSubSystemAssignment_2_1() { return cSubSystemAssignment_2_1; }
		
		//[DSLManaged]
		public CrossReference getSubSystemDSLManagedCrossReference_2_1_0() { return cSubSystemDSLManagedCrossReference_2_1_0; }
		
		//ID
		public RuleCall getSubSystemDSLManagedIDTerminalRuleCall_2_1_0_1() { return cSubSystemDSLManagedIDTerminalRuleCall_2_1_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class DSLControlLoopManagerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLControlLoopManager");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cControlLoopManagerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cTypeOfKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cDSLTypeCLMParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cInKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cManagingAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cManagingDSLManagingCrossReference_4_1_0 = (CrossReference)cManagingAssignment_4_1.eContents().get(0);
		private final RuleCall cManagingDSLManagingIDTerminalRuleCall_4_1_0_1 = (RuleCall)cManagingDSLManagingCrossReference_4_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//DSLControlLoopManager:
		//	'ControlLoopManager' name=ID 'typeOf' DSLTypeCLM ('in' managing=[DSLManaging])? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'ControlLoopManager' name=ID 'typeOf' DSLTypeCLM ('in' managing=[DSLManaging])? ';'
		public Group getGroup() { return cGroup; }
		
		//'ControlLoopManager'
		public Keyword getControlLoopManagerKeyword_0() { return cControlLoopManagerKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'typeOf'
		public Keyword getTypeOfKeyword_2() { return cTypeOfKeyword_2; }
		
		//DSLTypeCLM
		public RuleCall getDSLTypeCLMParserRuleCall_3() { return cDSLTypeCLMParserRuleCall_3; }
		
		//('in' managing=[DSLManaging])?
		public Group getGroup_4() { return cGroup_4; }
		
		//'in'
		public Keyword getInKeyword_4_0() { return cInKeyword_4_0; }
		
		//managing=[DSLManaging]
		public Assignment getManagingAssignment_4_1() { return cManagingAssignment_4_1; }
		
		//[DSLManaging]
		public CrossReference getManagingDSLManagingCrossReference_4_1_0() { return cManagingDSLManagingCrossReference_4_1_0; }
		
		//ID
		public RuleCall getManagingDSLManagingIDTerminalRuleCall_4_1_0_1() { return cManagingDSLManagingIDTerminalRuleCall_4_1_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class DSLTypeCLMElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLTypeCLM");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSynchronizedKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cCoordinatedKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cIndependentKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//DSLTypeCLM:
		//	'Synchronized' | 'Coordinated' | 'Independent';
		@Override public ParserRule getRule() { return rule; }
		
		//'Synchronized' | 'Coordinated' | 'Independent'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Synchronized'
		public Keyword getSynchronizedKeyword_0() { return cSynchronizedKeyword_0; }
		
		//'Coordinated'
		public Keyword getCoordinatedKeyword_1() { return cCoordinatedKeyword_1; }
		
		//'Independent'
		public Keyword getIndependentKeyword_2() { return cIndependentKeyword_2; }
	}
	public class DSLControlLoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLControlLoop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cControlLoopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cInKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSubSystemAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cSubSystemDSLContainrerForCLCrossReference_2_1_0 = (CrossReference)cSubSystemAssignment_2_1.eContents().get(0);
		private final RuleCall cSubSystemDSLContainrerForCLIDTerminalRuleCall_2_1_0_1 = (RuleCall)cSubSystemDSLContainrerForCLCrossReference_2_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DSLControlLoop:
		//	'ControlLoop' name=ID ('in' subSystem=[DSLContainrerForCL])? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'ControlLoop' name=ID ('in' subSystem=[DSLContainrerForCL])? ';'
		public Group getGroup() { return cGroup; }
		
		//'ControlLoop'
		public Keyword getControlLoopKeyword_0() { return cControlLoopKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('in' subSystem=[DSLContainrerForCL])?
		public Group getGroup_2() { return cGroup_2; }
		
		//'in'
		public Keyword getInKeyword_2_0() { return cInKeyword_2_0; }
		
		//subSystem=[DSLContainrerForCL]
		public Assignment getSubSystemAssignment_2_1() { return cSubSystemAssignment_2_1; }
		
		//[DSLContainrerForCL]
		public CrossReference getSubSystemDSLContainrerForCLCrossReference_2_1_0() { return cSubSystemDSLContainrerForCLCrossReference_2_1_0; }
		
		//ID
		public RuleCall getSubSystemDSLContainrerForCLIDTerminalRuleCall_2_1_0_1() { return cSubSystemDSLContainrerForCLIDTerminalRuleCall_2_1_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class DSLContainrerForCLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLContainrerForCL");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDSLControlLoopManagerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDSLManagingParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DSLContainrerForCL:
		//	DSLControlLoopManager | DSLManaging;
		@Override public ParserRule getRule() { return rule; }
		
		//DSLControlLoopManager | DSLManaging
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DSLControlLoopManager
		public RuleCall getDSLControlLoopManagerParserRuleCall_0() { return cDSLControlLoopManagerParserRuleCall_0; }
		
		//DSLManaging
		public RuleCall getDSLManagingParserRuleCall_1() { return cDSLManagingParserRuleCall_1; }
	}
	public class DSLContainerForMAPEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLContainerForMAPE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDSLManagingParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDSLControlLoopParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DSLContainerForMAPE:
		//	DSLManaging | DSLControlLoop;
		@Override public ParserRule getRule() { return rule; }
		
		//DSLManaging | DSLControlLoop
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DSLManaging
		public RuleCall getDSLManagingParserRuleCall_0() { return cDSLManagingParserRuleCall_0; }
		
		//DSLControlLoop
		public RuleCall getDSLControlLoopParserRuleCall_1() { return cDSLControlLoopParserRuleCall_1; }
	}
	public class DSLMonitorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLMonitor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMonitorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cInKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSubSystemAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cSubSystemDSLContainerForMAPECrossReference_2_1_0 = (CrossReference)cSubSystemAssignment_2_1.eContents().get(0);
		private final RuleCall cSubSystemDSLContainerForMAPEIDTerminalRuleCall_2_1_0_1 = (RuleCall)cSubSystemDSLContainerForMAPECrossReference_2_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DSLMonitor:
		//	'Monitor' name=ID ('in' subSystem=[DSLContainerForMAPE])? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'Monitor' name=ID ('in' subSystem=[DSLContainerForMAPE])? ';'
		public Group getGroup() { return cGroup; }
		
		//'Monitor'
		public Keyword getMonitorKeyword_0() { return cMonitorKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('in' subSystem=[DSLContainerForMAPE])?
		public Group getGroup_2() { return cGroup_2; }
		
		//'in'
		public Keyword getInKeyword_2_0() { return cInKeyword_2_0; }
		
		//subSystem=[DSLContainerForMAPE]
		public Assignment getSubSystemAssignment_2_1() { return cSubSystemAssignment_2_1; }
		
		//[DSLContainerForMAPE]
		public CrossReference getSubSystemDSLContainerForMAPECrossReference_2_1_0() { return cSubSystemDSLContainerForMAPECrossReference_2_1_0; }
		
		//ID
		public RuleCall getSubSystemDSLContainerForMAPEIDTerminalRuleCall_2_1_0_1() { return cSubSystemDSLContainerForMAPEIDTerminalRuleCall_2_1_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class DSLAnalyzerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLAnalyzer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAnalyzerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cInKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSubSystemAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cSubSystemDSLContainerForMAPECrossReference_2_1_0 = (CrossReference)cSubSystemAssignment_2_1.eContents().get(0);
		private final RuleCall cSubSystemDSLContainerForMAPEIDTerminalRuleCall_2_1_0_1 = (RuleCall)cSubSystemDSLContainerForMAPECrossReference_2_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DSLAnalyzer:
		//	'Analyzer' name=ID ('in' subSystem=[DSLContainerForMAPE])? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'Analyzer' name=ID ('in' subSystem=[DSLContainerForMAPE])? ';'
		public Group getGroup() { return cGroup; }
		
		//'Analyzer'
		public Keyword getAnalyzerKeyword_0() { return cAnalyzerKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('in' subSystem=[DSLContainerForMAPE])?
		public Group getGroup_2() { return cGroup_2; }
		
		//'in'
		public Keyword getInKeyword_2_0() { return cInKeyword_2_0; }
		
		//subSystem=[DSLContainerForMAPE]
		public Assignment getSubSystemAssignment_2_1() { return cSubSystemAssignment_2_1; }
		
		//[DSLContainerForMAPE]
		public CrossReference getSubSystemDSLContainerForMAPECrossReference_2_1_0() { return cSubSystemDSLContainerForMAPECrossReference_2_1_0; }
		
		//ID
		public RuleCall getSubSystemDSLContainerForMAPEIDTerminalRuleCall_2_1_0_1() { return cSubSystemDSLContainerForMAPEIDTerminalRuleCall_2_1_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class DSLPlannerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLPlanner");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPlannerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cInKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSubSystemAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cSubSystemDSLContainerForMAPECrossReference_2_1_0 = (CrossReference)cSubSystemAssignment_2_1.eContents().get(0);
		private final RuleCall cSubSystemDSLContainerForMAPEIDTerminalRuleCall_2_1_0_1 = (RuleCall)cSubSystemDSLContainerForMAPECrossReference_2_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DSLPlanner:
		//	'Planner' name=ID ('in' subSystem=[DSLContainerForMAPE])? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'Planner' name=ID ('in' subSystem=[DSLContainerForMAPE])? ';'
		public Group getGroup() { return cGroup; }
		
		//'Planner'
		public Keyword getPlannerKeyword_0() { return cPlannerKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('in' subSystem=[DSLContainerForMAPE])?
		public Group getGroup_2() { return cGroup_2; }
		
		//'in'
		public Keyword getInKeyword_2_0() { return cInKeyword_2_0; }
		
		//subSystem=[DSLContainerForMAPE]
		public Assignment getSubSystemAssignment_2_1() { return cSubSystemAssignment_2_1; }
		
		//[DSLContainerForMAPE]
		public CrossReference getSubSystemDSLContainerForMAPECrossReference_2_1_0() { return cSubSystemDSLContainerForMAPECrossReference_2_1_0; }
		
		//ID
		public RuleCall getSubSystemDSLContainerForMAPEIDTerminalRuleCall_2_1_0_1() { return cSubSystemDSLContainerForMAPEIDTerminalRuleCall_2_1_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class DSLExecutorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLExecutor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExecutorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cInKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSubSystemAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cSubSystemDSLContainerForMAPECrossReference_2_1_0 = (CrossReference)cSubSystemAssignment_2_1.eContents().get(0);
		private final RuleCall cSubSystemDSLContainerForMAPEIDTerminalRuleCall_2_1_0_1 = (RuleCall)cSubSystemDSLContainerForMAPECrossReference_2_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DSLExecutor:
		//	'Executor' name=ID ('in' subSystem=[DSLContainerForMAPE])? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'Executor' name=ID ('in' subSystem=[DSLContainerForMAPE])? ';'
		public Group getGroup() { return cGroup; }
		
		//'Executor'
		public Keyword getExecutorKeyword_0() { return cExecutorKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('in' subSystem=[DSLContainerForMAPE])?
		public Group getGroup_2() { return cGroup_2; }
		
		//'in'
		public Keyword getInKeyword_2_0() { return cInKeyword_2_0; }
		
		//subSystem=[DSLContainerForMAPE]
		public Assignment getSubSystemAssignment_2_1() { return cSubSystemAssignment_2_1; }
		
		//[DSLContainerForMAPE]
		public CrossReference getSubSystemDSLContainerForMAPECrossReference_2_1_0() { return cSubSystemDSLContainerForMAPECrossReference_2_1_0; }
		
		//ID
		public RuleCall getSubSystemDSLContainerForMAPEIDTerminalRuleCall_2_1_0_1() { return cSubSystemDSLContainerForMAPEIDTerminalRuleCall_2_1_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class DSLKnowledgeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLKnowledge");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cKnowledgeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cInKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSubSystemAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cSubSystemDSLContainerForMAPECrossReference_2_1_0 = (CrossReference)cSubSystemAssignment_2_1.eContents().get(0);
		private final RuleCall cSubSystemDSLContainerForMAPEIDTerminalRuleCall_2_1_0_1 = (RuleCall)cSubSystemDSLContainerForMAPECrossReference_2_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DSLKnowledge:
		//	'Knowledge' name=ID ('in' subSystem=[DSLContainerForMAPE])? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'Knowledge' name=ID ('in' subSystem=[DSLContainerForMAPE])? ';'
		public Group getGroup() { return cGroup; }
		
		//'Knowledge'
		public Keyword getKnowledgeKeyword_0() { return cKnowledgeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('in' subSystem=[DSLContainerForMAPE])?
		public Group getGroup_2() { return cGroup_2; }
		
		//'in'
		public Keyword getInKeyword_2_0() { return cInKeyword_2_0; }
		
		//subSystem=[DSLContainerForMAPE]
		public Assignment getSubSystemAssignment_2_1() { return cSubSystemAssignment_2_1; }
		
		//[DSLContainerForMAPE]
		public CrossReference getSubSystemDSLContainerForMAPECrossReference_2_1_0() { return cSubSystemDSLContainerForMAPECrossReference_2_1_0; }
		
		//ID
		public RuleCall getSubSystemDSLContainerForMAPEIDTerminalRuleCall_2_1_0_1() { return cSubSystemDSLContainerForMAPEIDTerminalRuleCall_2_1_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class DSLSensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLSensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSensorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cInKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cMonitorAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cMonitorDSLMonitorCrossReference_2_1_0 = (CrossReference)cMonitorAssignment_2_1.eContents().get(0);
		private final RuleCall cMonitorDSLMonitorIDTerminalRuleCall_2_1_0_1 = (RuleCall)cMonitorDSLMonitorCrossReference_2_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DSLSensor:
		//	'Sensor' name=ID ('in' monitor=[DSLMonitor])? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'Sensor' name=ID ('in' monitor=[DSLMonitor])? ';'
		public Group getGroup() { return cGroup; }
		
		//'Sensor'
		public Keyword getSensorKeyword_0() { return cSensorKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('in' monitor=[DSLMonitor])?
		public Group getGroup_2() { return cGroup_2; }
		
		//'in'
		public Keyword getInKeyword_2_0() { return cInKeyword_2_0; }
		
		//monitor=[DSLMonitor]
		public Assignment getMonitorAssignment_2_1() { return cMonitorAssignment_2_1; }
		
		//[DSLMonitor]
		public CrossReference getMonitorDSLMonitorCrossReference_2_1_0() { return cMonitorDSLMonitorCrossReference_2_1_0; }
		
		//ID
		public RuleCall getMonitorDSLMonitorIDTerminalRuleCall_2_1_0_1() { return cMonitorDSLMonitorIDTerminalRuleCall_2_1_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class DSLEffectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLEffector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEffectorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cInKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExecutorAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cExecutorDSLExecutorCrossReference_2_1_0 = (CrossReference)cExecutorAssignment_2_1.eContents().get(0);
		private final RuleCall cExecutorDSLExecutorIDTerminalRuleCall_2_1_0_1 = (RuleCall)cExecutorDSLExecutorCrossReference_2_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DSLEffector:
		//	'Effector' name=ID ('in' executor=[DSLExecutor])? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'Effector' name=ID ('in' executor=[DSLExecutor])? ';'
		public Group getGroup() { return cGroup; }
		
		//'Effector'
		public Keyword getEffectorKeyword_0() { return cEffectorKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('in' executor=[DSLExecutor])?
		public Group getGroup_2() { return cGroup_2; }
		
		//'in'
		public Keyword getInKeyword_2_0() { return cInKeyword_2_0; }
		
		//executor=[DSLExecutor]
		public Assignment getExecutorAssignment_2_1() { return cExecutorAssignment_2_1; }
		
		//[DSLExecutor]
		public CrossReference getExecutorDSLExecutorCrossReference_2_1_0() { return cExecutorDSLExecutorCrossReference_2_1_0; }
		
		//ID
		public RuleCall getExecutorDSLExecutorIDTerminalRuleCall_2_1_0_1() { return cExecutorDSLExecutorIDTerminalRuleCall_2_1_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class DSLProbeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLProbe");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProbeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cInKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cManagedAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cManagedDSLManagedCrossReference_2_1_0 = (CrossReference)cManagedAssignment_2_1.eContents().get(0);
		private final RuleCall cManagedDSLManagedIDTerminalRuleCall_2_1_0_1 = (RuleCall)cManagedDSLManagedCrossReference_2_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DSLProbe:
		//	'Probe' name=ID ('in' managed=[DSLManaged])? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'Probe' name=ID ('in' managed=[DSLManaged])? ';'
		public Group getGroup() { return cGroup; }
		
		//'Probe'
		public Keyword getProbeKeyword_0() { return cProbeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('in' managed=[DSLManaged])?
		public Group getGroup_2() { return cGroup_2; }
		
		//'in'
		public Keyword getInKeyword_2_0() { return cInKeyword_2_0; }
		
		//managed=[DSLManaged]
		public Assignment getManagedAssignment_2_1() { return cManagedAssignment_2_1; }
		
		//[DSLManaged]
		public CrossReference getManagedDSLManagedCrossReference_2_1_0() { return cManagedDSLManagedCrossReference_2_1_0; }
		
		//ID
		public RuleCall getManagedDSLManagedIDTerminalRuleCall_2_1_0_1() { return cManagedDSLManagedIDTerminalRuleCall_2_1_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class DSLGaugeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLGauge");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGaugeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cInKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cManagedAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cManagedDSLManagedCrossReference_2_1_0 = (CrossReference)cManagedAssignment_2_1.eContents().get(0);
		private final RuleCall cManagedDSLManagedIDTerminalRuleCall_2_1_0_1 = (RuleCall)cManagedDSLManagedCrossReference_2_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DSLGauge:
		//	'Gauge' name=ID ('in' managed=[DSLManaged])? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'Gauge' name=ID ('in' managed=[DSLManaged])? ';'
		public Group getGroup() { return cGroup; }
		
		//'Gauge'
		public Keyword getGaugeKeyword_0() { return cGaugeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('in' managed=[DSLManaged])?
		public Group getGroup_2() { return cGroup_2; }
		
		//'in'
		public Keyword getInKeyword_2_0() { return cInKeyword_2_0; }
		
		//managed=[DSLManaged]
		public Assignment getManagedAssignment_2_1() { return cManagedAssignment_2_1; }
		
		//[DSLManaged]
		public CrossReference getManagedDSLManagedCrossReference_2_1_0() { return cManagedDSLManagedCrossReference_2_1_0; }
		
		//ID
		public RuleCall getManagedDSLManagedIDTerminalRuleCall_2_1_0_1() { return cManagedDSLManagedIDTerminalRuleCall_2_1_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class DSLReferenceInputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLReferenceInput");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReferenceInputKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cInKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cKwnoledgeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cKwnoledgeDSLKnowledgeCrossReference_2_1_0 = (CrossReference)cKwnoledgeAssignment_2_1.eContents().get(0);
		private final RuleCall cKwnoledgeDSLKnowledgeIDTerminalRuleCall_2_1_0_1 = (RuleCall)cKwnoledgeDSLKnowledgeCrossReference_2_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DSLReferenceInput:
		//	'ReferenceInput' name=ID ('in' kwnoledge=[DSLKnowledge])? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'ReferenceInput' name=ID ('in' kwnoledge=[DSLKnowledge])? ';'
		public Group getGroup() { return cGroup; }
		
		//'ReferenceInput'
		public Keyword getReferenceInputKeyword_0() { return cReferenceInputKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('in' kwnoledge=[DSLKnowledge])?
		public Group getGroup_2() { return cGroup_2; }
		
		//'in'
		public Keyword getInKeyword_2_0() { return cInKeyword_2_0; }
		
		//kwnoledge=[DSLKnowledge]
		public Assignment getKwnoledgeAssignment_2_1() { return cKwnoledgeAssignment_2_1; }
		
		//[DSLKnowledge]
		public CrossReference getKwnoledgeDSLKnowledgeCrossReference_2_1_0() { return cKwnoledgeDSLKnowledgeCrossReference_2_1_0; }
		
		//ID
		public RuleCall getKwnoledgeDSLKnowledgeIDTerminalRuleCall_2_1_0_1() { return cKwnoledgeDSLKnowledgeIDTerminalRuleCall_2_1_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class DSLMeasuredOutputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLMeasuredOutput");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMeasuredOutputKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cInKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cManagedAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cManagedDSLManagedCrossReference_2_1_0 = (CrossReference)cManagedAssignment_2_1.eContents().get(0);
		private final RuleCall cManagedDSLManagedIDTerminalRuleCall_2_1_0_1 = (RuleCall)cManagedDSLManagedCrossReference_2_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DSLMeasuredOutput:
		//	'MeasuredOutput' name=ID ('in' managed=[DSLManaged])? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'MeasuredOutput' name=ID ('in' managed=[DSLManaged])? ';'
		public Group getGroup() { return cGroup; }
		
		//'MeasuredOutput'
		public Keyword getMeasuredOutputKeyword_0() { return cMeasuredOutputKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('in' managed=[DSLManaged])?
		public Group getGroup_2() { return cGroup_2; }
		
		//'in'
		public Keyword getInKeyword_2_0() { return cInKeyword_2_0; }
		
		//managed=[DSLManaged]
		public Assignment getManagedAssignment_2_1() { return cManagedAssignment_2_1; }
		
		//[DSLManaged]
		public CrossReference getManagedDSLManagedCrossReference_2_1_0() { return cManagedDSLManagedCrossReference_2_1_0; }
		
		//ID
		public RuleCall getManagedDSLManagedIDTerminalRuleCall_2_1_0_1() { return cManagedDSLManagedIDTerminalRuleCall_2_1_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class DSLRestrictionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.DSLRestrictions");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cOnlyAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cOnlyOnlyParserRuleCall_0_0_0 = (RuleCall)cOnlyAssignment_0_0.eContents().get(0);
		private final Assignment cTAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cTDSLAbstractionsCrossReference_0_1_0 = (CrossReference)cTAssignment_0_1.eContents().get(0);
		private final RuleCall cTDSLAbstractionsIDTerminalRuleCall_0_1_0_1 = (RuleCall)cTDSLAbstractionsCrossReference_0_1_0.eContents().get(1);
		private final Assignment cCanAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cCanCanParserRuleCall_0_2_0 = (RuleCall)cCanAssignment_0_2.eContents().get(0);
		private final Assignment cElementTypeAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cElementTypeElementTypeParserRuleCall_0_3_0 = (RuleCall)cElementTypeAssignment_0_3.eContents().get(0);
		private final Assignment cTypeAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final CrossReference cTypeDSLAbstractionsCrossReference_0_4_0 = (CrossReference)cTypeAssignment_0_4.eContents().get(0);
		private final RuleCall cTypeDSLAbstractionsIDTerminalRuleCall_0_4_0_1 = (RuleCall)cTypeDSLAbstractionsCrossReference_0_4_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cTAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final CrossReference cTDSLAbstractionsCrossReference_1_0_0 = (CrossReference)cTAssignment_1_0.eContents().get(0);
		private final RuleCall cTDSLAbstractionsIDTerminalRuleCall_1_0_0_1 = (RuleCall)cTDSLAbstractionsCrossReference_1_0_0.eContents().get(1);
		private final Assignment cCannotAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cCannotCannotParserRuleCall_1_1_0 = (RuleCall)cCannotAssignment_1_1.eContents().get(0);
		private final Assignment cElementTypeAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cElementTypeElementTypeParserRuleCall_1_2_0 = (RuleCall)cElementTypeAssignment_1_2.eContents().get(0);
		private final Assignment cTypeAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final CrossReference cTypeDSLAbstractionsCrossReference_1_3_0 = (CrossReference)cTypeAssignment_1_3.eContents().get(0);
		private final RuleCall cTypeDSLAbstractionsIDTerminalRuleCall_1_3_0_1 = (RuleCall)cTypeDSLAbstractionsCrossReference_1_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cTAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final CrossReference cTDSLAbstractionsCrossReference_2_0_0 = (CrossReference)cTAssignment_2_0.eContents().get(0);
		private final RuleCall cTDSLAbstractionsIDTerminalRuleCall_2_0_0_1 = (RuleCall)cTDSLAbstractionsCrossReference_2_0_0.eContents().get(1);
		private final Assignment cCanAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cCanCanParserRuleCall_2_1_0 = (RuleCall)cCanAssignment_2_1.eContents().get(0);
		private final Assignment cElementTypeAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cElementTypeElementTypeParserRuleCall_2_2_0 = (RuleCall)cElementTypeAssignment_2_2.eContents().get(0);
		private final Assignment cTypeAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final CrossReference cTypeDSLAbstractionsCrossReference_2_3_0 = (CrossReference)cTypeAssignment_2_3.eContents().get(0);
		private final RuleCall cTypeDSLAbstractionsIDTerminalRuleCall_2_3_0_1 = (RuleCall)cTypeDSLAbstractionsCrossReference_2_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cTAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final CrossReference cTDSLAbstractionsCrossReference_3_0_0 = (CrossReference)cTAssignment_3_0.eContents().get(0);
		private final RuleCall cTDSLAbstractionsIDTerminalRuleCall_3_0_0_1 = (RuleCall)cTDSLAbstractionsCrossReference_3_0_0.eContents().get(1);
		private final Assignment cCanAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cCanCanParserRuleCall_3_1_0 = (RuleCall)cCanAssignment_3_1.eContents().get(0);
		private final Assignment cElementTypeAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cElementTypeElementTypeParserRuleCall_3_2_0 = (RuleCall)cElementTypeAssignment_3_2.eContents().get(0);
		private final Assignment cOnly2Assignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cOnly2Only2ParserRuleCall_3_3_0 = (RuleCall)cOnly2Assignment_3_3.eContents().get(0);
		private final Assignment cTypeAssignment_3_4 = (Assignment)cGroup_3.eContents().get(4);
		private final CrossReference cTypeDSLAbstractionsCrossReference_3_4_0 = (CrossReference)cTypeAssignment_3_4.eContents().get(0);
		private final RuleCall cTypeDSLAbstractionsIDTerminalRuleCall_3_4_0_1 = (RuleCall)cTypeDSLAbstractionsCrossReference_3_4_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3_5 = (Keyword)cGroup_3.eContents().get(5);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cTAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final CrossReference cTDSLAbstractionsCrossReference_4_0_0 = (CrossReference)cTAssignment_4_0.eContents().get(0);
		private final RuleCall cTDSLAbstractionsIDTerminalRuleCall_4_0_0_1 = (RuleCall)cTDSLAbstractionsCrossReference_4_0_0.eContents().get(1);
		private final Assignment cMustAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cMustMustParserRuleCall_4_1_0 = (RuleCall)cMustAssignment_4_1.eContents().get(0);
		private final Assignment cEntityTypeAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cEntityTypeEntityTypeParserRuleCall_4_2_0 = (RuleCall)cEntityTypeAssignment_4_2.eContents().get(0);
		private final Assignment cTypeAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final CrossReference cTypeDSLAbstractionsCrossReference_4_3_0 = (CrossReference)cTypeAssignment_4_3.eContents().get(0);
		private final RuleCall cTypeDSLAbstractionsIDTerminalRuleCall_4_3_0_1 = (RuleCall)cTypeDSLAbstractionsCrossReference_4_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		
		//DSLRestrictions:
		//	only=Only t=[DSLAbstractions] can=Can elementType=ElementType type=[DSLAbstractions] ';' | t=[DSLAbstractions]
		//	cannot=Cannot elementType=ElementType type=[DSLAbstractions] ';' | t=[DSLAbstractions] can=Can elementType=ElementType
		//	type=[DSLAbstractions] ';' | t=[DSLAbstractions] can=Can elementType=ElementType only2=Only2 type=[DSLAbstractions]
		//	';' | t=[DSLAbstractions] must=Must entityType=EntityType type=[DSLAbstractions] ';';
		@Override public ParserRule getRule() { return rule; }
		
		//only=Only t=[DSLAbstractions] can=Can elementType=ElementType type=[DSLAbstractions] ';' | t=[DSLAbstractions]
		//cannot=Cannot elementType=ElementType type=[DSLAbstractions] ';' | t=[DSLAbstractions] can=Can elementType=ElementType
		//type=[DSLAbstractions] ';' | t=[DSLAbstractions] can=Can elementType=ElementType only2=Only2 type=[DSLAbstractions] ';'
		//| t=[DSLAbstractions] must=Must entityType=EntityType type=[DSLAbstractions] ';'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//only=Only t=[DSLAbstractions] can=Can elementType=ElementType type=[DSLAbstractions] ';'
		public Group getGroup_0() { return cGroup_0; }
		
		//only=Only
		public Assignment getOnlyAssignment_0_0() { return cOnlyAssignment_0_0; }
		
		//Only
		public RuleCall getOnlyOnlyParserRuleCall_0_0_0() { return cOnlyOnlyParserRuleCall_0_0_0; }
		
		//t=[DSLAbstractions]
		public Assignment getTAssignment_0_1() { return cTAssignment_0_1; }
		
		//[DSLAbstractions]
		public CrossReference getTDSLAbstractionsCrossReference_0_1_0() { return cTDSLAbstractionsCrossReference_0_1_0; }
		
		//ID
		public RuleCall getTDSLAbstractionsIDTerminalRuleCall_0_1_0_1() { return cTDSLAbstractionsIDTerminalRuleCall_0_1_0_1; }
		
		//can=Can
		public Assignment getCanAssignment_0_2() { return cCanAssignment_0_2; }
		
		//Can
		public RuleCall getCanCanParserRuleCall_0_2_0() { return cCanCanParserRuleCall_0_2_0; }
		
		//elementType=ElementType
		public Assignment getElementTypeAssignment_0_3() { return cElementTypeAssignment_0_3; }
		
		//ElementType
		public RuleCall getElementTypeElementTypeParserRuleCall_0_3_0() { return cElementTypeElementTypeParserRuleCall_0_3_0; }
		
		//type=[DSLAbstractions]
		public Assignment getTypeAssignment_0_4() { return cTypeAssignment_0_4; }
		
		//[DSLAbstractions]
		public CrossReference getTypeDSLAbstractionsCrossReference_0_4_0() { return cTypeDSLAbstractionsCrossReference_0_4_0; }
		
		//ID
		public RuleCall getTypeDSLAbstractionsIDTerminalRuleCall_0_4_0_1() { return cTypeDSLAbstractionsIDTerminalRuleCall_0_4_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_0_5() { return cSemicolonKeyword_0_5; }
		
		//t=[DSLAbstractions] cannot=Cannot elementType=ElementType type=[DSLAbstractions] ';'
		public Group getGroup_1() { return cGroup_1; }
		
		//t=[DSLAbstractions]
		public Assignment getTAssignment_1_0() { return cTAssignment_1_0; }
		
		//[DSLAbstractions]
		public CrossReference getTDSLAbstractionsCrossReference_1_0_0() { return cTDSLAbstractionsCrossReference_1_0_0; }
		
		//ID
		public RuleCall getTDSLAbstractionsIDTerminalRuleCall_1_0_0_1() { return cTDSLAbstractionsIDTerminalRuleCall_1_0_0_1; }
		
		//cannot=Cannot
		public Assignment getCannotAssignment_1_1() { return cCannotAssignment_1_1; }
		
		//Cannot
		public RuleCall getCannotCannotParserRuleCall_1_1_0() { return cCannotCannotParserRuleCall_1_1_0; }
		
		//elementType=ElementType
		public Assignment getElementTypeAssignment_1_2() { return cElementTypeAssignment_1_2; }
		
		//ElementType
		public RuleCall getElementTypeElementTypeParserRuleCall_1_2_0() { return cElementTypeElementTypeParserRuleCall_1_2_0; }
		
		//type=[DSLAbstractions]
		public Assignment getTypeAssignment_1_3() { return cTypeAssignment_1_3; }
		
		//[DSLAbstractions]
		public CrossReference getTypeDSLAbstractionsCrossReference_1_3_0() { return cTypeDSLAbstractionsCrossReference_1_3_0; }
		
		//ID
		public RuleCall getTypeDSLAbstractionsIDTerminalRuleCall_1_3_0_1() { return cTypeDSLAbstractionsIDTerminalRuleCall_1_3_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_1_4() { return cSemicolonKeyword_1_4; }
		
		//t=[DSLAbstractions] can=Can elementType=ElementType type=[DSLAbstractions] ';'
		public Group getGroup_2() { return cGroup_2; }
		
		//t=[DSLAbstractions]
		public Assignment getTAssignment_2_0() { return cTAssignment_2_0; }
		
		//[DSLAbstractions]
		public CrossReference getTDSLAbstractionsCrossReference_2_0_0() { return cTDSLAbstractionsCrossReference_2_0_0; }
		
		//ID
		public RuleCall getTDSLAbstractionsIDTerminalRuleCall_2_0_0_1() { return cTDSLAbstractionsIDTerminalRuleCall_2_0_0_1; }
		
		//can=Can
		public Assignment getCanAssignment_2_1() { return cCanAssignment_2_1; }
		
		//Can
		public RuleCall getCanCanParserRuleCall_2_1_0() { return cCanCanParserRuleCall_2_1_0; }
		
		//elementType=ElementType
		public Assignment getElementTypeAssignment_2_2() { return cElementTypeAssignment_2_2; }
		
		//ElementType
		public RuleCall getElementTypeElementTypeParserRuleCall_2_2_0() { return cElementTypeElementTypeParserRuleCall_2_2_0; }
		
		//type=[DSLAbstractions]
		public Assignment getTypeAssignment_2_3() { return cTypeAssignment_2_3; }
		
		//[DSLAbstractions]
		public CrossReference getTypeDSLAbstractionsCrossReference_2_3_0() { return cTypeDSLAbstractionsCrossReference_2_3_0; }
		
		//ID
		public RuleCall getTypeDSLAbstractionsIDTerminalRuleCall_2_3_0_1() { return cTypeDSLAbstractionsIDTerminalRuleCall_2_3_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_2_4() { return cSemicolonKeyword_2_4; }
		
		//t=[DSLAbstractions] can=Can elementType=ElementType only2=Only2 type=[DSLAbstractions] ';'
		public Group getGroup_3() { return cGroup_3; }
		
		//t=[DSLAbstractions]
		public Assignment getTAssignment_3_0() { return cTAssignment_3_0; }
		
		//[DSLAbstractions]
		public CrossReference getTDSLAbstractionsCrossReference_3_0_0() { return cTDSLAbstractionsCrossReference_3_0_0; }
		
		//ID
		public RuleCall getTDSLAbstractionsIDTerminalRuleCall_3_0_0_1() { return cTDSLAbstractionsIDTerminalRuleCall_3_0_0_1; }
		
		//can=Can
		public Assignment getCanAssignment_3_1() { return cCanAssignment_3_1; }
		
		//Can
		public RuleCall getCanCanParserRuleCall_3_1_0() { return cCanCanParserRuleCall_3_1_0; }
		
		//elementType=ElementType
		public Assignment getElementTypeAssignment_3_2() { return cElementTypeAssignment_3_2; }
		
		//ElementType
		public RuleCall getElementTypeElementTypeParserRuleCall_3_2_0() { return cElementTypeElementTypeParserRuleCall_3_2_0; }
		
		//only2=Only2
		public Assignment getOnly2Assignment_3_3() { return cOnly2Assignment_3_3; }
		
		//Only2
		public RuleCall getOnly2Only2ParserRuleCall_3_3_0() { return cOnly2Only2ParserRuleCall_3_3_0; }
		
		//type=[DSLAbstractions]
		public Assignment getTypeAssignment_3_4() { return cTypeAssignment_3_4; }
		
		//[DSLAbstractions]
		public CrossReference getTypeDSLAbstractionsCrossReference_3_4_0() { return cTypeDSLAbstractionsCrossReference_3_4_0; }
		
		//ID
		public RuleCall getTypeDSLAbstractionsIDTerminalRuleCall_3_4_0_1() { return cTypeDSLAbstractionsIDTerminalRuleCall_3_4_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_3_5() { return cSemicolonKeyword_3_5; }
		
		//t=[DSLAbstractions] must=Must entityType=EntityType type=[DSLAbstractions] ';'
		public Group getGroup_4() { return cGroup_4; }
		
		//t=[DSLAbstractions]
		public Assignment getTAssignment_4_0() { return cTAssignment_4_0; }
		
		//[DSLAbstractions]
		public CrossReference getTDSLAbstractionsCrossReference_4_0_0() { return cTDSLAbstractionsCrossReference_4_0_0; }
		
		//ID
		public RuleCall getTDSLAbstractionsIDTerminalRuleCall_4_0_0_1() { return cTDSLAbstractionsIDTerminalRuleCall_4_0_0_1; }
		
		//must=Must
		public Assignment getMustAssignment_4_1() { return cMustAssignment_4_1; }
		
		//Must
		public RuleCall getMustMustParserRuleCall_4_1_0() { return cMustMustParserRuleCall_4_1_0; }
		
		//entityType=EntityType
		public Assignment getEntityTypeAssignment_4_2() { return cEntityTypeAssignment_4_2; }
		
		//EntityType
		public RuleCall getEntityTypeEntityTypeParserRuleCall_4_2_0() { return cEntityTypeEntityTypeParserRuleCall_4_2_0; }
		
		//type=[DSLAbstractions]
		public Assignment getTypeAssignment_4_3() { return cTypeAssignment_4_3; }
		
		//[DSLAbstractions]
		public CrossReference getTypeDSLAbstractionsCrossReference_4_3_0() { return cTypeDSLAbstractionsCrossReference_4_3_0; }
		
		//ID
		public RuleCall getTypeDSLAbstractionsIDTerminalRuleCall_4_3_0_1() { return cTypeDSLAbstractionsIDTerminalRuleCall_4_3_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_4_4() { return cSemicolonKeyword_4_4; }
	}
	public class OnlyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.Only");
		private final Assignment cOnlyAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cOnlyOnlyKeyword_0 = (Keyword)cOnlyAssignment.eContents().get(0);
		
		//Only:
		//	only='only';
		@Override public ParserRule getRule() { return rule; }
		
		//only='only'
		public Assignment getOnlyAssignment() { return cOnlyAssignment; }
		
		//'only'
		public Keyword getOnlyOnlyKeyword_0() { return cOnlyOnlyKeyword_0; }
	}
	public class CanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.Can");
		private final Assignment cCanAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cCanCanKeyword_0 = (Keyword)cCanAssignment.eContents().get(0);
		
		//Can:
		//	can='can-';
		@Override public ParserRule getRule() { return rule; }
		
		//can='can-'
		public Assignment getCanAssignment() { return cCanAssignment; }
		
		//'can-'
		public Keyword getCanCanKeyword_0() { return cCanCanKeyword_0; }
	}
	public class CannotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.Cannot");
		private final Assignment cCannotAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cCannotCannotKeyword_0 = (Keyword)cCannotAssignment.eContents().get(0);
		
		//Cannot:
		//	cannot='cannot-';
		@Override public ParserRule getRule() { return rule; }
		
		//cannot='cannot-'
		public Assignment getCannotAssignment() { return cCannotAssignment; }
		
		//'cannot-'
		public Keyword getCannotCannotKeyword_0() { return cCannotCannotKeyword_0; }
	}
	public class Only2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.Only2");
		private final Assignment cOnly2Assignment = (Assignment)rule.eContents().get(1);
		private final Keyword cOnly2OnlyKeyword_0 = (Keyword)cOnly2Assignment.eContents().get(0);
		
		//Only2:
		//	only2='-only';
		@Override public ParserRule getRule() { return rule; }
		
		//only2='-only'
		public Assignment getOnly2Assignment() { return cOnly2Assignment; }
		
		//'-only'
		public Keyword getOnly2OnlyKeyword_0() { return cOnly2OnlyKeyword_0; }
	}
	public class MustElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.Must");
		private final Assignment cMustAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cMustMustKeyword_0 = (Keyword)cMustAssignment.eContents().get(0);
		
		//Must:
		//	must='must-';
		@Override public ParserRule getRule() { return rule; }
		
		//must='must-'
		public Assignment getMustAssignment() { return cMustAssignment; }
		
		//'must-'
		public Keyword getMustMustKeyword_0() { return cMustMustKeyword_0; }
	}
	public class ElementTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.ElementType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBasicTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEntityTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ElementType:
		//	BasicType | EntityType;
		@Override public ParserRule getRule() { return rule; }
		
		//BasicType | EntityType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BasicType
		public RuleCall getBasicTypeParserRuleCall_0() { return cBasicTypeParserRuleCall_0; }
		
		//EntityType
		public RuleCall getEntityTypeParserRuleCall_1() { return cEntityTypeParserRuleCall_1; }
	}
	public class BasicTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.BasicType");
		private final Assignment cTypeNameAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cTypeNameAlternatives_0 = (Alternatives)cTypeNameAssignment.eContents().get(0);
		private final Keyword cTypeNameAccessKeyword_0_0 = (Keyword)cTypeNameAlternatives_0.eContents().get(0);
		private final Keyword cTypeNameDeclareKeyword_0_1 = (Keyword)cTypeNameAlternatives_0.eContents().get(1);
		private final Keyword cTypeNameHandleKeyword_0_2 = (Keyword)cTypeNameAlternatives_0.eContents().get(2);
		private final Keyword cTypeNameCreateKeyword_0_3 = (Keyword)cTypeNameAlternatives_0.eContents().get(3);
		private final Keyword cTypeNameDependKeyword_0_4 = (Keyword)cTypeNameAlternatives_0.eContents().get(4);
		
		//BasicType:
		//	typeName=('access' | 'declare' | 'handle' | 'create' | 'depend');
		@Override public ParserRule getRule() { return rule; }
		
		//typeName=('access' | 'declare' | 'handle' | 'create' | 'depend')
		public Assignment getTypeNameAssignment() { return cTypeNameAssignment; }
		
		//('access' | 'declare' | 'handle' | 'create' | 'depend')
		public Alternatives getTypeNameAlternatives_0() { return cTypeNameAlternatives_0; }
		
		//'access'
		public Keyword getTypeNameAccessKeyword_0_0() { return cTypeNameAccessKeyword_0_0; }
		
		//'declare'
		public Keyword getTypeNameDeclareKeyword_0_1() { return cTypeNameDeclareKeyword_0_1; }
		
		//'handle'
		public Keyword getTypeNameHandleKeyword_0_2() { return cTypeNameHandleKeyword_0_2; }
		
		//'create'
		public Keyword getTypeNameCreateKeyword_0_3() { return cTypeNameCreateKeyword_0_3; }
		
		//'depend'
		public Keyword getTypeNameDependKeyword_0_4() { return cTypeNameDependKeyword_0_4; }
	}
	public class EntityTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.sas.xtext.sasdsl.SasDsl.EntityType");
		private final Assignment cEntityAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cEntityAlternatives_0 = (Alternatives)cEntityAssignment.eContents().get(0);
		private final Keyword cEntityExtendKeyword_0_0 = (Keyword)cEntityAlternatives_0.eContents().get(0);
		private final Keyword cEntityImplementKeyword_0_1 = (Keyword)cEntityAlternatives_0.eContents().get(1);
		private final Keyword cEntityDeriveKeyword_0_2 = (Keyword)cEntityAlternatives_0.eContents().get(2);
		private final Keyword cEntityThrowKeyword_0_3 = (Keyword)cEntityAlternatives_0.eContents().get(3);
		private final Keyword cEntityUseannotationKeyword_0_4 = (Keyword)cEntityAlternatives_0.eContents().get(4);
		
		//EntityType:
		//	entity=('extend' | 'implement' | 'derive' | 'throw' | 'useannotation');
		@Override public ParserRule getRule() { return rule; }
		
		//entity=('extend' | 'implement' | 'derive' | 'throw' | 'useannotation')
		public Assignment getEntityAssignment() { return cEntityAssignment; }
		
		//('extend' | 'implement' | 'derive' | 'throw' | 'useannotation')
		public Alternatives getEntityAlternatives_0() { return cEntityAlternatives_0; }
		
		//'extend'
		public Keyword getEntityExtendKeyword_0_0() { return cEntityExtendKeyword_0_0; }
		
		//'implement'
		public Keyword getEntityImplementKeyword_0_1() { return cEntityImplementKeyword_0_1; }
		
		//'derive'
		public Keyword getEntityDeriveKeyword_0_2() { return cEntityDeriveKeyword_0_2; }
		
		//'throw'
		public Keyword getEntityThrowKeyword_0_3() { return cEntityThrowKeyword_0_3; }
		
		//'useannotation'
		public Keyword getEntityUseannotationKeyword_0_4() { return cEntityUseannotationKeyword_0_4; }
	}
	
	
	private final ArchitectureDefinitionElements pArchitectureDefinition;
	private final DSLAbstractionsElements pDSLAbstractions;
	private final DSLManagingElements pDSLManaging;
	private final DSLManagedElements pDSLManaged;
	private final DSLControlLoopManagerElements pDSLControlLoopManager;
	private final DSLTypeCLMElements pDSLTypeCLM;
	private final DSLControlLoopElements pDSLControlLoop;
	private final DSLContainrerForCLElements pDSLContainrerForCL;
	private final DSLContainerForMAPEElements pDSLContainerForMAPE;
	private final DSLMonitorElements pDSLMonitor;
	private final DSLAnalyzerElements pDSLAnalyzer;
	private final DSLPlannerElements pDSLPlanner;
	private final DSLExecutorElements pDSLExecutor;
	private final DSLKnowledgeElements pDSLKnowledge;
	private final DSLSensorElements pDSLSensor;
	private final DSLEffectorElements pDSLEffector;
	private final DSLProbeElements pDSLProbe;
	private final DSLGaugeElements pDSLGauge;
	private final DSLReferenceInputElements pDSLReferenceInput;
	private final DSLMeasuredOutputElements pDSLMeasuredOutput;
	private final DSLRestrictionsElements pDSLRestrictions;
	private final OnlyElements pOnly;
	private final CanElements pCan;
	private final CannotElements pCannot;
	private final Only2Elements pOnly2;
	private final MustElements pMust;
	private final ElementTypeElements pElementType;
	private final BasicTypeElements pBasicType;
	private final EntityTypeElements pEntityType;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SasDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pArchitectureDefinition = new ArchitectureDefinitionElements();
		this.pDSLAbstractions = new DSLAbstractionsElements();
		this.pDSLManaging = new DSLManagingElements();
		this.pDSLManaged = new DSLManagedElements();
		this.pDSLControlLoopManager = new DSLControlLoopManagerElements();
		this.pDSLTypeCLM = new DSLTypeCLMElements();
		this.pDSLControlLoop = new DSLControlLoopElements();
		this.pDSLContainrerForCL = new DSLContainrerForCLElements();
		this.pDSLContainerForMAPE = new DSLContainerForMAPEElements();
		this.pDSLMonitor = new DSLMonitorElements();
		this.pDSLAnalyzer = new DSLAnalyzerElements();
		this.pDSLPlanner = new DSLPlannerElements();
		this.pDSLExecutor = new DSLExecutorElements();
		this.pDSLKnowledge = new DSLKnowledgeElements();
		this.pDSLSensor = new DSLSensorElements();
		this.pDSLEffector = new DSLEffectorElements();
		this.pDSLProbe = new DSLProbeElements();
		this.pDSLGauge = new DSLGaugeElements();
		this.pDSLReferenceInput = new DSLReferenceInputElements();
		this.pDSLMeasuredOutput = new DSLMeasuredOutputElements();
		this.pDSLRestrictions = new DSLRestrictionsElements();
		this.pOnly = new OnlyElements();
		this.pCan = new CanElements();
		this.pCannot = new CannotElements();
		this.pOnly2 = new Only2Elements();
		this.pMust = new MustElements();
		this.pElementType = new ElementTypeElements();
		this.pBasicType = new BasicTypeElements();
		this.pEntityType = new EntityTypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("br.ufscar.sas.xtext.sasdsl.SasDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//ArchitectureDefinition:
	//	'Abstractions' ':' abstractions+=DSLAbstractions+
	//	'Restrictions' ':' dslRestrictions+=DSLRestrictions*;
	public ArchitectureDefinitionElements getArchitectureDefinitionAccess() {
		return pArchitectureDefinition;
	}
	
	public ParserRule getArchitectureDefinitionRule() {
		return getArchitectureDefinitionAccess().getRule();
	}
	
	//DSLAbstractions:
	//	DSLManaging | DSLManaged | DSLControlLoopManager | DSLControlLoop | DSLMonitor | DSLAnalyzer | DSLPlanner |
	//	DSLExecutor | DSLKnowledge | DSLSensor | DSLEffector | DSLProbe | DSLGauge | DSLReferenceInput | DSLMeasuredOutput;
	public DSLAbstractionsElements getDSLAbstractionsAccess() {
		return pDSLAbstractions;
	}
	
	public ParserRule getDSLAbstractionsRule() {
		return getDSLAbstractionsAccess().getRule();
	}
	
	//DSLManaging:
	//	'Managing' name=ID ('in' subSystem=[DSLManaging])? ';';
	public DSLManagingElements getDSLManagingAccess() {
		return pDSLManaging;
	}
	
	public ParserRule getDSLManagingRule() {
		return getDSLManagingAccess().getRule();
	}
	
	//DSLManaged:
	//	'Managed' name=ID ('in' subSystem=[DSLManaged])? ';';
	public DSLManagedElements getDSLManagedAccess() {
		return pDSLManaged;
	}
	
	public ParserRule getDSLManagedRule() {
		return getDSLManagedAccess().getRule();
	}
	
	//DSLControlLoopManager:
	//	'ControlLoopManager' name=ID 'typeOf' DSLTypeCLM ('in' managing=[DSLManaging])? ';';
	public DSLControlLoopManagerElements getDSLControlLoopManagerAccess() {
		return pDSLControlLoopManager;
	}
	
	public ParserRule getDSLControlLoopManagerRule() {
		return getDSLControlLoopManagerAccess().getRule();
	}
	
	//DSLTypeCLM:
	//	'Synchronized' | 'Coordinated' | 'Independent';
	public DSLTypeCLMElements getDSLTypeCLMAccess() {
		return pDSLTypeCLM;
	}
	
	public ParserRule getDSLTypeCLMRule() {
		return getDSLTypeCLMAccess().getRule();
	}
	
	//DSLControlLoop:
	//	'ControlLoop' name=ID ('in' subSystem=[DSLContainrerForCL])? ';';
	public DSLControlLoopElements getDSLControlLoopAccess() {
		return pDSLControlLoop;
	}
	
	public ParserRule getDSLControlLoopRule() {
		return getDSLControlLoopAccess().getRule();
	}
	
	//DSLContainrerForCL:
	//	DSLControlLoopManager | DSLManaging;
	public DSLContainrerForCLElements getDSLContainrerForCLAccess() {
		return pDSLContainrerForCL;
	}
	
	public ParserRule getDSLContainrerForCLRule() {
		return getDSLContainrerForCLAccess().getRule();
	}
	
	//DSLContainerForMAPE:
	//	DSLManaging | DSLControlLoop;
	public DSLContainerForMAPEElements getDSLContainerForMAPEAccess() {
		return pDSLContainerForMAPE;
	}
	
	public ParserRule getDSLContainerForMAPERule() {
		return getDSLContainerForMAPEAccess().getRule();
	}
	
	//DSLMonitor:
	//	'Monitor' name=ID ('in' subSystem=[DSLContainerForMAPE])? ';';
	public DSLMonitorElements getDSLMonitorAccess() {
		return pDSLMonitor;
	}
	
	public ParserRule getDSLMonitorRule() {
		return getDSLMonitorAccess().getRule();
	}
	
	//DSLAnalyzer:
	//	'Analyzer' name=ID ('in' subSystem=[DSLContainerForMAPE])? ';';
	public DSLAnalyzerElements getDSLAnalyzerAccess() {
		return pDSLAnalyzer;
	}
	
	public ParserRule getDSLAnalyzerRule() {
		return getDSLAnalyzerAccess().getRule();
	}
	
	//DSLPlanner:
	//	'Planner' name=ID ('in' subSystem=[DSLContainerForMAPE])? ';';
	public DSLPlannerElements getDSLPlannerAccess() {
		return pDSLPlanner;
	}
	
	public ParserRule getDSLPlannerRule() {
		return getDSLPlannerAccess().getRule();
	}
	
	//DSLExecutor:
	//	'Executor' name=ID ('in' subSystem=[DSLContainerForMAPE])? ';';
	public DSLExecutorElements getDSLExecutorAccess() {
		return pDSLExecutor;
	}
	
	public ParserRule getDSLExecutorRule() {
		return getDSLExecutorAccess().getRule();
	}
	
	//DSLKnowledge:
	//	'Knowledge' name=ID ('in' subSystem=[DSLContainerForMAPE])? ';';
	public DSLKnowledgeElements getDSLKnowledgeAccess() {
		return pDSLKnowledge;
	}
	
	public ParserRule getDSLKnowledgeRule() {
		return getDSLKnowledgeAccess().getRule();
	}
	
	//DSLSensor:
	//	'Sensor' name=ID ('in' monitor=[DSLMonitor])? ';';
	public DSLSensorElements getDSLSensorAccess() {
		return pDSLSensor;
	}
	
	public ParserRule getDSLSensorRule() {
		return getDSLSensorAccess().getRule();
	}
	
	//DSLEffector:
	//	'Effector' name=ID ('in' executor=[DSLExecutor])? ';';
	public DSLEffectorElements getDSLEffectorAccess() {
		return pDSLEffector;
	}
	
	public ParserRule getDSLEffectorRule() {
		return getDSLEffectorAccess().getRule();
	}
	
	//DSLProbe:
	//	'Probe' name=ID ('in' managed=[DSLManaged])? ';';
	public DSLProbeElements getDSLProbeAccess() {
		return pDSLProbe;
	}
	
	public ParserRule getDSLProbeRule() {
		return getDSLProbeAccess().getRule();
	}
	
	//DSLGauge:
	//	'Gauge' name=ID ('in' managed=[DSLManaged])? ';';
	public DSLGaugeElements getDSLGaugeAccess() {
		return pDSLGauge;
	}
	
	public ParserRule getDSLGaugeRule() {
		return getDSLGaugeAccess().getRule();
	}
	
	//DSLReferenceInput:
	//	'ReferenceInput' name=ID ('in' kwnoledge=[DSLKnowledge])? ';';
	public DSLReferenceInputElements getDSLReferenceInputAccess() {
		return pDSLReferenceInput;
	}
	
	public ParserRule getDSLReferenceInputRule() {
		return getDSLReferenceInputAccess().getRule();
	}
	
	//DSLMeasuredOutput:
	//	'MeasuredOutput' name=ID ('in' managed=[DSLManaged])? ';';
	public DSLMeasuredOutputElements getDSLMeasuredOutputAccess() {
		return pDSLMeasuredOutput;
	}
	
	public ParserRule getDSLMeasuredOutputRule() {
		return getDSLMeasuredOutputAccess().getRule();
	}
	
	//DSLRestrictions:
	//	only=Only t=[DSLAbstractions] can=Can elementType=ElementType type=[DSLAbstractions] ';' | t=[DSLAbstractions]
	//	cannot=Cannot elementType=ElementType type=[DSLAbstractions] ';' | t=[DSLAbstractions] can=Can elementType=ElementType
	//	type=[DSLAbstractions] ';' | t=[DSLAbstractions] can=Can elementType=ElementType only2=Only2 type=[DSLAbstractions]
	//	';' | t=[DSLAbstractions] must=Must entityType=EntityType type=[DSLAbstractions] ';';
	public DSLRestrictionsElements getDSLRestrictionsAccess() {
		return pDSLRestrictions;
	}
	
	public ParserRule getDSLRestrictionsRule() {
		return getDSLRestrictionsAccess().getRule();
	}
	
	//Only:
	//	only='only';
	public OnlyElements getOnlyAccess() {
		return pOnly;
	}
	
	public ParserRule getOnlyRule() {
		return getOnlyAccess().getRule();
	}
	
	//Can:
	//	can='can-';
	public CanElements getCanAccess() {
		return pCan;
	}
	
	public ParserRule getCanRule() {
		return getCanAccess().getRule();
	}
	
	//Cannot:
	//	cannot='cannot-';
	public CannotElements getCannotAccess() {
		return pCannot;
	}
	
	public ParserRule getCannotRule() {
		return getCannotAccess().getRule();
	}
	
	//Only2:
	//	only2='-only';
	public Only2Elements getOnly2Access() {
		return pOnly2;
	}
	
	public ParserRule getOnly2Rule() {
		return getOnly2Access().getRule();
	}
	
	//Must:
	//	must='must-';
	public MustElements getMustAccess() {
		return pMust;
	}
	
	public ParserRule getMustRule() {
		return getMustAccess().getRule();
	}
	
	//ElementType:
	//	BasicType | EntityType;
	public ElementTypeElements getElementTypeAccess() {
		return pElementType;
	}
	
	public ParserRule getElementTypeRule() {
		return getElementTypeAccess().getRule();
	}
	
	//BasicType:
	//	typeName=('access' | 'declare' | 'handle' | 'create' | 'depend');
	public BasicTypeElements getBasicTypeAccess() {
		return pBasicType;
	}
	
	public ParserRule getBasicTypeRule() {
		return getBasicTypeAccess().getRule();
	}
	
	//EntityType:
	//	entity=('extend' | 'implement' | 'derive' | 'throw' | 'useannotation');
	public EntityTypeElements getEntityTypeAccess() {
		return pEntityType;
	}
	
	public ParserRule getEntityTypeRule() {
		return getEntityTypeAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
