/**
 * generated by Xtext 2.10.0
 */
package br.ufscar.sas.xtext.sasdsl.sasDsl.impl;

import br.ufscar.sas.xtext.sasdsl.sasDsl.ArchitectureDefinition;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DCLAbstractions;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DCLAnalyzer;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DCLControlLoop;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DCLControlLoopManager;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DCLEffector;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DCLExecutor;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DCLGauge;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DCLKnowledge;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DCLManaged;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DCLManaging;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DCLMeasuredOutput;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DCLMonitor;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DCLPlanner;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DCLProbe;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DCLReferenceInput;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DCLSensor;
import br.ufscar.sas.xtext.sasdsl.sasDsl.SasDslFactory;
import br.ufscar.sas.xtext.sasdsl.sasDsl.SasDslPackage;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.impl.EPackageImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Package</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class SasDslPackageImpl extends EPackageImpl implements SasDslPackage
{
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass architectureDefinitionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass dclAbstractionsEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass dclManagingEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass dclManagedEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass dclControlLoopManagerEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass dclControlLoopEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass dclMonitorEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass dclAnalyzerEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass dclPlannerEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass dclExecutorEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass dclKnowledgeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass dclSensorEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass dclEffectorEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass dclProbeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass dclGaugeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass dclReferenceInputEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass dclMeasuredOutputEClass = null;

  /**
   * Creates an instance of the model <b>Package</b>, registered with
   * {@link org.eclipse.emf.ecore.EPackage.Registry EPackage.Registry} by the package
   * package URI value.
   * <p>Note: the correct way to create the package is via the static
   * factory method {@link #init init()}, which also performs
   * initialization of the package, or returns the registered package,
   * if one already exists.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.eclipse.emf.ecore.EPackage.Registry
   * @see br.ufscar.sas.xtext.sasdsl.sasDsl.SasDslPackage#eNS_URI
   * @see #init()
   * @generated
   */
  private SasDslPackageImpl()
  {
    super(eNS_URI, SasDslFactory.eINSTANCE);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static boolean isInited = false;

  /**
   * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
   * 
   * <p>This method is used to initialize {@link SasDslPackage#eINSTANCE} when that field is accessed.
   * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #eNS_URI
   * @see #createPackageContents()
   * @see #initializePackageContents()
   * @generated
   */
  public static SasDslPackage init()
  {
    if (isInited) return (SasDslPackage)EPackage.Registry.INSTANCE.getEPackage(SasDslPackage.eNS_URI);

    // Obtain or create and register package
    SasDslPackageImpl theSasDslPackage = (SasDslPackageImpl)(EPackage.Registry.INSTANCE.get(eNS_URI) instanceof SasDslPackageImpl ? EPackage.Registry.INSTANCE.get(eNS_URI) : new SasDslPackageImpl());

    isInited = true;

    // Create package meta-data objects
    theSasDslPackage.createPackageContents();

    // Initialize created meta-data
    theSasDslPackage.initializePackageContents();

    // Mark meta-data to indicate it can't be changed
    theSasDslPackage.freeze();

  
    // Update the registry and return the package
    EPackage.Registry.INSTANCE.put(SasDslPackage.eNS_URI, theSasDslPackage);
    return theSasDslPackage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getArchitectureDefinition()
  {
    return architectureDefinitionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getArchitectureDefinition_Abstractions()
  {
    return (EReference)architectureDefinitionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getDCLAbstractions()
  {
    return dclAbstractionsEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getDCLAbstractions_Managing()
  {
    return (EReference)dclAbstractionsEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getDCLAbstractions_Name()
  {
    return (EAttribute)dclAbstractionsEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getDCLManaging()
  {
    return dclManagingEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getDCLManaging_Name()
  {
    return (EAttribute)dclManagingEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getDCLManaged()
  {
    return dclManagedEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getDCLControlLoopManager()
  {
    return dclControlLoopManagerEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getDCLControlLoop()
  {
    return dclControlLoopEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getDCLMonitor()
  {
    return dclMonitorEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getDCLAnalyzer()
  {
    return dclAnalyzerEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getDCLPlanner()
  {
    return dclPlannerEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getDCLExecutor()
  {
    return dclExecutorEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getDCLKnowledge()
  {
    return dclKnowledgeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getDCLSensor()
  {
    return dclSensorEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getDCLEffector()
  {
    return dclEffectorEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getDCLProbe()
  {
    return dclProbeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getDCLGauge()
  {
    return dclGaugeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getDCLReferenceInput()
  {
    return dclReferenceInputEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getDCLMeasuredOutput()
  {
    return dclMeasuredOutputEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SasDslFactory getSasDslFactory()
  {
    return (SasDslFactory)getEFactoryInstance();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isCreated = false;

  /**
   * Creates the meta-model objects for the package.  This method is
   * guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void createPackageContents()
  {
    if (isCreated) return;
    isCreated = true;

    // Create classes and their features
    architectureDefinitionEClass = createEClass(ARCHITECTURE_DEFINITION);
    createEReference(architectureDefinitionEClass, ARCHITECTURE_DEFINITION__ABSTRACTIONS);

    dclAbstractionsEClass = createEClass(DCL_ABSTRACTIONS);
    createEReference(dclAbstractionsEClass, DCL_ABSTRACTIONS__MANAGING);
    createEAttribute(dclAbstractionsEClass, DCL_ABSTRACTIONS__NAME);

    dclManagingEClass = createEClass(DCL_MANAGING);
    createEAttribute(dclManagingEClass, DCL_MANAGING__NAME);

    dclManagedEClass = createEClass(DCL_MANAGED);

    dclControlLoopManagerEClass = createEClass(DCL_CONTROL_LOOP_MANAGER);

    dclControlLoopEClass = createEClass(DCL_CONTROL_LOOP);

    dclMonitorEClass = createEClass(DCL_MONITOR);

    dclAnalyzerEClass = createEClass(DCL_ANALYZER);

    dclPlannerEClass = createEClass(DCL_PLANNER);

    dclExecutorEClass = createEClass(DCL_EXECUTOR);

    dclKnowledgeEClass = createEClass(DCL_KNOWLEDGE);

    dclSensorEClass = createEClass(DCL_SENSOR);

    dclEffectorEClass = createEClass(DCL_EFFECTOR);

    dclProbeEClass = createEClass(DCL_PROBE);

    dclGaugeEClass = createEClass(DCL_GAUGE);

    dclReferenceInputEClass = createEClass(DCL_REFERENCE_INPUT);

    dclMeasuredOutputEClass = createEClass(DCL_MEASURED_OUTPUT);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isInitialized = false;

  /**
   * Complete the initialization of the package and its meta-model.  This
   * method is guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void initializePackageContents()
  {
    if (isInitialized) return;
    isInitialized = true;

    // Initialize package
    setName(eNAME);
    setNsPrefix(eNS_PREFIX);
    setNsURI(eNS_URI);

    // Create type parameters

    // Set bounds for type parameters

    // Add supertypes to classes
    dclManagedEClass.getESuperTypes().add(this.getDCLAbstractions());
    dclControlLoopManagerEClass.getESuperTypes().add(this.getDCLAbstractions());
    dclControlLoopEClass.getESuperTypes().add(this.getDCLAbstractions());
    dclMonitorEClass.getESuperTypes().add(this.getDCLAbstractions());
    dclAnalyzerEClass.getESuperTypes().add(this.getDCLAbstractions());
    dclPlannerEClass.getESuperTypes().add(this.getDCLAbstractions());
    dclExecutorEClass.getESuperTypes().add(this.getDCLAbstractions());
    dclKnowledgeEClass.getESuperTypes().add(this.getDCLAbstractions());
    dclSensorEClass.getESuperTypes().add(this.getDCLAbstractions());
    dclEffectorEClass.getESuperTypes().add(this.getDCLAbstractions());
    dclProbeEClass.getESuperTypes().add(this.getDCLAbstractions());
    dclGaugeEClass.getESuperTypes().add(this.getDCLAbstractions());
    dclReferenceInputEClass.getESuperTypes().add(this.getDCLAbstractions());
    dclMeasuredOutputEClass.getESuperTypes().add(this.getDCLAbstractions());

    // Initialize classes and features; add operations and parameters
    initEClass(architectureDefinitionEClass, ArchitectureDefinition.class, "ArchitectureDefinition", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getArchitectureDefinition_Abstractions(), this.getDCLAbstractions(), null, "abstractions", null, 0, -1, ArchitectureDefinition.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(dclAbstractionsEClass, DCLAbstractions.class, "DCLAbstractions", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getDCLAbstractions_Managing(), this.getDCLManaging(), null, "managing", null, 0, -1, DCLAbstractions.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getDCLAbstractions_Name(), ecorePackage.getEString(), "name", null, 0, -1, DCLAbstractions.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(dclManagingEClass, DCLManaging.class, "DCLManaging", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getDCLManaging_Name(), ecorePackage.getEString(), "name", null, 0, -1, DCLManaging.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(dclManagedEClass, DCLManaged.class, "DCLManaged", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(dclControlLoopManagerEClass, DCLControlLoopManager.class, "DCLControlLoopManager", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(dclControlLoopEClass, DCLControlLoop.class, "DCLControlLoop", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(dclMonitorEClass, DCLMonitor.class, "DCLMonitor", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(dclAnalyzerEClass, DCLAnalyzer.class, "DCLAnalyzer", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(dclPlannerEClass, DCLPlanner.class, "DCLPlanner", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(dclExecutorEClass, DCLExecutor.class, "DCLExecutor", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(dclKnowledgeEClass, DCLKnowledge.class, "DCLKnowledge", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(dclSensorEClass, DCLSensor.class, "DCLSensor", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(dclEffectorEClass, DCLEffector.class, "DCLEffector", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(dclProbeEClass, DCLProbe.class, "DCLProbe", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(dclGaugeEClass, DCLGauge.class, "DCLGauge", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(dclReferenceInputEClass, DCLReferenceInput.class, "DCLReferenceInput", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(dclMeasuredOutputEClass, DCLMeasuredOutput.class, "DCLMeasuredOutput", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    // Create resource
    createResource(eNS_URI);
  }

} //SasDslPackageImpl
