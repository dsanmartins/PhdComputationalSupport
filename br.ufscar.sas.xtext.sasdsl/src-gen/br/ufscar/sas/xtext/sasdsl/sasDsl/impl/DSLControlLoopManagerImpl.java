/**
 * generated by Xtext 2.10.0
 */
package br.ufscar.sas.xtext.sasdsl.sasDsl.impl;

import br.ufscar.sas.xtext.sasdsl.sasDsl.ControlLoopManagerInterface;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLControlLoopManager;
import br.ufscar.sas.xtext.sasdsl.sasDsl.SasDslPackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>DSL Control Loop Manager</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link br.ufscar.sas.xtext.sasdsl.sasDsl.impl.DSLControlLoopManagerImpl#getClminterfaces <em>Clminterfaces</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DSLControlLoopManagerImpl extends DSLAbstractionImpl implements DSLControlLoopManager
{
  /**
   * The cached value of the '{@link #getClminterfaces() <em>Clminterfaces</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getClminterfaces()
   * @generated
   * @ordered
   */
  protected EList<ControlLoopManagerInterface> clminterfaces;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DSLControlLoopManagerImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SasDslPackage.Literals.DSL_CONTROL_LOOP_MANAGER;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<ControlLoopManagerInterface> getClminterfaces()
  {
    if (clminterfaces == null)
    {
      clminterfaces = new EObjectContainmentEList<ControlLoopManagerInterface>(ControlLoopManagerInterface.class, this, SasDslPackage.DSL_CONTROL_LOOP_MANAGER__CLMINTERFACES);
    }
    return clminterfaces;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SasDslPackage.DSL_CONTROL_LOOP_MANAGER__CLMINTERFACES:
        return ((InternalEList<?>)getClminterfaces()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SasDslPackage.DSL_CONTROL_LOOP_MANAGER__CLMINTERFACES:
        return getClminterfaces();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SasDslPackage.DSL_CONTROL_LOOP_MANAGER__CLMINTERFACES:
        getClminterfaces().clear();
        getClminterfaces().addAll((Collection<? extends ControlLoopManagerInterface>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SasDslPackage.DSL_CONTROL_LOOP_MANAGER__CLMINTERFACES:
        getClminterfaces().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SasDslPackage.DSL_CONTROL_LOOP_MANAGER__CLMINTERFACES:
        return clminterfaces != null && !clminterfaces.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //DSLControlLoopManagerImpl
