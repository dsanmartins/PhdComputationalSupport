/**
 * generated by Xtext 2.10.0
 */
package br.ufscar.sas.xtext.sasdsl.sasDsl.impl;

import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLAbstractions;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLCompositions;
import br.ufscar.sas.xtext.sasdsl.sasDsl.MustBeIn;
import br.ufscar.sas.xtext.sasdsl.sasDsl.SasDslPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>DSL Compositions</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link br.ufscar.sas.xtext.sasdsl.sasDsl.impl.DSLCompositionsImpl#getSensor <em>Sensor</em>}</li>
 *   <li>{@link br.ufscar.sas.xtext.sasdsl.sasDsl.impl.DSLCompositionsImpl#getMustBeIn <em>Must Be In</em>}</li>
 *   <li>{@link br.ufscar.sas.xtext.sasdsl.sasDsl.impl.DSLCompositionsImpl#getMonitor <em>Monitor</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DSLCompositionsImpl extends MinimalEObjectImpl.Container implements DSLCompositions
{
  /**
   * The cached value of the '{@link #getSensor() <em>Sensor</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSensor()
   * @generated
   * @ordered
   */
  protected DSLAbstractions sensor;

  /**
   * The cached value of the '{@link #getMustBeIn() <em>Must Be In</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMustBeIn()
   * @generated
   * @ordered
   */
  protected MustBeIn mustBeIn;

  /**
   * The cached value of the '{@link #getMonitor() <em>Monitor</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMonitor()
   * @generated
   * @ordered
   */
  protected DSLAbstractions monitor;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DSLCompositionsImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SasDslPackage.Literals.DSL_COMPOSITIONS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DSLAbstractions getSensor()
  {
    if (sensor != null && sensor.eIsProxy())
    {
      InternalEObject oldSensor = (InternalEObject)sensor;
      sensor = (DSLAbstractions)eResolveProxy(oldSensor);
      if (sensor != oldSensor)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, SasDslPackage.DSL_COMPOSITIONS__SENSOR, oldSensor, sensor));
      }
    }
    return sensor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DSLAbstractions basicGetSensor()
  {
    return sensor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSensor(DSLAbstractions newSensor)
  {
    DSLAbstractions oldSensor = sensor;
    sensor = newSensor;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SasDslPackage.DSL_COMPOSITIONS__SENSOR, oldSensor, sensor));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MustBeIn getMustBeIn()
  {
    return mustBeIn;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMustBeIn(MustBeIn newMustBeIn, NotificationChain msgs)
  {
    MustBeIn oldMustBeIn = mustBeIn;
    mustBeIn = newMustBeIn;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SasDslPackage.DSL_COMPOSITIONS__MUST_BE_IN, oldMustBeIn, newMustBeIn);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setMustBeIn(MustBeIn newMustBeIn)
  {
    if (newMustBeIn != mustBeIn)
    {
      NotificationChain msgs = null;
      if (mustBeIn != null)
        msgs = ((InternalEObject)mustBeIn).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SasDslPackage.DSL_COMPOSITIONS__MUST_BE_IN, null, msgs);
      if (newMustBeIn != null)
        msgs = ((InternalEObject)newMustBeIn).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SasDslPackage.DSL_COMPOSITIONS__MUST_BE_IN, null, msgs);
      msgs = basicSetMustBeIn(newMustBeIn, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SasDslPackage.DSL_COMPOSITIONS__MUST_BE_IN, newMustBeIn, newMustBeIn));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DSLAbstractions getMonitor()
  {
    if (monitor != null && monitor.eIsProxy())
    {
      InternalEObject oldMonitor = (InternalEObject)monitor;
      monitor = (DSLAbstractions)eResolveProxy(oldMonitor);
      if (monitor != oldMonitor)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, SasDslPackage.DSL_COMPOSITIONS__MONITOR, oldMonitor, monitor));
      }
    }
    return monitor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DSLAbstractions basicGetMonitor()
  {
    return monitor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setMonitor(DSLAbstractions newMonitor)
  {
    DSLAbstractions oldMonitor = monitor;
    monitor = newMonitor;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SasDslPackage.DSL_COMPOSITIONS__MONITOR, oldMonitor, monitor));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SasDslPackage.DSL_COMPOSITIONS__MUST_BE_IN:
        return basicSetMustBeIn(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SasDslPackage.DSL_COMPOSITIONS__SENSOR:
        if (resolve) return getSensor();
        return basicGetSensor();
      case SasDslPackage.DSL_COMPOSITIONS__MUST_BE_IN:
        return getMustBeIn();
      case SasDslPackage.DSL_COMPOSITIONS__MONITOR:
        if (resolve) return getMonitor();
        return basicGetMonitor();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SasDslPackage.DSL_COMPOSITIONS__SENSOR:
        setSensor((DSLAbstractions)newValue);
        return;
      case SasDslPackage.DSL_COMPOSITIONS__MUST_BE_IN:
        setMustBeIn((MustBeIn)newValue);
        return;
      case SasDslPackage.DSL_COMPOSITIONS__MONITOR:
        setMonitor((DSLAbstractions)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SasDslPackage.DSL_COMPOSITIONS__SENSOR:
        setSensor((DSLAbstractions)null);
        return;
      case SasDslPackage.DSL_COMPOSITIONS__MUST_BE_IN:
        setMustBeIn((MustBeIn)null);
        return;
      case SasDslPackage.DSL_COMPOSITIONS__MONITOR:
        setMonitor((DSLAbstractions)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SasDslPackage.DSL_COMPOSITIONS__SENSOR:
        return sensor != null;
      case SasDslPackage.DSL_COMPOSITIONS__MUST_BE_IN:
        return mustBeIn != null;
      case SasDslPackage.DSL_COMPOSITIONS__MONITOR:
        return monitor != null;
    }
    return super.eIsSet(featureID);
  }

} //DSLCompositionsImpl
