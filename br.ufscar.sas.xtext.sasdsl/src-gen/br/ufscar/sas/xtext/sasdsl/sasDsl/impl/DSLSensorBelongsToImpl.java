/**
 * generated by Xtext 2.10.0
 */
package br.ufscar.sas.xtext.sasdsl.sasDsl.impl;

import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLManaged;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLSensor;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLSensorBelongsTo;
import br.ufscar.sas.xtext.sasdsl.sasDsl.SasDslPackage;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>DSL Sensor Belongs To</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link br.ufscar.sas.xtext.sasdsl.sasDsl.impl.DSLSensorBelongsToImpl#getSensor <em>Sensor</em>}</li>
 *   <li>{@link br.ufscar.sas.xtext.sasdsl.sasDsl.impl.DSLSensorBelongsToImpl#getManaged <em>Managed</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DSLSensorBelongsToImpl extends DSLCompositionImpl implements DSLSensorBelongsTo
{
  /**
   * The cached value of the '{@link #getSensor() <em>Sensor</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSensor()
   * @generated
   * @ordered
   */
  protected DSLSensor sensor;

  /**
   * The cached value of the '{@link #getManaged() <em>Managed</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getManaged()
   * @generated
   * @ordered
   */
  protected DSLManaged managed;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DSLSensorBelongsToImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SasDslPackage.Literals.DSL_SENSOR_BELONGS_TO;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DSLSensor getSensor()
  {
    if (sensor != null && sensor.eIsProxy())
    {
      InternalEObject oldSensor = (InternalEObject)sensor;
      sensor = (DSLSensor)eResolveProxy(oldSensor);
      if (sensor != oldSensor)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, SasDslPackage.DSL_SENSOR_BELONGS_TO__SENSOR, oldSensor, sensor));
      }
    }
    return sensor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DSLSensor basicGetSensor()
  {
    return sensor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSensor(DSLSensor newSensor)
  {
    DSLSensor oldSensor = sensor;
    sensor = newSensor;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SasDslPackage.DSL_SENSOR_BELONGS_TO__SENSOR, oldSensor, sensor));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DSLManaged getManaged()
  {
    if (managed != null && managed.eIsProxy())
    {
      InternalEObject oldManaged = (InternalEObject)managed;
      managed = (DSLManaged)eResolveProxy(oldManaged);
      if (managed != oldManaged)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, SasDslPackage.DSL_SENSOR_BELONGS_TO__MANAGED, oldManaged, managed));
      }
    }
    return managed;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DSLManaged basicGetManaged()
  {
    return managed;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setManaged(DSLManaged newManaged)
  {
    DSLManaged oldManaged = managed;
    managed = newManaged;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SasDslPackage.DSL_SENSOR_BELONGS_TO__MANAGED, oldManaged, managed));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SasDslPackage.DSL_SENSOR_BELONGS_TO__SENSOR:
        if (resolve) return getSensor();
        return basicGetSensor();
      case SasDslPackage.DSL_SENSOR_BELONGS_TO__MANAGED:
        if (resolve) return getManaged();
        return basicGetManaged();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SasDslPackage.DSL_SENSOR_BELONGS_TO__SENSOR:
        setSensor((DSLSensor)newValue);
        return;
      case SasDslPackage.DSL_SENSOR_BELONGS_TO__MANAGED:
        setManaged((DSLManaged)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SasDslPackage.DSL_SENSOR_BELONGS_TO__SENSOR:
        setSensor((DSLSensor)null);
        return;
      case SasDslPackage.DSL_SENSOR_BELONGS_TO__MANAGED:
        setManaged((DSLManaged)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SasDslPackage.DSL_SENSOR_BELONGS_TO__SENSOR:
        return sensor != null;
      case SasDslPackage.DSL_SENSOR_BELONGS_TO__MANAGED:
        return managed != null;
    }
    return super.eIsSet(featureID);
  }

} //DSLSensorBelongsToImpl
