/**
 * generated by Xtext 2.10.0
 */
package br.ufscar.sas.xtext.sasdsl.sasDsl.impl;

import br.ufscar.sas.xtext.sasdsl.sasDsl.ArchitectureDefinition;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLAbstraction;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLComposition;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLRestriction;
import br.ufscar.sas.xtext.sasdsl.sasDsl.SasDslPackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Architecture Definition</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link br.ufscar.sas.xtext.sasdsl.sasDsl.impl.ArchitectureDefinitionImpl#getAbstractions <em>Abstractions</em>}</li>
 *   <li>{@link br.ufscar.sas.xtext.sasdsl.sasDsl.impl.ArchitectureDefinitionImpl#getCompositions <em>Compositions</em>}</li>
 *   <li>{@link br.ufscar.sas.xtext.sasdsl.sasDsl.impl.ArchitectureDefinitionImpl#getRestrictions <em>Restrictions</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ArchitectureDefinitionImpl extends MinimalEObjectImpl.Container implements ArchitectureDefinition
{
  /**
   * The cached value of the '{@link #getAbstractions() <em>Abstractions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAbstractions()
   * @generated
   * @ordered
   */
  protected EList<DSLAbstraction> abstractions;

  /**
   * The cached value of the '{@link #getCompositions() <em>Compositions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCompositions()
   * @generated
   * @ordered
   */
  protected EList<DSLComposition> compositions;

  /**
   * The cached value of the '{@link #getRestrictions() <em>Restrictions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRestrictions()
   * @generated
   * @ordered
   */
  protected EList<DSLRestriction> restrictions;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ArchitectureDefinitionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SasDslPackage.Literals.ARCHITECTURE_DEFINITION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<DSLAbstraction> getAbstractions()
  {
    if (abstractions == null)
    {
      abstractions = new EObjectContainmentEList<DSLAbstraction>(DSLAbstraction.class, this, SasDslPackage.ARCHITECTURE_DEFINITION__ABSTRACTIONS);
    }
    return abstractions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<DSLComposition> getCompositions()
  {
    if (compositions == null)
    {
      compositions = new EObjectContainmentEList<DSLComposition>(DSLComposition.class, this, SasDslPackage.ARCHITECTURE_DEFINITION__COMPOSITIONS);
    }
    return compositions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<DSLRestriction> getRestrictions()
  {
    if (restrictions == null)
    {
      restrictions = new EObjectContainmentEList<DSLRestriction>(DSLRestriction.class, this, SasDslPackage.ARCHITECTURE_DEFINITION__RESTRICTIONS);
    }
    return restrictions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SasDslPackage.ARCHITECTURE_DEFINITION__ABSTRACTIONS:
        return ((InternalEList<?>)getAbstractions()).basicRemove(otherEnd, msgs);
      case SasDslPackage.ARCHITECTURE_DEFINITION__COMPOSITIONS:
        return ((InternalEList<?>)getCompositions()).basicRemove(otherEnd, msgs);
      case SasDslPackage.ARCHITECTURE_DEFINITION__RESTRICTIONS:
        return ((InternalEList<?>)getRestrictions()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SasDslPackage.ARCHITECTURE_DEFINITION__ABSTRACTIONS:
        return getAbstractions();
      case SasDslPackage.ARCHITECTURE_DEFINITION__COMPOSITIONS:
        return getCompositions();
      case SasDslPackage.ARCHITECTURE_DEFINITION__RESTRICTIONS:
        return getRestrictions();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SasDslPackage.ARCHITECTURE_DEFINITION__ABSTRACTIONS:
        getAbstractions().clear();
        getAbstractions().addAll((Collection<? extends DSLAbstraction>)newValue);
        return;
      case SasDslPackage.ARCHITECTURE_DEFINITION__COMPOSITIONS:
        getCompositions().clear();
        getCompositions().addAll((Collection<? extends DSLComposition>)newValue);
        return;
      case SasDslPackage.ARCHITECTURE_DEFINITION__RESTRICTIONS:
        getRestrictions().clear();
        getRestrictions().addAll((Collection<? extends DSLRestriction>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SasDslPackage.ARCHITECTURE_DEFINITION__ABSTRACTIONS:
        getAbstractions().clear();
        return;
      case SasDslPackage.ARCHITECTURE_DEFINITION__COMPOSITIONS:
        getCompositions().clear();
        return;
      case SasDslPackage.ARCHITECTURE_DEFINITION__RESTRICTIONS:
        getRestrictions().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SasDslPackage.ARCHITECTURE_DEFINITION__ABSTRACTIONS:
        return abstractions != null && !abstractions.isEmpty();
      case SasDslPackage.ARCHITECTURE_DEFINITION__COMPOSITIONS:
        return compositions != null && !compositions.isEmpty();
      case SasDslPackage.ARCHITECTURE_DEFINITION__RESTRICTIONS:
        return restrictions != null && !restrictions.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //ArchitectureDefinitionImpl
