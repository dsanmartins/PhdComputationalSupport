/**
 * generated by Xtext 2.16.0
 */
package br.ufscar.sas.xtext.sasdsl.sasDsl.util;

import br.ufscar.sas.xtext.sasdsl.sasDsl.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see br.ufscar.sas.xtext.sasdsl.sasDsl.SasDslPackage
 * @generated
 */
public class SasDslAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static SasDslPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SasDslAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = SasDslPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SasDslSwitch<Adapter> modelSwitch =
    new SasDslSwitch<Adapter>()
    {
      @Override
      public Adapter caseArchitectureDefinition(ArchitectureDefinition object)
      {
        return createArchitectureDefinitionAdapter();
      }
      @Override
      public Adapter caseDSLAbstractions(DSLAbstractions object)
      {
        return createDSLAbstractionsAdapter();
      }
      @Override
      public Adapter caseDSLManaging(DSLManaging object)
      {
        return createDSLManagingAdapter();
      }
      @Override
      public Adapter caseDSLManaged(DSLManaged object)
      {
        return createDSLManagedAdapter();
      }
      @Override
      public Adapter caseDSLControlLoopManager(DSLControlLoopManager object)
      {
        return createDSLControlLoopManagerAdapter();
      }
      @Override
      public Adapter caseDSLControlLoop(DSLControlLoop object)
      {
        return createDSLControlLoopAdapter();
      }
      @Override
      public Adapter caseDSLContainrerForCL(DSLContainrerForCL object)
      {
        return createDSLContainrerForCLAdapter();
      }
      @Override
      public Adapter caseDSLContainerForMAPE(DSLContainerForMAPE object)
      {
        return createDSLContainerForMAPEAdapter();
      }
      @Override
      public Adapter caseDSLMonitor(DSLMonitor object)
      {
        return createDSLMonitorAdapter();
      }
      @Override
      public Adapter caseDSLAnalyzer(DSLAnalyzer object)
      {
        return createDSLAnalyzerAdapter();
      }
      @Override
      public Adapter caseDSLPlanner(DSLPlanner object)
      {
        return createDSLPlannerAdapter();
      }
      @Override
      public Adapter caseDSLExecutor(DSLExecutor object)
      {
        return createDSLExecutorAdapter();
      }
      @Override
      public Adapter caseDSLKnowledge(DSLKnowledge object)
      {
        return createDSLKnowledgeAdapter();
      }
      @Override
      public Adapter caseDSLSensor(DSLSensor object)
      {
        return createDSLSensorAdapter();
      }
      @Override
      public Adapter caseDSLEffector(DSLEffector object)
      {
        return createDSLEffectorAdapter();
      }
      @Override
      public Adapter caseDSLProbe(DSLProbe object)
      {
        return createDSLProbeAdapter();
      }
      @Override
      public Adapter caseDSLGauge(DSLGauge object)
      {
        return createDSLGaugeAdapter();
      }
      @Override
      public Adapter caseDSLReferenceInput(DSLReferenceInput object)
      {
        return createDSLReferenceInputAdapter();
      }
      @Override
      public Adapter caseDSLMeasuredOutput(DSLMeasuredOutput object)
      {
        return createDSLMeasuredOutputAdapter();
      }
      @Override
      public Adapter caseDSLRestrictions(DSLRestrictions object)
      {
        return createDSLRestrictionsAdapter();
      }
      @Override
      public Adapter caseOnly(Only object)
      {
        return createOnlyAdapter();
      }
      @Override
      public Adapter caseCan(Can object)
      {
        return createCanAdapter();
      }
      @Override
      public Adapter caseCannot(Cannot object)
      {
        return createCannotAdapter();
      }
      @Override
      public Adapter caseOnly2(Only2 object)
      {
        return createOnly2Adapter();
      }
      @Override
      public Adapter caseMust(Must object)
      {
        return createMustAdapter();
      }
      @Override
      public Adapter caseElementType(ElementType object)
      {
        return createElementTypeAdapter();
      }
      @Override
      public Adapter caseBasicType(BasicType object)
      {
        return createBasicTypeAdapter();
      }
      @Override
      public Adapter caseEntityType(EntityType object)
      {
        return createEntityTypeAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link br.ufscar.sas.xtext.sasdsl.sasDsl.ArchitectureDefinition <em>Architecture Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.ufscar.sas.xtext.sasdsl.sasDsl.ArchitectureDefinition
   * @generated
   */
  public Adapter createArchitectureDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.ufscar.sas.xtext.sasdsl.sasDsl.DSLAbstractions <em>DSL Abstractions</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.ufscar.sas.xtext.sasdsl.sasDsl.DSLAbstractions
   * @generated
   */
  public Adapter createDSLAbstractionsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.ufscar.sas.xtext.sasdsl.sasDsl.DSLManaging <em>DSL Managing</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.ufscar.sas.xtext.sasdsl.sasDsl.DSLManaging
   * @generated
   */
  public Adapter createDSLManagingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.ufscar.sas.xtext.sasdsl.sasDsl.DSLManaged <em>DSL Managed</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.ufscar.sas.xtext.sasdsl.sasDsl.DSLManaged
   * @generated
   */
  public Adapter createDSLManagedAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.ufscar.sas.xtext.sasdsl.sasDsl.DSLControlLoopManager <em>DSL Control Loop Manager</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.ufscar.sas.xtext.sasdsl.sasDsl.DSLControlLoopManager
   * @generated
   */
  public Adapter createDSLControlLoopManagerAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.ufscar.sas.xtext.sasdsl.sasDsl.DSLControlLoop <em>DSL Control Loop</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.ufscar.sas.xtext.sasdsl.sasDsl.DSLControlLoop
   * @generated
   */
  public Adapter createDSLControlLoopAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.ufscar.sas.xtext.sasdsl.sasDsl.DSLContainrerForCL <em>DSL Containrer For CL</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.ufscar.sas.xtext.sasdsl.sasDsl.DSLContainrerForCL
   * @generated
   */
  public Adapter createDSLContainrerForCLAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.ufscar.sas.xtext.sasdsl.sasDsl.DSLContainerForMAPE <em>DSL Container For MAPE</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.ufscar.sas.xtext.sasdsl.sasDsl.DSLContainerForMAPE
   * @generated
   */
  public Adapter createDSLContainerForMAPEAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.ufscar.sas.xtext.sasdsl.sasDsl.DSLMonitor <em>DSL Monitor</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.ufscar.sas.xtext.sasdsl.sasDsl.DSLMonitor
   * @generated
   */
  public Adapter createDSLMonitorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.ufscar.sas.xtext.sasdsl.sasDsl.DSLAnalyzer <em>DSL Analyzer</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.ufscar.sas.xtext.sasdsl.sasDsl.DSLAnalyzer
   * @generated
   */
  public Adapter createDSLAnalyzerAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.ufscar.sas.xtext.sasdsl.sasDsl.DSLPlanner <em>DSL Planner</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.ufscar.sas.xtext.sasdsl.sasDsl.DSLPlanner
   * @generated
   */
  public Adapter createDSLPlannerAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.ufscar.sas.xtext.sasdsl.sasDsl.DSLExecutor <em>DSL Executor</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.ufscar.sas.xtext.sasdsl.sasDsl.DSLExecutor
   * @generated
   */
  public Adapter createDSLExecutorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.ufscar.sas.xtext.sasdsl.sasDsl.DSLKnowledge <em>DSL Knowledge</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.ufscar.sas.xtext.sasdsl.sasDsl.DSLKnowledge
   * @generated
   */
  public Adapter createDSLKnowledgeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.ufscar.sas.xtext.sasdsl.sasDsl.DSLSensor <em>DSL Sensor</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.ufscar.sas.xtext.sasdsl.sasDsl.DSLSensor
   * @generated
   */
  public Adapter createDSLSensorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.ufscar.sas.xtext.sasdsl.sasDsl.DSLEffector <em>DSL Effector</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.ufscar.sas.xtext.sasdsl.sasDsl.DSLEffector
   * @generated
   */
  public Adapter createDSLEffectorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.ufscar.sas.xtext.sasdsl.sasDsl.DSLProbe <em>DSL Probe</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.ufscar.sas.xtext.sasdsl.sasDsl.DSLProbe
   * @generated
   */
  public Adapter createDSLProbeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.ufscar.sas.xtext.sasdsl.sasDsl.DSLGauge <em>DSL Gauge</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.ufscar.sas.xtext.sasdsl.sasDsl.DSLGauge
   * @generated
   */
  public Adapter createDSLGaugeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.ufscar.sas.xtext.sasdsl.sasDsl.DSLReferenceInput <em>DSL Reference Input</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.ufscar.sas.xtext.sasdsl.sasDsl.DSLReferenceInput
   * @generated
   */
  public Adapter createDSLReferenceInputAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.ufscar.sas.xtext.sasdsl.sasDsl.DSLMeasuredOutput <em>DSL Measured Output</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.ufscar.sas.xtext.sasdsl.sasDsl.DSLMeasuredOutput
   * @generated
   */
  public Adapter createDSLMeasuredOutputAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.ufscar.sas.xtext.sasdsl.sasDsl.DSLRestrictions <em>DSL Restrictions</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.ufscar.sas.xtext.sasdsl.sasDsl.DSLRestrictions
   * @generated
   */
  public Adapter createDSLRestrictionsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.ufscar.sas.xtext.sasdsl.sasDsl.Only <em>Only</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.ufscar.sas.xtext.sasdsl.sasDsl.Only
   * @generated
   */
  public Adapter createOnlyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.ufscar.sas.xtext.sasdsl.sasDsl.Can <em>Can</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.ufscar.sas.xtext.sasdsl.sasDsl.Can
   * @generated
   */
  public Adapter createCanAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.ufscar.sas.xtext.sasdsl.sasDsl.Cannot <em>Cannot</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.ufscar.sas.xtext.sasdsl.sasDsl.Cannot
   * @generated
   */
  public Adapter createCannotAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.ufscar.sas.xtext.sasdsl.sasDsl.Only2 <em>Only2</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.ufscar.sas.xtext.sasdsl.sasDsl.Only2
   * @generated
   */
  public Adapter createOnly2Adapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.ufscar.sas.xtext.sasdsl.sasDsl.Must <em>Must</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.ufscar.sas.xtext.sasdsl.sasDsl.Must
   * @generated
   */
  public Adapter createMustAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.ufscar.sas.xtext.sasdsl.sasDsl.ElementType <em>Element Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.ufscar.sas.xtext.sasdsl.sasDsl.ElementType
   * @generated
   */
  public Adapter createElementTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.ufscar.sas.xtext.sasdsl.sasDsl.BasicType <em>Basic Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.ufscar.sas.xtext.sasdsl.sasDsl.BasicType
   * @generated
   */
  public Adapter createBasicTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.ufscar.sas.xtext.sasdsl.sasDsl.EntityType <em>Entity Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.ufscar.sas.xtext.sasdsl.sasDsl.EntityType
   * @generated
   */
  public Adapter createEntityTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //SasDslAdapterFactory
