/**
 * generated by Xtext 2.10.0
 */
package br.ufscar.sas.xtext.sasdsl.sasDsl.util;

import br.ufscar.sas.xtext.sasdsl.sasDsl.*;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see br.ufscar.sas.xtext.sasdsl.sasDsl.SasDslPackage
 * @generated
 */
public class SasDslSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static SasDslPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SasDslSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = SasDslPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case SasDslPackage.ARCHITECTURE_DEFINITION:
      {
        ArchitectureDefinition architectureDefinition = (ArchitectureDefinition)theEObject;
        T result = caseArchitectureDefinition(architectureDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SasDslPackage.DCL_ABSTRACTIONS:
      {
        DCLAbstractions dclAbstractions = (DCLAbstractions)theEObject;
        T result = caseDCLAbstractions(dclAbstractions);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SasDslPackage.DCL_MANAGING:
      {
        DCLManaging dclManaging = (DCLManaging)theEObject;
        T result = caseDCLManaging(dclManaging);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SasDslPackage.DCL_MANAGED:
      {
        DCLManaged dclManaged = (DCLManaged)theEObject;
        T result = caseDCLManaged(dclManaged);
        if (result == null) result = caseDCLAbstractions(dclManaged);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SasDslPackage.DCL_CONTROL_LOOP_MANAGER:
      {
        DCLControlLoopManager dclControlLoopManager = (DCLControlLoopManager)theEObject;
        T result = caseDCLControlLoopManager(dclControlLoopManager);
        if (result == null) result = caseDCLAbstractions(dclControlLoopManager);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SasDslPackage.DCL_CONTROL_LOOP:
      {
        DCLControlLoop dclControlLoop = (DCLControlLoop)theEObject;
        T result = caseDCLControlLoop(dclControlLoop);
        if (result == null) result = caseDCLAbstractions(dclControlLoop);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SasDslPackage.DCL_MONITOR:
      {
        DCLMonitor dclMonitor = (DCLMonitor)theEObject;
        T result = caseDCLMonitor(dclMonitor);
        if (result == null) result = caseDCLAbstractions(dclMonitor);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SasDslPackage.DCL_ANALYZER:
      {
        DCLAnalyzer dclAnalyzer = (DCLAnalyzer)theEObject;
        T result = caseDCLAnalyzer(dclAnalyzer);
        if (result == null) result = caseDCLAbstractions(dclAnalyzer);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SasDslPackage.DCL_PLANNER:
      {
        DCLPlanner dclPlanner = (DCLPlanner)theEObject;
        T result = caseDCLPlanner(dclPlanner);
        if (result == null) result = caseDCLAbstractions(dclPlanner);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SasDslPackage.DCL_EXECUTOR:
      {
        DCLExecutor dclExecutor = (DCLExecutor)theEObject;
        T result = caseDCLExecutor(dclExecutor);
        if (result == null) result = caseDCLAbstractions(dclExecutor);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SasDslPackage.DCL_KNOWLEDGE:
      {
        DCLKnowledge dclKnowledge = (DCLKnowledge)theEObject;
        T result = caseDCLKnowledge(dclKnowledge);
        if (result == null) result = caseDCLAbstractions(dclKnowledge);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SasDslPackage.DCL_SENSOR:
      {
        DCLSensor dclSensor = (DCLSensor)theEObject;
        T result = caseDCLSensor(dclSensor);
        if (result == null) result = caseDCLAbstractions(dclSensor);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SasDslPackage.DCL_EFFECTOR:
      {
        DCLEffector dclEffector = (DCLEffector)theEObject;
        T result = caseDCLEffector(dclEffector);
        if (result == null) result = caseDCLAbstractions(dclEffector);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SasDslPackage.DCL_PROBE:
      {
        DCLProbe dclProbe = (DCLProbe)theEObject;
        T result = caseDCLProbe(dclProbe);
        if (result == null) result = caseDCLAbstractions(dclProbe);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SasDslPackage.DCL_GAUGE:
      {
        DCLGauge dclGauge = (DCLGauge)theEObject;
        T result = caseDCLGauge(dclGauge);
        if (result == null) result = caseDCLAbstractions(dclGauge);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SasDslPackage.DCL_REFERENCE_INPUT:
      {
        DCLReferenceInput dclReferenceInput = (DCLReferenceInput)theEObject;
        T result = caseDCLReferenceInput(dclReferenceInput);
        if (result == null) result = caseDCLAbstractions(dclReferenceInput);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SasDslPackage.DCL_MEASURED_OUTPUT:
      {
        DCLMeasuredOutput dclMeasuredOutput = (DCLMeasuredOutput)theEObject;
        T result = caseDCLMeasuredOutput(dclMeasuredOutput);
        if (result == null) result = caseDCLAbstractions(dclMeasuredOutput);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Architecture Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Architecture Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseArchitectureDefinition(ArchitectureDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>DCL Abstractions</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>DCL Abstractions</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDCLAbstractions(DCLAbstractions object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>DCL Managing</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>DCL Managing</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDCLManaging(DCLManaging object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>DCL Managed</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>DCL Managed</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDCLManaged(DCLManaged object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>DCL Control Loop Manager</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>DCL Control Loop Manager</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDCLControlLoopManager(DCLControlLoopManager object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>DCL Control Loop</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>DCL Control Loop</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDCLControlLoop(DCLControlLoop object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>DCL Monitor</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>DCL Monitor</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDCLMonitor(DCLMonitor object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>DCL Analyzer</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>DCL Analyzer</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDCLAnalyzer(DCLAnalyzer object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>DCL Planner</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>DCL Planner</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDCLPlanner(DCLPlanner object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>DCL Executor</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>DCL Executor</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDCLExecutor(DCLExecutor object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>DCL Knowledge</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>DCL Knowledge</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDCLKnowledge(DCLKnowledge object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>DCL Sensor</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>DCL Sensor</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDCLSensor(DCLSensor object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>DCL Effector</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>DCL Effector</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDCLEffector(DCLEffector object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>DCL Probe</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>DCL Probe</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDCLProbe(DCLProbe object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>DCL Gauge</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>DCL Gauge</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDCLGauge(DCLGauge object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>DCL Reference Input</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>DCL Reference Input</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDCLReferenceInput(DCLReferenceInput object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>DCL Measured Output</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>DCL Measured Output</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDCLMeasuredOutput(DCLMeasuredOutput object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //SasDslSwitch
