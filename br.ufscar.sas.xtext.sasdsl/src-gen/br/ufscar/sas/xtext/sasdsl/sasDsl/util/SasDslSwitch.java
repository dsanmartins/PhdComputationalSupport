/**
 * generated by Xtext 2.10.0
 */
package br.ufscar.sas.xtext.sasdsl.sasDsl.util;

import br.ufscar.sas.xtext.sasdsl.sasDsl.*;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see br.ufscar.sas.xtext.sasdsl.sasDsl.SasDslPackage
 * @generated
 */
public class SasDslSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static SasDslPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SasDslSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = SasDslPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case SasDslPackage.ARCHITECTURE_DEFINITION:
      {
        ArchitectureDefinition architectureDefinition = (ArchitectureDefinition)theEObject;
        T result = caseArchitectureDefinition(architectureDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SasDslPackage.DSL_ABSTRACTION:
      {
        DSLAbstraction dslAbstraction = (DSLAbstraction)theEObject;
        T result = caseDSLAbstraction(dslAbstraction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SasDslPackage.DSL_COMPOSITION:
      {
        DSLComposition dslComposition = (DSLComposition)theEObject;
        T result = caseDSLComposition(dslComposition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SasDslPackage.DSL_RESTRICTION:
      {
        DSLRestriction dslRestriction = (DSLRestriction)theEObject;
        T result = caseDSLRestriction(dslRestriction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SasDslPackage.DSL_SENSOR_BELONGS_TO:
      {
        DSLSensorBelongsTo dslSensorBelongsTo = (DSLSensorBelongsTo)theEObject;
        T result = caseDSLSensorBelongsTo(dslSensorBelongsTo);
        if (result == null) result = caseDSLComposition(dslSensorBelongsTo);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SasDslPackage.DSL_REFERENCE_INPUT_BELONGS_TO:
      {
        DSLReferenceInputBelongsTo dslReferenceInputBelongsTo = (DSLReferenceInputBelongsTo)theEObject;
        T result = caseDSLReferenceInputBelongsTo(dslReferenceInputBelongsTo);
        if (result == null) result = caseDSLComposition(dslReferenceInputBelongsTo);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SasDslPackage.DSL_EFFECTOR_BELONGS_TO:
      {
        DSLEffectorBelongsTo dslEffectorBelongsTo = (DSLEffectorBelongsTo)theEObject;
        T result = caseDSLEffectorBelongsTo(dslEffectorBelongsTo);
        if (result == null) result = caseDSLComposition(dslEffectorBelongsTo);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SasDslPackage.DSL_MONITOR_BELONGS_TO1:
      {
        DSLMonitorBelongsTo1 dslMonitorBelongsTo1 = (DSLMonitorBelongsTo1)theEObject;
        T result = caseDSLMonitorBelongsTo1(dslMonitorBelongsTo1);
        if (result == null) result = caseDSLComposition(dslMonitorBelongsTo1);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SasDslPackage.DSL_MONITOR_BELONGS_TO2:
      {
        DSLMonitorBelongsTo2 dslMonitorBelongsTo2 = (DSLMonitorBelongsTo2)theEObject;
        T result = caseDSLMonitorBelongsTo2(dslMonitorBelongsTo2);
        if (result == null) result = caseDSLComposition(dslMonitorBelongsTo2);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SasDslPackage.DSL_ANALYZER_BELONGS_TO1:
      {
        DSLAnalyzerBelongsTo1 dslAnalyzerBelongsTo1 = (DSLAnalyzerBelongsTo1)theEObject;
        T result = caseDSLAnalyzerBelongsTo1(dslAnalyzerBelongsTo1);
        if (result == null) result = caseDSLComposition(dslAnalyzerBelongsTo1);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SasDslPackage.DSL_ANALYZER_BELONGS_TO2:
      {
        DSLAnalyzerBelongsTo2 dslAnalyzerBelongsTo2 = (DSLAnalyzerBelongsTo2)theEObject;
        T result = caseDSLAnalyzerBelongsTo2(dslAnalyzerBelongsTo2);
        if (result == null) result = caseDSLComposition(dslAnalyzerBelongsTo2);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SasDslPackage.DSL_PLANNER_BELONGS_TO1:
      {
        DSLPlannerBelongsTo1 dslPlannerBelongsTo1 = (DSLPlannerBelongsTo1)theEObject;
        T result = caseDSLPlannerBelongsTo1(dslPlannerBelongsTo1);
        if (result == null) result = caseDSLComposition(dslPlannerBelongsTo1);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SasDslPackage.DSL_PLANNER_BELONGS_TO2:
      {
        DSLPlannerBelongsTo2 dslPlannerBelongsTo2 = (DSLPlannerBelongsTo2)theEObject;
        T result = caseDSLPlannerBelongsTo2(dslPlannerBelongsTo2);
        if (result == null) result = caseDSLComposition(dslPlannerBelongsTo2);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SasDslPackage.DSL_EXECUTOR_BELONGS_TO1:
      {
        DSLExecutorBelongsTo1 dslExecutorBelongsTo1 = (DSLExecutorBelongsTo1)theEObject;
        T result = caseDSLExecutorBelongsTo1(dslExecutorBelongsTo1);
        if (result == null) result = caseDSLComposition(dslExecutorBelongsTo1);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SasDslPackage.DSL_EXECUTOR_BELONGS_TO2:
      {
        DSLExecutorBelongsTo2 dslExecutorBelongsTo2 = (DSLExecutorBelongsTo2)theEObject;
        T result = caseDSLExecutorBelongsTo2(dslExecutorBelongsTo2);
        if (result == null) result = caseDSLComposition(dslExecutorBelongsTo2);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SasDslPackage.DSL_CL_BELONGS_TO1:
      {
        DSLClBelongsTo1 dslClBelongsTo1 = (DSLClBelongsTo1)theEObject;
        T result = caseDSLClBelongsTo1(dslClBelongsTo1);
        if (result == null) result = caseDSLComposition(dslClBelongsTo1);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SasDslPackage.DSL_CL_BELONGS_TO2:
      {
        DSLClBelongsTo2 dslClBelongsTo2 = (DSLClBelongsTo2)theEObject;
        T result = caseDSLClBelongsTo2(dslClBelongsTo2);
        if (result == null) result = caseDSLComposition(dslClBelongsTo2);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SasDslPackage.DSL_CLM_BELONGS_TO:
      {
        DSLClmBelongsTo dslClmBelongsTo = (DSLClmBelongsTo)theEObject;
        T result = caseDSLClmBelongsTo(dslClmBelongsTo);
        if (result == null) result = caseDSLComposition(dslClmBelongsTo);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SasDslPackage.DSL_MEASURED_OUPUT_BELONGS_TO:
      {
        DSLMeasuredOuputBelongsTo dslMeasuredOuputBelongsTo = (DSLMeasuredOuputBelongsTo)theEObject;
        T result = caseDSLMeasuredOuputBelongsTo(dslMeasuredOuputBelongsTo);
        if (result == null) result = caseDSLComposition(dslMeasuredOuputBelongsTo);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SasDslPackage.DSL_GAUGE_BELONGS_TO:
      {
        DSLGaugeBelongsTo dslGaugeBelongsTo = (DSLGaugeBelongsTo)theEObject;
        T result = caseDSLGaugeBelongsTo(dslGaugeBelongsTo);
        if (result == null) result = caseDSLComposition(dslGaugeBelongsTo);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SasDslPackage.DSL_PROBE_BELONGS_TO:
      {
        DSLProbeBelongsTo dslProbeBelongsTo = (DSLProbeBelongsTo)theEObject;
        T result = caseDSLProbeBelongsTo(dslProbeBelongsTo);
        if (result == null) result = caseDSLComposition(dslProbeBelongsTo);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SasDslPackage.DSL_MANAGING:
      {
        DSLManaging dslManaging = (DSLManaging)theEObject;
        T result = caseDSLManaging(dslManaging);
        if (result == null) result = caseDSLAbstraction(dslManaging);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SasDslPackage.DSL_MANAGED:
      {
        DSLManaged dslManaged = (DSLManaged)theEObject;
        T result = caseDSLManaged(dslManaged);
        if (result == null) result = caseDSLAbstraction(dslManaged);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SasDslPackage.DSL_CONTROL_LOOP_MANAGER:
      {
        DSLControlLoopManager dslControlLoopManager = (DSLControlLoopManager)theEObject;
        T result = caseDSLControlLoopManager(dslControlLoopManager);
        if (result == null) result = caseDSLAbstraction(dslControlLoopManager);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SasDslPackage.DSL_CONTROL_LOOP:
      {
        DSLControlLoop dslControlLoop = (DSLControlLoop)theEObject;
        T result = caseDSLControlLoop(dslControlLoop);
        if (result == null) result = caseDSLAbstraction(dslControlLoop);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SasDslPackage.DSL_MONITOR:
      {
        DSLMonitor dslMonitor = (DSLMonitor)theEObject;
        T result = caseDSLMonitor(dslMonitor);
        if (result == null) result = caseDSLAbstraction(dslMonitor);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SasDslPackage.DSL_ANALYZER:
      {
        DSLAnalyzer dslAnalyzer = (DSLAnalyzer)theEObject;
        T result = caseDSLAnalyzer(dslAnalyzer);
        if (result == null) result = caseDSLAbstraction(dslAnalyzer);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SasDslPackage.DSL_PLANNER:
      {
        DSLPlanner dslPlanner = (DSLPlanner)theEObject;
        T result = caseDSLPlanner(dslPlanner);
        if (result == null) result = caseDSLAbstraction(dslPlanner);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SasDslPackage.DSL_EXECUTOR:
      {
        DSLExecutor dslExecutor = (DSLExecutor)theEObject;
        T result = caseDSLExecutor(dslExecutor);
        if (result == null) result = caseDSLAbstraction(dslExecutor);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SasDslPackage.DSL_KNOWLEDGE:
      {
        DSLKnowledge dslKnowledge = (DSLKnowledge)theEObject;
        T result = caseDSLKnowledge(dslKnowledge);
        if (result == null) result = caseDSLAbstraction(dslKnowledge);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SasDslPackage.DSL_SENSOR:
      {
        DSLSensor dslSensor = (DSLSensor)theEObject;
        T result = caseDSLSensor(dslSensor);
        if (result == null) result = caseDSLAbstraction(dslSensor);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SasDslPackage.DSL_EFFECTOR:
      {
        DSLEffector dslEffector = (DSLEffector)theEObject;
        T result = caseDSLEffector(dslEffector);
        if (result == null) result = caseDSLAbstraction(dslEffector);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SasDslPackage.DSL_PROBE:
      {
        DSLProbe dslProbe = (DSLProbe)theEObject;
        T result = caseDSLProbe(dslProbe);
        if (result == null) result = caseDSLAbstraction(dslProbe);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SasDslPackage.DSL_GAUGE:
      {
        DSLGauge dslGauge = (DSLGauge)theEObject;
        T result = caseDSLGauge(dslGauge);
        if (result == null) result = caseDSLAbstraction(dslGauge);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SasDslPackage.DSL_REFERENCE_INPUT:
      {
        DSLReferenceInput dslReferenceInput = (DSLReferenceInput)theEObject;
        T result = caseDSLReferenceInput(dslReferenceInput);
        if (result == null) result = caseDSLAbstraction(dslReferenceInput);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SasDslPackage.DSL_MEASURED_OUTPUT:
      {
        DSLMeasuredOutput dslMeasuredOutput = (DSLMeasuredOutput)theEObject;
        T result = caseDSLMeasuredOutput(dslMeasuredOutput);
        if (result == null) result = caseDSLAbstraction(dslMeasuredOutput);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SasDslPackage.ONLY:
      {
        Only only = (Only)theEObject;
        T result = caseOnly(only);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SasDslPackage.CAN:
      {
        Can can = (Can)theEObject;
        T result = caseCan(can);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SasDslPackage.CANNOT:
      {
        Cannot cannot = (Cannot)theEObject;
        T result = caseCannot(cannot);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SasDslPackage.ONLY2:
      {
        Only2 only2 = (Only2)theEObject;
        T result = caseOnly2(only2);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SasDslPackage.MUST:
      {
        Must must = (Must)theEObject;
        T result = caseMust(must);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SasDslPackage.ELEMENT_TYPE:
      {
        ElementType elementType = (ElementType)theEObject;
        T result = caseElementType(elementType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SasDslPackage.BASIC_TYPE:
      {
        BasicType basicType = (BasicType)theEObject;
        T result = caseBasicType(basicType);
        if (result == null) result = caseElementType(basicType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SasDslPackage.ENTITY_TYPE:
      {
        EntityType entityType = (EntityType)theEObject;
        T result = caseEntityType(entityType);
        if (result == null) result = caseElementType(entityType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Architecture Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Architecture Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseArchitectureDefinition(ArchitectureDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>DSL Abstraction</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>DSL Abstraction</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDSLAbstraction(DSLAbstraction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>DSL Composition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>DSL Composition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDSLComposition(DSLComposition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>DSL Restriction</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>DSL Restriction</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDSLRestriction(DSLRestriction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>DSL Sensor Belongs To</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>DSL Sensor Belongs To</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDSLSensorBelongsTo(DSLSensorBelongsTo object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>DSL Reference Input Belongs To</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>DSL Reference Input Belongs To</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDSLReferenceInputBelongsTo(DSLReferenceInputBelongsTo object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>DSL Effector Belongs To</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>DSL Effector Belongs To</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDSLEffectorBelongsTo(DSLEffectorBelongsTo object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>DSL Monitor Belongs To1</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>DSL Monitor Belongs To1</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDSLMonitorBelongsTo1(DSLMonitorBelongsTo1 object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>DSL Monitor Belongs To2</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>DSL Monitor Belongs To2</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDSLMonitorBelongsTo2(DSLMonitorBelongsTo2 object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>DSL Analyzer Belongs To1</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>DSL Analyzer Belongs To1</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDSLAnalyzerBelongsTo1(DSLAnalyzerBelongsTo1 object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>DSL Analyzer Belongs To2</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>DSL Analyzer Belongs To2</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDSLAnalyzerBelongsTo2(DSLAnalyzerBelongsTo2 object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>DSL Planner Belongs To1</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>DSL Planner Belongs To1</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDSLPlannerBelongsTo1(DSLPlannerBelongsTo1 object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>DSL Planner Belongs To2</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>DSL Planner Belongs To2</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDSLPlannerBelongsTo2(DSLPlannerBelongsTo2 object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>DSL Executor Belongs To1</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>DSL Executor Belongs To1</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDSLExecutorBelongsTo1(DSLExecutorBelongsTo1 object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>DSL Executor Belongs To2</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>DSL Executor Belongs To2</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDSLExecutorBelongsTo2(DSLExecutorBelongsTo2 object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>DSL Cl Belongs To1</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>DSL Cl Belongs To1</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDSLClBelongsTo1(DSLClBelongsTo1 object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>DSL Cl Belongs To2</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>DSL Cl Belongs To2</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDSLClBelongsTo2(DSLClBelongsTo2 object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>DSL Clm Belongs To</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>DSL Clm Belongs To</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDSLClmBelongsTo(DSLClmBelongsTo object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>DSL Measured Ouput Belongs To</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>DSL Measured Ouput Belongs To</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDSLMeasuredOuputBelongsTo(DSLMeasuredOuputBelongsTo object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>DSL Gauge Belongs To</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>DSL Gauge Belongs To</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDSLGaugeBelongsTo(DSLGaugeBelongsTo object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>DSL Probe Belongs To</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>DSL Probe Belongs To</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDSLProbeBelongsTo(DSLProbeBelongsTo object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>DSL Managing</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>DSL Managing</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDSLManaging(DSLManaging object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>DSL Managed</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>DSL Managed</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDSLManaged(DSLManaged object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>DSL Control Loop Manager</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>DSL Control Loop Manager</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDSLControlLoopManager(DSLControlLoopManager object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>DSL Control Loop</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>DSL Control Loop</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDSLControlLoop(DSLControlLoop object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>DSL Monitor</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>DSL Monitor</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDSLMonitor(DSLMonitor object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>DSL Analyzer</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>DSL Analyzer</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDSLAnalyzer(DSLAnalyzer object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>DSL Planner</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>DSL Planner</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDSLPlanner(DSLPlanner object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>DSL Executor</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>DSL Executor</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDSLExecutor(DSLExecutor object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>DSL Knowledge</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>DSL Knowledge</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDSLKnowledge(DSLKnowledge object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>DSL Sensor</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>DSL Sensor</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDSLSensor(DSLSensor object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>DSL Effector</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>DSL Effector</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDSLEffector(DSLEffector object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>DSL Probe</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>DSL Probe</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDSLProbe(DSLProbe object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>DSL Gauge</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>DSL Gauge</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDSLGauge(DSLGauge object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>DSL Reference Input</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>DSL Reference Input</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDSLReferenceInput(DSLReferenceInput object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>DSL Measured Output</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>DSL Measured Output</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDSLMeasuredOutput(DSLMeasuredOutput object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Only</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Only</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOnly(Only object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Can</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Can</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCan(Can object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Cannot</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Cannot</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCannot(Cannot object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Only2</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Only2</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOnly2(Only2 object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Must</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Must</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMust(Must object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Element Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Element Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseElementType(ElementType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Basic Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Basic Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBasicType(BasicType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Entity Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Entity Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEntityType(EntityType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //SasDslSwitch
