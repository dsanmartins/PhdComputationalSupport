/**
 * generated by Xtext 2.10.0
 */
package br.ufscar.sas.xtext.sasdsl.sasDsl.impl;

import br.ufscar.sas.xtext.sasdsl.sasDsl.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class SasDslFactoryImpl extends EFactoryImpl implements SasDslFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static SasDslFactory init()
  {
    try
    {
      SasDslFactory theSasDslFactory = (SasDslFactory)EPackage.Registry.INSTANCE.getEFactory(SasDslPackage.eNS_URI);
      if (theSasDslFactory != null)
      {
        return theSasDslFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new SasDslFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SasDslFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case SasDslPackage.ARCHITECTURE_DEFINITION: return createArchitectureDefinition();
      case SasDslPackage.DCL_ABSTRACTIONS: return createDCLAbstractions();
      case SasDslPackage.DCL_MANAGING: return createDCLManaging();
      case SasDslPackage.DCL_MANAGED: return createDCLManaged();
      case SasDslPackage.DCL_CONTROL_LOOP_MANAGER: return createDCLControlLoopManager();
      case SasDslPackage.DCL_CONTROL_LOOP: return createDCLControlLoop();
      case SasDslPackage.DCL_MONITOR: return createDCLMonitor();
      case SasDslPackage.DCL_ANALYZER: return createDCLAnalyzer();
      case SasDslPackage.DCL_PLANNER: return createDCLPlanner();
      case SasDslPackage.DCL_EXECUTOR: return createDCLExecutor();
      case SasDslPackage.DCL_KNOWLEDGE: return createDCLKnowledge();
      case SasDslPackage.DCL_SENSOR: return createDCLSensor();
      case SasDslPackage.DCL_EFFECTOR: return createDCLEffector();
      case SasDslPackage.DCL_PROBE: return createDCLProbe();
      case SasDslPackage.DCL_GAUGE: return createDCLGauge();
      case SasDslPackage.DCL_REFERENCE_INPUT: return createDCLReferenceInput();
      case SasDslPackage.DCL_MEASURED_OUTPUT: return createDCLMeasuredOutput();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ArchitectureDefinition createArchitectureDefinition()
  {
    ArchitectureDefinitionImpl architectureDefinition = new ArchitectureDefinitionImpl();
    return architectureDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DCLAbstractions createDCLAbstractions()
  {
    DCLAbstractionsImpl dclAbstractions = new DCLAbstractionsImpl();
    return dclAbstractions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DCLManaging createDCLManaging()
  {
    DCLManagingImpl dclManaging = new DCLManagingImpl();
    return dclManaging;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DCLManaged createDCLManaged()
  {
    DCLManagedImpl dclManaged = new DCLManagedImpl();
    return dclManaged;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DCLControlLoopManager createDCLControlLoopManager()
  {
    DCLControlLoopManagerImpl dclControlLoopManager = new DCLControlLoopManagerImpl();
    return dclControlLoopManager;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DCLControlLoop createDCLControlLoop()
  {
    DCLControlLoopImpl dclControlLoop = new DCLControlLoopImpl();
    return dclControlLoop;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DCLMonitor createDCLMonitor()
  {
    DCLMonitorImpl dclMonitor = new DCLMonitorImpl();
    return dclMonitor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DCLAnalyzer createDCLAnalyzer()
  {
    DCLAnalyzerImpl dclAnalyzer = new DCLAnalyzerImpl();
    return dclAnalyzer;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DCLPlanner createDCLPlanner()
  {
    DCLPlannerImpl dclPlanner = new DCLPlannerImpl();
    return dclPlanner;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DCLExecutor createDCLExecutor()
  {
    DCLExecutorImpl dclExecutor = new DCLExecutorImpl();
    return dclExecutor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DCLKnowledge createDCLKnowledge()
  {
    DCLKnowledgeImpl dclKnowledge = new DCLKnowledgeImpl();
    return dclKnowledge;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DCLSensor createDCLSensor()
  {
    DCLSensorImpl dclSensor = new DCLSensorImpl();
    return dclSensor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DCLEffector createDCLEffector()
  {
    DCLEffectorImpl dclEffector = new DCLEffectorImpl();
    return dclEffector;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DCLProbe createDCLProbe()
  {
    DCLProbeImpl dclProbe = new DCLProbeImpl();
    return dclProbe;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DCLGauge createDCLGauge()
  {
    DCLGaugeImpl dclGauge = new DCLGaugeImpl();
    return dclGauge;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DCLReferenceInput createDCLReferenceInput()
  {
    DCLReferenceInputImpl dclReferenceInput = new DCLReferenceInputImpl();
    return dclReferenceInput;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DCLMeasuredOutput createDCLMeasuredOutput()
  {
    DCLMeasuredOutputImpl dclMeasuredOutput = new DCLMeasuredOutputImpl();
    return dclMeasuredOutput;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SasDslPackage getSasDslPackage()
  {
    return (SasDslPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static SasDslPackage getPackage()
  {
    return SasDslPackage.eINSTANCE;
  }

} //SasDslFactoryImpl
