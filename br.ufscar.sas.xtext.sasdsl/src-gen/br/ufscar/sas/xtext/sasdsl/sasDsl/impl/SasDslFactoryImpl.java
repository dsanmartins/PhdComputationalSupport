/**
 * generated by Xtext 2.16.0
 */
package br.ufscar.sas.xtext.sasdsl.sasDsl.impl;

import br.ufscar.sas.xtext.sasdsl.sasDsl.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class SasDslFactoryImpl extends EFactoryImpl implements SasDslFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static SasDslFactory init()
  {
    try
    {
      SasDslFactory theSasDslFactory = (SasDslFactory)EPackage.Registry.INSTANCE.getEFactory(SasDslPackage.eNS_URI);
      if (theSasDslFactory != null)
      {
        return theSasDslFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new SasDslFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SasDslFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case SasDslPackage.ARCHITECTURE_DEFINITION: return createArchitectureDefinition();
      case SasDslPackage.DSL_ABSTRACTIONS: return createDSLAbstractions();
      case SasDslPackage.DSL_MANAGING: return createDSLManaging();
      case SasDslPackage.DSL_MANAGED: return createDSLManaged();
      case SasDslPackage.DSL_CONTROL_LOOP_MANAGER: return createDSLControlLoopManager();
      case SasDslPackage.DSL_CONTROL_LOOP: return createDSLControlLoop();
      case SasDslPackage.DSL_CONTAINRER_FOR_CL: return createDSLContainrerForCL();
      case SasDslPackage.DSL_CONTAINER_FOR_MAPE: return createDSLContainerForMAPE();
      case SasDslPackage.DSL_MONITOR: return createDSLMonitor();
      case SasDslPackage.DSL_ANALYZER: return createDSLAnalyzer();
      case SasDslPackage.DSL_PLANNER: return createDSLPlanner();
      case SasDslPackage.DSL_EXECUTOR: return createDSLExecutor();
      case SasDslPackage.DSL_KNOWLEDGE: return createDSLKnowledge();
      case SasDslPackage.DSL_SENSOR: return createDSLSensor();
      case SasDslPackage.DSL_EFFECTOR: return createDSLEffector();
      case SasDslPackage.DSL_PROBE: return createDSLProbe();
      case SasDslPackage.DSL_GAUGE: return createDSLGauge();
      case SasDslPackage.DSL_REFERENCE_INPUT: return createDSLReferenceInput();
      case SasDslPackage.DSL_MEASURED_OUTPUT: return createDSLMeasuredOutput();
      case SasDslPackage.DSL_RESTRICTIONS: return createDSLRestrictions();
      case SasDslPackage.ONLY: return createOnly();
      case SasDslPackage.CAN: return createCan();
      case SasDslPackage.CANNOT: return createCannot();
      case SasDslPackage.ONLY2: return createOnly2();
      case SasDslPackage.MUST: return createMust();
      case SasDslPackage.ELEMENT_TYPE: return createElementType();
      case SasDslPackage.BASIC_TYPE: return createBasicType();
      case SasDslPackage.ENTITY_TYPE: return createEntityType();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ArchitectureDefinition createArchitectureDefinition()
  {
    ArchitectureDefinitionImpl architectureDefinition = new ArchitectureDefinitionImpl();
    return architectureDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DSLAbstractions createDSLAbstractions()
  {
    DSLAbstractionsImpl dslAbstractions = new DSLAbstractionsImpl();
    return dslAbstractions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DSLManaging createDSLManaging()
  {
    DSLManagingImpl dslManaging = new DSLManagingImpl();
    return dslManaging;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DSLManaged createDSLManaged()
  {
    DSLManagedImpl dslManaged = new DSLManagedImpl();
    return dslManaged;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DSLControlLoopManager createDSLControlLoopManager()
  {
    DSLControlLoopManagerImpl dslControlLoopManager = new DSLControlLoopManagerImpl();
    return dslControlLoopManager;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DSLControlLoop createDSLControlLoop()
  {
    DSLControlLoopImpl dslControlLoop = new DSLControlLoopImpl();
    return dslControlLoop;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DSLContainrerForCL createDSLContainrerForCL()
  {
    DSLContainrerForCLImpl dslContainrerForCL = new DSLContainrerForCLImpl();
    return dslContainrerForCL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DSLContainerForMAPE createDSLContainerForMAPE()
  {
    DSLContainerForMAPEImpl dslContainerForMAPE = new DSLContainerForMAPEImpl();
    return dslContainerForMAPE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DSLMonitor createDSLMonitor()
  {
    DSLMonitorImpl dslMonitor = new DSLMonitorImpl();
    return dslMonitor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DSLAnalyzer createDSLAnalyzer()
  {
    DSLAnalyzerImpl dslAnalyzer = new DSLAnalyzerImpl();
    return dslAnalyzer;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DSLPlanner createDSLPlanner()
  {
    DSLPlannerImpl dslPlanner = new DSLPlannerImpl();
    return dslPlanner;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DSLExecutor createDSLExecutor()
  {
    DSLExecutorImpl dslExecutor = new DSLExecutorImpl();
    return dslExecutor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DSLKnowledge createDSLKnowledge()
  {
    DSLKnowledgeImpl dslKnowledge = new DSLKnowledgeImpl();
    return dslKnowledge;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DSLSensor createDSLSensor()
  {
    DSLSensorImpl dslSensor = new DSLSensorImpl();
    return dslSensor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DSLEffector createDSLEffector()
  {
    DSLEffectorImpl dslEffector = new DSLEffectorImpl();
    return dslEffector;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DSLProbe createDSLProbe()
  {
    DSLProbeImpl dslProbe = new DSLProbeImpl();
    return dslProbe;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DSLGauge createDSLGauge()
  {
    DSLGaugeImpl dslGauge = new DSLGaugeImpl();
    return dslGauge;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DSLReferenceInput createDSLReferenceInput()
  {
    DSLReferenceInputImpl dslReferenceInput = new DSLReferenceInputImpl();
    return dslReferenceInput;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DSLMeasuredOutput createDSLMeasuredOutput()
  {
    DSLMeasuredOutputImpl dslMeasuredOutput = new DSLMeasuredOutputImpl();
    return dslMeasuredOutput;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DSLRestrictions createDSLRestrictions()
  {
    DSLRestrictionsImpl dslRestrictions = new DSLRestrictionsImpl();
    return dslRestrictions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Only createOnly()
  {
    OnlyImpl only = new OnlyImpl();
    return only;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Can createCan()
  {
    CanImpl can = new CanImpl();
    return can;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Cannot createCannot()
  {
    CannotImpl cannot = new CannotImpl();
    return cannot;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Only2 createOnly2()
  {
    Only2Impl only2 = new Only2Impl();
    return only2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Must createMust()
  {
    MustImpl must = new MustImpl();
    return must;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ElementType createElementType()
  {
    ElementTypeImpl elementType = new ElementTypeImpl();
    return elementType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BasicType createBasicType()
  {
    BasicTypeImpl basicType = new BasicTypeImpl();
    return basicType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EntityType createEntityType()
  {
    EntityTypeImpl entityType = new EntityTypeImpl();
    return entityType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SasDslPackage getSasDslPackage()
  {
    return (SasDslPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static SasDslPackage getPackage()
  {
    return SasDslPackage.eINSTANCE;
  }

} //SasDslFactoryImpl
