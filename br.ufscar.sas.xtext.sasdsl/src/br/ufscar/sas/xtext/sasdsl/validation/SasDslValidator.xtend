/*
 * generated by Xtext 2.10.0
 */
package br.ufscar.sas.xtext.sasdsl.validation

import br.ufscar.sas.xtext.sasdsl.sasDsl.DCLAbstractions
import br.ufscar.sas.xtext.sasdsl.sasDsl.DCLManaging
import br.ufscar.sas.xtext.sasdsl.sasDsl.SasDslPackage
import org.eclipse.xtext.validation.Check

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class SasDslValidator extends AbstractSasDslValidator {
	
//	public static val INVALID_NAME = 'invalidName'
//
//	@Check
//	def checkGreetingStartsWithCapital(Greeting greeting) {
//		if (!Character.isUpperCase(greeting.name.charAt(0))) {
//			warning('Name should start with a capital', 
//					SasDslPackage.Literals.GREETING__NAME,
//					INVALID_NAME)
//		}
//	}
	
		
	@Check
	def checkNonDuplicateAbstractions(DCLAbstractions abstractions) {
		
		val names = newHashSet
	    for (g : abstractions.eContents) {
	    	if (g instanceof DCLManaging)
	    	{
				val managing = g as DCLManaging	
				var listName = managing.name
				for (var i =0; i < listName.length; i++)
				{
					if(!names.add(listName.get(i)))
	           			error("There are duplicate names: "+ managing.name, g,  SasDslPackage.Literals.DCL_MANAGING__NAME)
				}	
	    	}
	    }
	}
	
}
