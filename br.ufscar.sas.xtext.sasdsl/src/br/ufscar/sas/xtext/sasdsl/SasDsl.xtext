grammar br.ufscar.sas.xtext.sasdsl.SasDsl with org.eclipse.xtext.common.Terminals

generate sasDsl "http://www.ufscar.br/sas/xtext/sasdsl/SasDsl"

ArchitectureDefinition:
	'Abstractions' '{' abstractions += DSLAbstraction+ '}'  
	'Compositions' '{' compositions += DSLComposition* '}'  
	'Restrictions' '{' restrictions += DSLRestriction* '}'  
;
	
DSLAbstraction:
	
	DSLManaging | DSLManaged | DSLControlLoopManager | DSLControlLoop | 
	DSLMonitor | DSLAnalyzer | DSLPlanner | DSLExecutor | DSLKnowledge | DSLSensor | 
	DSLEffector | DSLProbe | DSLGauge | DSLReferenceInput | DSLMeasuredOutput 
;	

DSLComposition:
	
	DSLSensorBelongsTo | DSLReferenceInputBelongsTo | DSLEffectorBelongsTo | DSLMonitorBelongsTo1 | DSLMonitorBelongsTo2 | DSLAnalyzerBelongsTo1 |
	DSLAnalyzerBelongsTo2 | DSLPlannerBelongsTo1 | DSLPlannerBelongsTo2 | DSLExecutorBelongsTo1 | DSLExecutorBelongsTo2 | DSLClBelongsTo1 |
	DSLClBelongsTo2 | DSLClmBelongsTo | DSLMeasuredOuputBelongsTo | DSLGaugeBelongsTo | DSLProbeBelongsTo
;

DSLRestriction:
	
	(t=[DSLAbstraction] mustNot=Mustnot elementType=accessType type = [DSLAbstraction] ';') |
	(t=[DSLAbstraction] must=Must entityType=accessType type = [DSLAbstraction] ';')
;

DSLSensorBelongsTo:
	
	'sensor' sensor=[DSLSensor] 'must-be-in-monitor' monitor=[DSLMonitor] ';'
;

DSLReferenceInputBelongsTo:

	'reference-input' reference=[DSLReferenceInput] 'must-be-in-knowledge' knowledge=[DSLKnowledge] ';'
;


DSLEffectorBelongsTo:
	
	'effector' effector=[DSLEffector] 'must-be-in-executor' executor=[DSLExecutor] ';'
	
;

DSLMonitorBelongsTo1:
	
	'monitor' monitor=[DSLMonitor] 'must-be-in-control-loop' cl=[DSLControlLoop] ';'
	
;

DSLMonitorBelongsTo2:
	
	'monitor' monitor=[DSLMonitor] 'must-be-in-managing' managing=[DSLManaging] ';'
	
;

DSLAnalyzerBelongsTo1:
	
	'analyzer' analyzer=[DSLAnalyzer] 'must-be-in-control-loop' cl=[DSLControlLoop] ';'
	
;

DSLAnalyzerBelongsTo2:
	
	'analyzer' analyzer=[DSLAnalyzer] 'must-be-in-managing' managing=[DSLManaging] ';'
	
;

DSLPlannerBelongsTo1:
	
	'planner' planner=[DSLPlanner] 'must-be-in-control-loop' cl=[DSLControlLoop] ';'
	
;

DSLPlannerBelongsTo2:
	
	'planner' planner=[DSLPlanner] 'must-be-in-managing' managing=[DSLManaging] ';'
	
;

DSLExecutorBelongsTo1:
	
	'executor' executor=[DSLExecutor] 'must-be-in-control-loop' cl=[DSLControlLoop] ';'
	
;

DSLExecutorBelongsTo2:
	
	'executor' executor=[DSLExecutor] 'must-be-in-managing' managing=[DSLManaging] ';'
	
;

DSLClBelongsTo1:
	
	'control-loop' cl=[DSLControlLoop] 'must-be-in-control-loop-manager' clm=[DSLControlLoopManager] ';'
	
;

DSLClBelongsTo2:
	
	'control-loop' cl=[DSLControlLoop] 'must-be-in-managing' managing=[DSLManaging] ';'
	
;

DSLClmBelongsTo:
	
	'control-loop-manager' cl=[DSLControlLoopManager] 'must-be-in-managing' managing=[DSLManaging] ';'
	
;

DSLMeasuredOuputBelongsTo:
	
	'measured-output' measured=[DSLMeasuredOutput] 'must-be-in-managed' managed=[DSLManaged] ';'
;

DSLGaugeBelongsTo:
	
	'gauge' gauge=[DSLGauge] 'must-be-in-managed' managed=[DSLManaged] ';'
;

DSLProbeBelongsTo:
	
	'probe' probe=[DSLProbe] 'must-be-in-managed' managed=[DSLManaged] ';'
;

DSLManaging:
	
	'Managing' name=ID ';'
;

DSLManaged:
	
	'Managed' name=ID  ';'
;

DSLControlLoopManager:
	
	'ControlLoopManager' name=ID  'typeOf' DSLTypeCLM ('with-interface' interface+=ID (',' interface+=ID)* )? ';'
;

DSLTypeCLM:
	
	'Synchronized'| 'Coordinated' | 'Independent'
	
;

DSLControlLoop:
	
	'ControlLoop' name=ID  ('with-interface' interface+=ID (',' interface+=ID)* )? ';'
;


DSLMonitor:
	
	'Monitor'  name=ID  ('with-interface' interface+=ID (',' interface+=ID)* )? ';'
;

DSLAnalyzer:
	
	'Analyzer' name=ID  ('with-interface' interface+=ID (',' interface+=ID)* )? ';'
;

DSLPlanner: 
	
	'Planner' name=ID ('with-interface' interface+=ID (',' interface+=ID)* )? ';'
;

DSLExecutor: 
	
	'Executor' name=ID ('with-interface' interface+=ID (',' interface+=ID)* )? ';'
;

DSLKnowledge: 
	
	'Knowledge' name=ID ('with-interface' interface+=ID (',' interface+=ID)* )? ';'
;

DSLSensor: 
	
	'Sensor' name=ID  ('with-interface' interface+=ID (',' interface+=ID)* )? ';'
;

DSLEffector: 
	
	'Effector' name=ID ('with-interface' interface+=ID (',' interface+=ID)* )? ';'
;
  
DSLProbe:
	
	'Probe' name=ID  ('with-interface' interface+=ID (',' interface+=ID)* )? ';'
;  

DSLGauge: 
	
	'Gauge' name=ID ('with-interface' interface+=ID (',' interface+=ID)* )? ';'
;

DSLReferenceInput:
	
	'ReferenceInput'  name=ID ('with-interface' interface+=ID (',' interface+=ID)* )? ';'
;

DSLMeasuredOutput:
	
	'MeasuredOutput' name=ID ('with-interface' interface+=ID (',' interface+=ID)* )? ';'
;

	
Mustnot:
	mustnot='must-not-'
;

Must:
	must='must-'
;

  
accessType: typeName= 'access';
 
 
