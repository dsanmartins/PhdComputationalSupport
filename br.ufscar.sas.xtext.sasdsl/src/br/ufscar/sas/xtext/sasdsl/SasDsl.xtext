grammar br.ufscar.sas.xtext.sasdsl.SasDsl with org.eclipse.xtext.common.Terminals

generate sasDsl "http://www.ufscar.br/sas/xtext/sasdsl/SasDsl"

ArchitectureDefinition:
	'Abstractions' ':' 	abstractions += DSLAbstractions+  
	'Restrictions' ':'  (dslRestrictions += DSLRestrictions*)
	
	;
	
DSLAbstractions:
	
	DSLManaging | DSLManaged | DSLControlLoopManager | DSLControlLoop | DSLMonitor | DSLAnalyzer | DSLPlanner | DSLExecutor | DSLKnowledge | DSLSensor | 
	DSLEffector | DSLProbe | DSLGauge | DSLReferenceInput | DSLMeasuredOutput 
;	

DSLManaging:
	
	'Managing' name=ID ('in' subSystem=[DSLManaging])? ';'
;

DSLManaged:
	
	'Managed' name=ID ('in' subSystem=[DSLManaged])? ';'
;

DSLControlLoopManager:
	
	'ControlLoopManager' name=ID 'typeOf' DSLTypeCLM ('in' managing=[DSLManaging])? ';'
;

DSLTypeCLM:
	
	'Synchronized'| 'Coordinated' | 'Independent'
	
;

DSLControlLoop:
	
	'ControlLoop' name=ID ('in' subSystem=[DSLContainrerForCL])? ';'
;


DSLContainrerForCL:
	
	DSLControlLoopManager | DSLManaging
	
;

DSLContainerForMAPE:
	
	DSLManaging | DSLControlLoop 
	
;

DSLMonitor:
	
	'Monitor'  name=ID ('in' subSystem=[DSLContainerForMAPE])? ';'
;

DSLAnalyzer:
	
	'Analyzer' name=ID ('in' subSystem=[DSLContainerForMAPE])? ';'
;

DSLPlanner: 
	
	'Planner' name=ID ('in' subSystem=[DSLContainerForMAPE])? ';'
;

DSLExecutor: 
	
	'Executor' name=ID ('in' subSystem=[DSLContainerForMAPE])? ';'
;

DSLKnowledge: 
	
	'Knowledge' name=ID ('in' subSystem=[DSLContainerForMAPE])? ';'
;

DSLSensor: 
	
	'Sensor' name=ID ('in' monitor=[DSLMonitor])? ';'
;

DSLEffector: 
	
	'Effector' name=ID ('in' executor=[DSLExecutor])? ';'
;
  
DSLProbe:
	
	'Probe' name=ID ('in' managed=[DSLManaged])? ';'
;  

DSLGauge: 
	
	'Gauge' name=ID ('in' managed=[DSLManaged])? ';'
;

DSLReferenceInput:
	
	'ReferenceInput'  name=ID ('in' kwnoledge=[DSLKnowledge])? ';'
;

DSLMeasuredOutput:
	
	'MeasuredOutput' name=ID ('in' managed=[DSLManaged])? ';'
;

DSLRestrictions:
	
	(only=Only t=[DSLAbstractions] can=Can elementType=ElementType type = [DSLAbstractions] ';') | 
	(t=[DSLAbstractions] cannot=Cannot elementType=ElementType type = [DSLAbstractions] ';') |
	(t=[DSLAbstractions] can=Can elementType=ElementType type = [DSLAbstractions] ';') |
	(t=[DSLAbstractions] can=Can elementType=ElementType only2=Only2 type = [DSLAbstractions] ';') |
	(t=[DSLAbstractions] must=Must entityType=EntityType type = [DSLAbstractions] ';')
;
	
Only:
	only='only'
;
 
Can:
	can='can-'
;
 
Cannot:
	cannot='cannot-'
;

Only2:
	only2='-only'
;	

Must:
	must='must-'
;

ElementType: BasicType | EntityType;
   
BasicType: typeName= ('access' | 'declare' | 'handle' | 'create' | 'depend');
 
EntityType: entity=('extend' | 'implement' | 'derive' | 'throw' | 'useannotation');

