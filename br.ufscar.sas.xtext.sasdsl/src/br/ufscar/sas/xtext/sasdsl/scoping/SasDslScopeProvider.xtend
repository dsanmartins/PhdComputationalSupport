/*
 * generated by Xtext 2.10.0
 */
package br.ufscar.sas.xtext.sasdsl.scoping

import br.ufscar.sas.xtext.sasdsl.sasDsl.SasDslPackage
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.scoping.Scopes
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLRestrictionMonitor
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLMonitor
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLRestrictionPlanner
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLPlanner
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLRestrictionExecutor
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLExecutor
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLRestrictionKnowledge
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLKnowledge
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLRestrictionSensor
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLSensor
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLRestrictionEffector
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLEffector

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class SasDslScopeProvider extends AbstractSasDslScopeProvider {

	override getScope(EObject context, EReference reference) {
        if (reference === SasDslPackage.Literals.DSL_RESTRICTION_SENSOR__SENSORINTERFACE) {
            if (context instanceof DSLRestrictionSensor) {
                val sensor = context.sensor as DSLSensor   
                if (sensor instanceof DSLSensor)
                	return Scopes.scopeFor(sensor.sensorinterfaces)
            }
        }
        if (reference === SasDslPackage.Literals.DSL_RESTRICTION_MONITOR__MONITORINTERFACE) {
            if (context instanceof DSLRestrictionMonitor) {
                val monitor = context.monitor as DSLMonitor   
                if (monitor instanceof DSLMonitor)
                	return Scopes.scopeFor(monitor.monitorinterfaces)
            }
        }
        if (reference === SasDslPackage.Literals.DSL_RESTRICTION_PLANNER__PLANNERINTERFACE) {
            if (context instanceof DSLRestrictionPlanner) {
                val planner = context.planner as DSLPlanner   
                if (planner instanceof DSLPlanner)
                	return Scopes.scopeFor(planner.plannerinterfaces)
            }
        }
        if (reference === SasDslPackage.Literals.DSL_RESTRICTION_EXECUTOR__EXECUTORINTERFACE) {
            if (context instanceof DSLRestrictionExecutor) {
                val executor = context.executor as DSLExecutor   
                if (executor instanceof DSLExecutor)
                	return Scopes.scopeFor(executor.executorinterfaces)
            }
        }
        if (reference === SasDslPackage.Literals.DSL_RESTRICTION_KNOWLEDGE__KNOWLEDGEINTERFACE) {
            if (context instanceof DSLRestrictionKnowledge) {
                val knowledge = context.knowledge as DSLKnowledge   
                if (knowledge instanceof DSLKnowledge)
                	return Scopes.scopeFor(knowledge.knowledgeinterfaces)
            }
        }
        if (reference === SasDslPackage.Literals.DSL_RESTRICTION_EFFECTOR__EFFECTORINTERFACE) {
            if (context instanceof DSLRestrictionEffector) {
                val effector = context.effector as DSLEffector   
                if (effector instanceof DSLEffector)
                	return Scopes.scopeFor(effector.effectorinterfaces)
            }
        }
        
        super.getScope(context, reference)
    }


}
