/**
 * generated by Xtext 2.16.0
 */
package br.ufscar.sas.xtext.sasdsl.formatting2;

import br.ufscar.sas.xtext.sasdsl.sasDsl.ArchitectureDefinition;
import br.ufscar.sas.xtext.sasdsl.sasDsl.DSLAbstractions;
import br.ufscar.sas.xtext.sasdsl.services.SasDslGrammarAccess;
import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.formatting2.IHiddenRegionFormatter;
import org.eclipse.xtext.formatting2.regionaccess.ISemanticRegion;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;

@SuppressWarnings("all")
public class SasDslFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private SasDslGrammarAccess _sasDslGrammarAccess;
  
  protected void _format(final ArchitectureDefinition architectureDefinition, @Extension final IFormattableDocument document) {
    EList<DSLAbstractions> _abstractions = architectureDefinition.getAbstractions();
    for (final DSLAbstractions dSLAbstractions : _abstractions) {
      {
        document.<DSLAbstractions>format(dSLAbstractions);
        final ISemanticRegion open = this.textRegionExtensions.regionFor(dSLAbstractions).keyword(":");
        final ISemanticRegion close = this.textRegionExtensions.regionFor(dSLAbstractions).keyword("restriction");
        final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
          it.indent();
        };
        document.<ISemanticRegion, ISemanticRegion>interior(open, close, _function);
      }
    }
  }
  
  public void format(final Object architectureDefinition, final IFormattableDocument document) {
    if (architectureDefinition instanceof XtextResource) {
      _format((XtextResource)architectureDefinition, document);
      return;
    } else if (architectureDefinition instanceof ArchitectureDefinition) {
      _format((ArchitectureDefinition)architectureDefinition, document);
      return;
    } else if (architectureDefinition instanceof EObject) {
      _format((EObject)architectureDefinition, document);
      return;
    } else if (architectureDefinition == null) {
      _format((Void)null, document);
      return;
    } else if (architectureDefinition != null) {
      _format(architectureDefinition, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(architectureDefinition, document).toString());
    }
  }
}
